rules Abstract_literal ::= Decimal_literal | Based_literal

Access_type_definition . Access_type_definition ::= "ACCESS" Subtype_indication

rules Actual_designator ::= Expression
                          | Signal_name
                          | Variable_name
                          | File_name
                          | "OPEN"

Actual_parameter_part . Actual_parameter_part ::= Parameter_association_list

rules Actual_part ::= Actual_designator
                      | Function_name ( Actual_designator )
                      | Type_mark ( Actual_designator )

rules Adding_operator ::= "+" | "-"  | "&"


-- Was Aggregate
[Element_association] ::= ;
[Element_association] ::= Element_association "," [Element_association] ;
Aggregate . Aggregate ::= "(" [Element_association] ")" ;


Alias_declaration .Alias_declaration ::= "ALIAS" Alias_designator [Subtype_indication] "IS" Name [Signature]   ;
seperator Subtype_indication ";" ; 
seperator Signature "" ; 


rules Alias_designator ::= Identifier | Character_literal | Operator_symbol ";"

rules Allocator ::= "NEW" Subtype_indication | "NEW" Qualified_expression ;

Architecture_body . Architecture_body ::=
  "ARCHITECTURE" Identifier "OF" Entity_name "IS"
    Architecture_declarative_part
  "BEGIN"
    Architecture_statement_part
  "END" MaybeArch MaybeArchitecture_simple_name ;
rules MaybeArch = "ARCHITECTURE" | ;
rules MaybeArchitecture_simple_name = Architecture_simple_name | ;

Architecture_declarative_part . Architecture_declarative_part ::= [Block_declarative_item ] ; 
[Block_declarative_item] ::= ;
[Block_declarative_item] ::= Block_declarative_item [Block_declarative_item] ;

Architecture_statement_part . Architecture_statement_part ::= [Concurrent_statement] ;
[Concurrent_statement] ::= ;
[Concurrent_statement] ::= Concurrent_statement [Concurrent_statement] ;


rules Array_type_definition ::= Unconstrained_array_definition  |   Constrained_array_definition

assertion ::=
  "ASSERT" Condition
    [ "REPORT" Expression ]
    [ "SEVERITY" Expression ]

assertion_statement ::=   [ Label : ] Assertion ;

association_element ::=
  [ Formal_part => ] Actual_part

association_list ::=
  Association_element { , Association_element }

attribute_declaration ::=
  "ATTRIBUTE" Identifier : Type_mark ;

attribute_designator ::= Attribute_simple_name

attribute_name ::=
  Prefix [ Signature ] ' Attribute_designator [ ( Expression ) ]

attribute_specification ::=
  "ATTRIBUTE" Attribute_designator "OF" Entity_specification "IS" Expression ;

base ::= Integer

base_specifier ::=  B | O | X

base_unit_declaration ::= Identifier ;

based_integer ::=
  Extended_digit { [ Underline ] Extended_digit }

based_literal ::=
  Base # Based_integer [ . Based_integer ] # [ Exponent ]

basic_character ::=
  Basic_graphic_character | Format_effector

basic_graphic_character ::=
  Upper_case_letter | Digit | Special_character| Space_character

basic_identifier ::=
  Letter { [ Underline ] Letter_or_digit }

binding_indication ::=
  [ "USE" Entity_aspect ]
  [ Generic_map_aspect ]
  [ Port_map_aspect ]

bit_string_literal ::=  Base_specifier " Bit_value "

bit_value ::= Extended_digit { [ Underline ] Extended_digit }

block_configuration ::=
  "FOR" Block_specification
    { Use_clause }
    { Configuration_item }
  "END" "FOR" ;

block_declarative_item ::=
  Subprogram_declaration
  | Subprogram_body
  | Type_declaration
  | Subtype_declaration
  | Constant_declaration
  | Signal_declaration
  | Shared_variable_declaration
  | File_declaration
  | Alias_declaration
  | Component_declaration
  | Attribute_declaration
  | Attribute_specification
  | Configuration_specification
  | Disconnection_specification
  | Use_clause
  | Group_template_declaration
  | Group_declaration

block_declarative_part ::=
  { Block_declarative_item }

block_header ::=
  [ Generic_clause
  [ Generic_map_aspect ; ] ]
  [ Port_clause
  [ Port_map_aspect ; ] ]

block_specification ::=
  Architecture_name
  | Block_statement_label
  | Generate_statement_label [ ( Index_specification ) ]

block_statement ::=
  Block_label :
    "BLOCK" [ ( Guard_expression ) ] [ "IS" ]
      Block_header
      Block_declarative_part
    "BEGIN"
      Block_statement_part
    "END" "BLOCK" [ Block_label ] ;

block_statement_part ::=
  { Concurrent_statement }

case_statement ::=
  [ Case_label : ]
    "CASE" Expression "IS"
      Case_statement_alternative
      { Case_statement_alternative }
    "END" "CASE" [ Case_label ] ;

case_statement_alternative ::=
  "WHEN" Choices =>
    Sequence_of_statements

character_literal ::= ' Graphic_character '

choice ::=
  Simple_expression
  | Discrete_range
  | Element_simple_name
  | "OTHERS"

choices ::= Choice { | Choice }

component_configuration ::=
  "FOR" Component_specification
    [ Binding_indication ; ]
    [ Block_configuration ]
  "END" "FOR" ;

component_declaration ::=
  "COMPONENT" Identifier [ "IS" ]
    [ Local_generic_clause ]
    [ Local_port_clause ]
  "END" "COMPONENT" [ Component_simple_name ] ;

component_instantiation_statement ::=
  Instantiation_label :
    Instantiated_unit
      [ Generic_map_aspect ]
      [ Port_map_aspect ] ;

component_specification ::=
  Instantiation_list : Component_name

composite_type_definition ::=
  Array_type_definition
  | Record_type_definition

concurrent_assertion_statement ::=
  [ Label : ] [ "POSTPONED" ] Assertion ;

concurrent_procedure_call_statement ::=
  [ Label : ] [ "POSTPONED" ] Procedure_call ;

concurrent_signal_assignment_statement ::=
    [ Label : ] [ "POSTPONED" ] Conditional_signal_assignment
  | [ Label : ] [ "POSTPONED" ] Selected_signal_assignment

concurrent_statement ::=
  Block_statement
  | Process_statement
  | Concurrent_procedure_call_statement
  | Concurrent_assertion_statement
  | Concurrent_signal_assignment_statement
  | Component_instantiation_statement
  | Generate_statement

condition ::= Boolean_expression

condition_clause ::= "UNTIL" Condition

conditional_signal_assignment ::=
  Target  <= Options Conditional_waveforms ;

conditional_waveforms ::=
  { Waveform "WHEN" Condition "ELSE" }
  Waveform [ "WHEN" Condition ]

configuration_declaration ::=
  "CONFIGURATION" Identifier "OF" Entity_name "IS"
    Configuration_declarative_part
    Block_configuration
  "END" [ "CONFIGURATION" ] [ Configuration_simple_name ] ;

configuration_declarative_item ::=
  Use_clause
  | Attribute_specification
  | Group_declaration

configuration_declarative_part ::=
  { Configuration_declarative_item }

configuration_item ::=
  Block_configuration
  | Component_configuration

configuration_specification ::=
  "FOR" Component_specification Binding_indication ;

constant_declaration ::=
  "CONSTANT" Identifier_list : Subtype_indication [ := Expression ] ;

constrained_array_definition ::=
  "ARRAY" Index_constraint "OF" Element_subtype_indication

constraint ::=
  Range_constraint
  | Index_constraint

context_clause ::= { Context_item }

context_item ::=
  Library_clause
  | Use_clause

decimal_literal ::= Integer [ . Integer ] [ Exponent ]

declaration ::=
  Type_declaration
  | Subtype_declaration
  | Object_declaration
  | Interface_declaration
  | Alias_declaration
  | Attribute_declaration
  | Component_declaration
  | Group_template_declaration
  | Group_declaration
  | Entity_declaration
  | Configuration_declaration
  | Subprogram_declaration
  | Package_declaration

delay_mechanism ::=
  "TRANSPORT"
  | [ "REJECT" Time_expression ] "INERTIAL"

design_file ::= Design_unit { Design_unit }

design_unit ::= Context_clause Library_unit

designator ::= Identifier  |  Operator_symbol

direction ::= "TO" | "DOWNTO"

disconnection_specification ::=
  "DISCONNECT" Guarded_signal_specification "AFTER" Time_expression ;

discrete_range ::= Discrete_subtype_indication | Range

element_association ::=
  [ Choices => ] Expression

element_declaration ::=
  Identifier_list : Element_subtype_definition ;

element_subtype_definition ::= Subtype_indication

entity_aspect ::=
    "ENTITY" Entity_name [ ( Architecture_identifier) ]
  | "CONFIGURATION" Configuration_name
  | "OPEN"

entity_class ::=
  "ENTITY"       | "ARCHITECTURE"  | "CONFIGURATION"
  | "PROCEDURE"  | "FUNCTION"       | "PACKAGE"
  | "TYPE"       | "SUBTYPE"       | "CONSTANT"
  | "SIGNAL"     | "VARIABLE"       | "COMPONENT"
  | "LABEL"       | "LITERAL"       | "UNITS"
  | "GROUP"       | "FILE"

entity_class_entry ::=  Entity_class [ <> ]

entity_class_entry_list ::=
  Entity_class_entry { , Entity_class_entry }

entity_declaration ::=
  "ENTITY" Identifier "IS"
    Entity_header
    Entity_declarative_part
      [ "BEGIN"
    Entity_statement_part ]
  "END" [ "ENTITY" ] [ Entity_simple_name ] ;

entity_declarative_item ::=
  Subprogram_declaration
  | Subprogram_body
  | Type_declaration
  | Subtype_declaration
  | Constant_declaration
  | Signal_declaration
  | Shared_variable_declaration
  | File_declaration
  | Alias_declaration
  | Attribute_declaration
  | Attribute_specification
  | Disconnection_specification
  | Use_clause
  | Group_template_declaration
  | Group_declaration

entity_declarative_part ::=
  { Entity_declarative_item }

entity_designator ::= Entity_tag [ Signature ]

entity_header ::=
  [ Formal_generic_clause ]
  [ Formal_port_clause ]

entity_name_list ::=
  Entity_designator { , Entity_designator }
  | "OTHERS"
  | "ALL"

entity_specification ::=
  Entity_name_list : Entity_class

entity_statement ::=
  Concurrent_assertion_statement
  | Passive_concurrent_procedure_call_statement
  | Passive_process_statement

entity_statement_part ::=
  { Entity_statement }

entity_tag ::=  Simple_name | Character_literal | Operator_symbol

enumeration_literal ::= Identifier | Character_literal

enumeration_type_definition ::=
  ( Enumeration_literal { , Enumeration_literal } )

exit_statement ::=
  [ Label : ] "EXIT" [ Loop_label ] [ "WHEN" Condition ] ;


exponent ::= E [ + ] Integer | E - Integer

expression ::=
    Relation { "AND" Relation }
  | Relation { "OR" Relation }
  | Relation { "XOR" Relation }
  | Relation [ "NAND" Relation ]
  | Relation [ "NOR" Relation ]
  | Relation { "XNOR" Relation }

extended_digit ::= Digit | Letter

extended_identifier ::=
  \ Graphic_character { Graphic_character } \

factor ::=
  Primary [ ** Primary ]
  | "ABS" Primary
  | "NOT" Primary

file_declaration ::=
  "FILE" Identifier_list : Subtype_indication File_open_information ] ;

file_logical_name ::= String_expression

file_open_information ::=
  [ "OPEN" File_open_kind_expression ] "IS" File_logical_name

file_type_definition ::=
  "FILE"  "OF" Type_mark

floating_type_definition ::=  Range_constraint

formal_designator ::=
  Generic_name
  | Port_name
  | Parameter_name

formal_parameter_list ::= Parameter_interface_list

formal_part ::=
  Formal_designator
  | Function_name ( Formal_designator )
  | Type_mark ( Formal_designator )

full_type_declaration ::=
  "TYPE" Identifier "IS" Type_definition ;

function_call ::=
  Function_name [ ( Actual_parameter_part ) ]

generate_statement ::=
  Generate_label :
    Generation_scheme "GENERATE"
      [ { Block_declarative_item }
    "BEGIN" ]
      { Concurrent_statement }
    "END" "GENERATE" [ Generate_label ] ;

generation_scheme ::=
  "FOR" Generate_parameter_specification
  | "IF" Condition

generic_clause ::=
  "GENERIC" ( Generic_list ) ;

generic_list ::= Generic_interface_list

generic_map_aspect ::=
  "GENERIC" "MAP" ( Generic_association_list )

graphic_character ::=
  Basic_graphic_character   | Lower_case_letter | Other_special_character

group_constituent ::= Name | Character_literal

group_constituent_list ::= Group_constituent { , Group_constituent }

group_template_declaration ::=
  "GROUP" Identifier "IS" ( Entity_class_entry_list ) ;

group_declaration ::=
  "GROUP" Identifier : Group_template_name ( Group_constituent_list ) ;

guarded_signal_specification ::=
  Guarded_signal_list : Type_mark

identifier ::=
  Basic_identifier | Extended_identifier

identifier_list ::= Identifier { , Identifier }

if_statement ::=
  [ If_label : ]
    "IF" Condition "THEN"
      Sequence_of_statements
    { "ELSIF" Condition "THEN"
      Sequence_of_statements }
    [ "ELSE"
      Sequence_of_statements ]
    "END" "IF" [ If_label ] ;

incomplete_type_declaration ::=   "TYPE" Identifier ;

index_constraint ::= ( Discrete_range { , Discrete_range } )

index_specification ::=
  Discrete_range
  | Static_expression

index_subtype_definition ::= Type_mark Range <>

indexed_name ::= Prefix ( Expression { , Expression } )

instantiated_unit ::=
  [ "COMPONENT" ] Component_name
  | "ENTITY" Entity_name [ ( Architecture_identifier ) ]
  | "CONFIGURATION" Configuration_name

instantiation_list ::=
  Instantiation_label { , Instantiation_label }
  | "OTHERS"
  | "ALL"

integer ::= Digit { [ Underline ] Digit }

integer_type_definition ::= Range_constraint

interface_constant_declaration ::=
  [ "CONSTANT" ] Identifier_list : [ "IN" ] Subtype_indication [ := Static_expression ]

interface_declaration ::=
  Interface_constant_declaration
  | Interface_signal_declaration
  | Interface_variable_declaration
  | Interface_file_declaration

interface_element ::= Interface_declaration

interface_file_declaration ::=
  "FILE" Identifier_list : Subtype_indication

interface_list ::=
  Interface_element { ; Interface_element }

interface_signal_declaration ::=
  ["SIGNAL"] Identifier_list : [ Mode ] Subtype_indication [ "BUS" ] [ := Static_expression ]

interface_variable_declaration ::=
  ["VARIABLE"] Identifier_list : [ Mode ] Subtype_indication [ := Static_expression ]

iteration_scheme ::=
  "WHILE" Condition
  | "FOR" Loop_parameter_specification

label ::= Identifier

letter ::= Upper_case_letter | Lower_case_letter

letter_or_digit ::= Letter | Digit

library_clause ::= "LIBRARY" Logical_name_list ;

library_unit ::=
  Primary_unit
  | Secondary_unit

literal ::=
  Numeric_literal
  | Enumeration_literal
  | String_literal
  | Bit_string_literal
  | "NULL"

logical_name ::= Identifier

logical_name_list ::= Logical_name { , Logical_name }

logical_operator ::= "AND" | "OR" | "NAND" | "NOR" | "XOR" | "XNOR"

loop_statement ::=
  [ Loop_label : ]
    [ Iteration_scheme ] "LOOP"
      Sequence_of_statements
    "END" "LOOP" [ Loop_label ] ;

miscellaneous_operator ::= ** | "ABS" | "NOT"

mode ::= "IN" | "OUT" | "INOUT" | "BUFFER" | "LINKAGE"

multiplying_operator ::= * | / | "MOD" | "REM"

name ::=
  Simple_name
  | Operator_symbol
  | Selected_name
  | Indexed_name
  | Slice_name
  | Attribute_name

next_statement ::=
  [ Label : ] "NEXT" [ Loop_label ] [ "WHEN" Condition ] ;

null_statement ::= [ Label : ] "NULL" ;

numeric_literal ::=
  Abstract_literal
  | Physical_literal

object_declaration ::=
  Constant_declaration
  | Signal_declaration
  | Variable_declaration
  | File_declaration

operator_symbol ::= String_literal

options ::= [ "GUARDED" ] [ Delay_mechanism ]

package_body ::=
  "PACKAGE" Body Package_simple_name "IS"
    Package_body_declarative_part
  "END" [ "PACKAGE" "BODY" ] [ Package_simple_name ] ;

package_body_declarative_item ::=
  Subprogram_declaration
  | Subprogram_body
  | Type_declaration
  | Subtype_declaration
  | Constant_declaration
  | Shared_variable_declaration
  | File_declaration
  | Alias_declaration
  | Use_clause
  | Group_template_declaration
  | Group_declaration

package_body_declarative_part ::=
  { Package_body_declarative_item }

package_declaration ::=
  "PACKAGE" Identifier "IS"
    Package_declarative_part
  "END" [ "PACKAGE" ] [ Package_simple_name ] ;

package_declarative_item ::=
  Subprogram_declaration
  | Type_declaration
  | Subtype_declaration
  | Constant_declaration
  | Signal_declaration
  | Shared_variable_declaration
  | File_declaration
  | Alias_declaration
  | Component_declaration
  | Attribute_declaration
  | Attribute_specification
  | Disconnection_specification
  | Use_clause
  | Group_template_declaration
  | Group_declaration

package_declarative_part ::=
  { Package_declarative_item }

parameter_specification ::=
  Identifier "IN" Discrete_range

physical_literal ::= [ Abstract_literal ] Unit_name

physical_type_definition ::=
  Range_constraint
    "UNITS"
      Base_unit_declaration
      { Secondary_unit_declaration }
    "END" "UNITS" [ Physical_type_simple_name ]

port_clause ::=
  "PORT" ( Port_list ) ;

port_list ::= Port_interface_list

port_map_aspect ::=
  "PORT" "MAP" ( Port_association_list )

prefix ::=
  Name
  | Function_call

primary ::=
  Name
  | Literal
  | Aggregate
  | Function_call
  | Qualified_expression
  | Type_conversion
  | Allocator
  | ( Expression )

primary_unit ::=
  Entity_declaration
  | Configuration_declaration
  | Package_declaration

procedure_call ::= Procedure_name [ ( Actual_parameter_part ) ]

procedure_call_statement ::=
  [ Label : ] Procedure_call ;

process_declarative_item ::=
  Subprogram_declaration
  | Subprogram_body
  | Type_declaration
  | Subtype_declaration
  | Constant_declaration
  | Variable_declaration
  | File_declaration
  | Alias_declaration
  | Attribute_declaration
  | Attribute_specification
  | Use_clause
  | Group_template_declaration
  | Group_declaration

process_declarative_part ::=
  { Process_declarative_item }

process_statement ::=
  [ Process_label : ]
    [ "POSTPONED" ] "PROCESS" [ ( Sensitivity_list ) ] [ "IS" ]
      Process_declarative_part
    "BEGIN"
      Process_statement_part
    "END" [ "POSTPONED" ] "PROCESS" [ Process_label ] ;

process_statement_part ::=
  { Sequential_statement }

qualified_expression ::=
  Type_mark ' ( Expression )
  | Type_mark ' Aggregate

range ::=
  Range_attribute_name
  | Simple_expression Direction Simple_expression

range_constraint ::= Range Range

record_type_definition ::=
  "RECORD"
    Element_declaration
    { Element_declaration }
  "END" "RECORD" [ Record_type_simple_name ]

relation ::=
  Shift_expression [ Relational_operator Shift_expression ]

relational_operator ::=    =  |  /=  |  <  |  <=   |  >  |  >=

report_statement ::=
  [ Label : ]
    "REPORT" Expression
      [ "SEVERITY" Expression ] ;

return_statement ::=
  [ Label : ] "RETURN" [ Expression ] ;

scalar_type_definition ::=
  Enumeration_type_definition   | Integer_type_definition
  | Floating_type_definition    | Physical_type_definition

secondary_unit ::=
  Architecture_body
  | Package_body

secondary_unit_declaration ::=  Identifier = Physical_literal ;

selected_name ::= Prefix . Suffix

selected_signal_assignment ::=
  "WITH" Expression "SELECT"
    Target  <= Options Selected_waveforms ;

selected_waveforms ::=
  { Waveform "WHEN" Choices , }
  Waveform "WHEN" Choices

sensitivity_clause ::=  "ON" Sensitivity_list

sensitivity_list ::= Signal_name { , Signal_name }

sequence_of_statements ::=
  { Sequential_statement }

sequential_statement ::=
  Wait_statement
  | Assertion_statement
  | Report_statement
  | Signal_assignment_statement
  | Variable_assignment_statement
  | Procedure_call_statement
  | If_statement
  | Case_statement
  | Loop_statement
  | Next_statement
  | Exit_statement
  | Return_statement
  | Null_statement

shift_expression ::=
  Simple_expression [ Shift_operator Simple_expression ]

shift_operator ::= "SLL" | "SRL" | "SLA" | "SRA" | "ROL" | "ROR"

sign ::= + | -

signal_assignment_statement ::=
  [ Label : ] Target <= [ Delay_mechanism ] Waveform ;

signal_declaration ::=
  Signal Identifier_list : Subtype_indication [ Signal_kind ] [ := Expression ] ;

signal_kind ::=   "REGISTER"  |  "BUS"

signal_list ::=
  Signal_name { , Signal_name }
  | "OTHERS"
  | "ALL"

signature ::= [ [ Type_mark { , Type_mark } ] [ Return Type_mark ] ]

simple_expression ::=
  [ Sign ] Term { Adding_operator Term }

simple_name ::=   Identifier

slice_name ::=  Prefix ( Discrete_range )

string_literal ::= " { Graphic_character } "

subprogram_body ::=
  Subprogram_specification "IS"
    Subprogram_declarative_part
  "BEGIN"
    Subprogram_statement_part
  "END" [ Subprogram_kind ] [ Designator ] ;

subprogram_declaration ::=
  Subprogram_specification ;

subprogram_declarative_item ::=
  Subprogram_declaration
  | Subprogram_body
  | Type_declaration
  | Subtype_declaration
  | Constant_declaration
  | Variable_declaration
  | File_declaration
  | Alias_declaration
  | Attribute_declaration
  | Attribute_specification
  | Use_clause
  | Group_template_declaration
  | Group_declaration

subprogram_declarative_part ::=
  { Subprogram_declarative_item }

subprogram_kind ::= "PROCEDURE" | "FUNCTION"

subprogram_specification ::=
  "PROCEDURE" Designator [ ( Formal_parameter_list ) ]
  | [ "PURE" | "IMPURE" ]  "FUNCTION" Designator [ ( Formal_parameter_list ) ]
    "RETURN" Type_mark

subprogram_statement_part ::=
  { Sequential_statement }

subtype_declaration ::=
  "SUBTYPE" Identifier "IS" Subtype_indication ;

subtype_indication ::=
  [ Resolution_function_name ] Type_mark [ Constraint ]

suffix ::=
  Simple_name
  | Character_literal
  | Operator_symbol
  | "ALL"

target ::=
  Name
  | Aggregate

term ::=
  Factor { Multiplying_operator Factor }

timeout_clause ::= "FOR" Time_expression

type_conversion ::= Type_mark ( Expression )

type_declaration ::=
  Full_type_declaration
  | Incomplete_type_declaration

type_definition ::=
  Scalar_type_definition
  | Composite_type_definition
  | Access_type_definition
  | File_type_definition

type_mark ::=
  Type_name
  | Subtype_name

unconstrained_array_definition ::=
  "ARRAY" ( Index_subtype_definition { , Index_subtype_definition } )
    "OF" Element_subtype_indication

use_clause ::=
  "USE" Selected_name { , Selected_name } ;

variable_assignment_statement ::=
  [ Label : ] Target  := Expression ;

variable_declaration ::=
  [ "SHARED" ] "VARIABLE" Identifier_list : Subtype_indication [ := Expression ] ;

wait_statement ::=
  [ Label : ] "WAIT" [ Sensitivity_clause ] [ Condition_clause ] [ Timeout_clause ] ;

waveform ::=
  Waveform_element { , Waveform_element }
  | "UNAFFECTED"

waveform_element ::=
  Value_expression [ "AFTER" Time_expression ]
  | "NULL" [ "AFTER" Time_expression ]