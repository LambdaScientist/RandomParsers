-- This Happy file was machine-generated by the BNF converter
{
{-# OPTIONS_GHC -fno-warn-incomplete-patterns -fno-warn-overlapping-patterns #-}
module ParVhdl where
import AbsVhdl
import LexVhdl
import ErrM

}

%name pAbstract_literal Abstract_literal
-- no lexer declaration
%monad { Err } { thenM } { returnM }
%tokentype {Token}
%token
  ' ' { PT _ (TS _ 1) }
  '\"' { PT _ (TS _ 2) }
  '#' { PT _ (TS _ 3) }
  '$' { PT _ (TS _ 4) }
  '&' { PT _ (TS _ 5) }
  '\'' { PT _ (TS _ 6) }
  '(' { PT _ (TS _ 7) }
  ')' { PT _ (TS _ 8) }
  '*' { PT _ (TS _ 9) }
  '**' { PT _ (TS _ 10) }
  '+' { PT _ (TS _ 11) }
  ',' { PT _ (TS _ 12) }
  '-' { PT _ (TS _ 13) }
  '.' { PT _ (TS _ 14) }
  '/' { PT _ (TS _ 15) }
  '/=' { PT _ (TS _ 16) }
  '0' { PT _ (TS _ 17) }
  '1' { PT _ (TS _ 18) }
  '2' { PT _ (TS _ 19) }
  '3' { PT _ (TS _ 20) }
  '4' { PT _ (TS _ 21) }
  '5' { PT _ (TS _ 22) }
  '6' { PT _ (TS _ 23) }
  '7' { PT _ (TS _ 24) }
  '8' { PT _ (TS _ 25) }
  '9' { PT _ (TS _ 26) }
  ':' { PT _ (TS _ 27) }
  ':=' { PT _ (TS _ 28) }
  ';' { PT _ (TS _ 29) }
  '<' { PT _ (TS _ 30) }
  '<=' { PT _ (TS _ 31) }
  '<>' { PT _ (TS _ 32) }
  '=' { PT _ (TS _ 33) }
  '=>' { PT _ (TS _ 34) }
  '>' { PT _ (TS _ 35) }
  '>=' { PT _ (TS _ 36) }
  'A' { PT _ (TS _ 37) }
  'ABS' { PT _ (TS _ 38) }
  'ACCESS' { PT _ (TS _ 39) }
  'AFTER' { PT _ (TS _ 40) }
  'ALIAS' { PT _ (TS _ 41) }
  'ALL' { PT _ (TS _ 42) }
  'AND' { PT _ (TS _ 43) }
  'ARCHITECTURE' { PT _ (TS _ 44) }
  'ARRAY' { PT _ (TS _ 45) }
  'ASSERT' { PT _ (TS _ 46) }
  'ATTRIBUTE' { PT _ (TS _ 47) }
  'B' { PT _ (TS _ 48) }
  'BEGIN' { PT _ (TS _ 49) }
  'BLOCK' { PT _ (TS _ 50) }
  'BODY' { PT _ (TS _ 51) }
  'BUFFER' { PT _ (TS _ 52) }
  'BUS' { PT _ (TS _ 53) }
  'C' { PT _ (TS _ 54) }
  'CASE' { PT _ (TS _ 55) }
  'COMPONENT' { PT _ (TS _ 56) }
  'CONFIGURATION' { PT _ (TS _ 57) }
  'CONSTANT' { PT _ (TS _ 58) }
  'D' { PT _ (TS _ 59) }
  'DISCONNECT' { PT _ (TS _ 60) }
  'DOWNTO' { PT _ (TS _ 61) }
  'E' { PT _ (TS _ 62) }
  'ELSE' { PT _ (TS _ 63) }
  'ELSIF' { PT _ (TS _ 64) }
  'END' { PT _ (TS _ 65) }
  'ENTITY' { PT _ (TS _ 66) }
  'EXIT' { PT _ (TS _ 67) }
  'F' { PT _ (TS _ 68) }
  'FILE' { PT _ (TS _ 69) }
  'FOR' { PT _ (TS _ 70) }
  'FUNCTION' { PT _ (TS _ 71) }
  'Format_effector' { PT _ (TS _ 72) }
  'G' { PT _ (TS _ 73) }
  'GENERATE' { PT _ (TS _ 74) }
  'GENERIC' { PT _ (TS _ 75) }
  'GROUP' { PT _ (TS _ 76) }
  'GUARDED' { PT _ (TS _ 77) }
  'H' { PT _ (TS _ 78) }
  'I' { PT _ (TS _ 79) }
  'I DONT KOW WHAT GOES HERE' { PT _ (TS _ 80) }
  'IF' { PT _ (TS _ 81) }
  'IMPURE' { PT _ (TS _ 82) }
  'IN' { PT _ (TS _ 83) }
  'INERTIAL' { PT _ (TS _ 84) }
  'INOUT' { PT _ (TS _ 85) }
  'IS' { PT _ (TS _ 86) }
  'J' { PT _ (TS _ 87) }
  'K' { PT _ (TS _ 88) }
  'L' { PT _ (TS _ 89) }
  'LABEL' { PT _ (TS _ 90) }
  'LIBRARY' { PT _ (TS _ 91) }
  'LINKAGE' { PT _ (TS _ 92) }
  'LITERAL' { PT _ (TS _ 93) }
  'LOOP' { PT _ (TS _ 94) }
  'M' { PT _ (TS _ 95) }
  'MAP' { PT _ (TS _ 96) }
  'MOD' { PT _ (TS _ 97) }
  'N' { PT _ (TS _ 98) }
  'NAND' { PT _ (TS _ 99) }
  'NEW' { PT _ (TS _ 100) }
  'NEXT' { PT _ (TS _ 101) }
  'NOR' { PT _ (TS _ 102) }
  'NOT' { PT _ (TS _ 103) }
  'NULL' { PT _ (TS _ 104) }
  'O' { PT _ (TS _ 105) }
  'OF' { PT _ (TS _ 106) }
  'ON' { PT _ (TS _ 107) }
  'OPEN' { PT _ (TS _ 108) }
  'OR' { PT _ (TS _ 109) }
  'OTHERS' { PT _ (TS _ 110) }
  'OUT' { PT _ (TS _ 111) }
  'P' { PT _ (TS _ 112) }
  'PACKAGE' { PT _ (TS _ 113) }
  'PORT' { PT _ (TS _ 114) }
  'POSTPONED' { PT _ (TS _ 115) }
  'PROCEDURE' { PT _ (TS _ 116) }
  'PROCESS' { PT _ (TS _ 117) }
  'PURE' { PT _ (TS _ 118) }
  'Q' { PT _ (TS _ 119) }
  'R' { PT _ (TS _ 120) }
  'RECORD' { PT _ (TS _ 121) }
  'REGISTER' { PT _ (TS _ 122) }
  'REJECT' { PT _ (TS _ 123) }
  'REM' { PT _ (TS _ 124) }
  'REPORT' { PT _ (TS _ 125) }
  'RETURN' { PT _ (TS _ 126) }
  'ROL' { PT _ (TS _ 127) }
  'ROR' { PT _ (TS _ 128) }
  'S' { PT _ (TS _ 129) }
  'SELECT' { PT _ (TS _ 130) }
  'SEVERITY' { PT _ (TS _ 131) }
  'SHARED' { PT _ (TS _ 132) }
  'SIGNAL' { PT _ (TS _ 133) }
  'SLA' { PT _ (TS _ 134) }
  'SLL' { PT _ (TS _ 135) }
  'SRA' { PT _ (TS _ 136) }
  'SRL' { PT _ (TS _ 137) }
  'SUBTYPE' { PT _ (TS _ 138) }
  'T' { PT _ (TS _ 139) }
  'THEN' { PT _ (TS _ 140) }
  'TO' { PT _ (TS _ 141) }
  'TRANSPORT' { PT _ (TS _ 142) }
  'TYPE' { PT _ (TS _ 143) }
  'U' { PT _ (TS _ 144) }
  'UNAFFECTED' { PT _ (TS _ 145) }
  'UNITS' { PT _ (TS _ 146) }
  'UNTIL' { PT _ (TS _ 147) }
  'USE' { PT _ (TS _ 148) }
  'V' { PT _ (TS _ 149) }
  'VARIABLE' { PT _ (TS _ 150) }
  'W' { PT _ (TS _ 151) }
  'WAIT' { PT _ (TS _ 152) }
  'WHEN' { PT _ (TS _ 153) }
  'WHILE' { PT _ (TS _ 154) }
  'WITH' { PT _ (TS _ 155) }
  'Waveform' { PT _ (TS _ 156) }
  'X' { PT _ (TS _ 157) }
  'XNOR' { PT _ (TS _ 158) }
  'XOR' { PT _ (TS _ 159) }
  'Y' { PT _ (TS _ 160) }
  'Z' { PT _ (TS _ 161) }
  '_' { PT _ (TS _ 162) }
  'a' { PT _ (TS _ 163) }
  'b' { PT _ (TS _ 164) }
  'body' { PT _ (TS _ 165) }
  'c' { PT _ (TS _ 166) }
  'd' { PT _ (TS _ 167) }
  'e' { PT _ (TS _ 168) }
  'f' { PT _ (TS _ 169) }
  'g' { PT _ (TS _ 170) }
  'h' { PT _ (TS _ 171) }
  'i' { PT _ (TS _ 172) }
  'j' { PT _ (TS _ 173) }
  'k' { PT _ (TS _ 174) }
  'l' { PT _ (TS _ 175) }
  'm' { PT _ (TS _ 176) }
  'n' { PT _ (TS _ 177) }
  'o' { PT _ (TS _ 178) }
  'p' { PT _ (TS _ 179) }
  'q' { PT _ (TS _ 180) }
  'r' { PT _ (TS _ 181) }
  'return' { PT _ (TS _ 182) }
  's' { PT _ (TS _ 183) }
  'signal' { PT _ (TS _ 184) }
  't' { PT _ (TS _ 185) }
  'u' { PT _ (TS _ 186) }
  'v' { PT _ (TS _ 187) }
  'w' { PT _ (TS _ 188) }
  'x' { PT _ (TS _ 189) }
  'y' { PT _ (TS _ 190) }
  'z' { PT _ (TS _ 191) }

L_ident  { PT _ (TV $$) }
L_NumString { PT _ (T_NumString $$) }


%%

Ident   :: { Ident }   : L_ident  { Ident $1 }
NumString    :: { NumString} : L_NumString { NumString ($1)}

IS :: { IS }
IS : 'IS' { AbsVhdl.IS }
BUSText :: { BUSText }
BUSText : 'BUS' { AbsVhdl.BUSText }
GUARDEDtext :: { GUARDEDtext }
GUARDEDtext : 'GUARDED' { AbsVhdl.GUARDEDtext }
ConstantText :: { ConstantText }
ConstantText : 'CONSTANT' { AbsVhdl.ConstantText }
InText :: { InText }
InText : 'IN' { AbsVhdl.InText }
SIGNALText :: { SIGNALText }
SIGNALText : 'SIGNAL' { AbsVhdl.SIGNALText }
VARIABLEText :: { VARIABLEText }
VARIABLEText : 'VARIABLE' { AbsVhdl.VARIABLEText }
PackageBodytext :: { PackageBodytext }
PackageBodytext : 'PACKAGE' 'BODY' { AbsVhdl.PackageBodytext }
Abstract_literal :: { Abstract_literal }
Abstract_literal : Decimal_literal { AbsVhdl.Abstract_literalDecimal_literal $1 }
                 | Based_literal { AbsVhdl.Abstract_literalBased_literal $1 }
Access_type_definition :: { Access_type_definition }
Access_type_definition : 'ACCESS' Subtype_indication { AbsVhdl.Access_type_definition $2 }
Variable_name :: { Variable_name }
Variable_name : Name { AbsVhdl.Variable_name $1 }
Actual_designator :: { Actual_designator }
Actual_designator : Expression { AbsVhdl.Actual_designatorExpression $1 }
                  | Signal_name { AbsVhdl.Actual_designatorSignal_name $1 }
                  | Variable_name { AbsVhdl.Actual_designatorVariable_name $1 }
                  | File_name { AbsVhdl.Actual_designatorFile_name $1 }
                  | 'OPEN' { AbsVhdl.Actual_designator_OPEN }
File_name :: { File_name }
File_name : Name { AbsVhdl.File_name $1 }
Actual_parameter_part :: { Actual_parameter_part }
Actual_parameter_part : Parameter_association_list { AbsVhdl.Actual_parameter_part $1 }
Parameter_association_list :: { Parameter_association_list }
Parameter_association_list : Association_list { AbsVhdl.Parameter_association_list $1 }
Actual_part :: { Actual_part }
Actual_part : Actual_designator { AbsVhdl.Actual_partActual_designator $1 }
            | Function_name '(' Actual_designator ')' { AbsVhdl.Actual_part1 $1 $3 }
            | Type_mark '(' Actual_designator ')' { AbsVhdl.Actual_part2 $1 $3 }
Adding_operator :: { Adding_operator }
Adding_operator : '+' { AbsVhdl.Adding_operator1 }
                | '-' { AbsVhdl.Adding_operator2 }
                | '&' { AbsVhdl.Adding_operator3 }
ListElement_association :: { [Element_association] }
ListElement_association : {- empty -} { [] }
                        | Element_association { (:[]) $1 }
                        | Element_association ',' ListElement_association { (:) $1 $3 }
Aggregate :: { Aggregate }
Aggregate : '(' ListElement_association ')' { AbsVhdl.Aggregate $2 }
Alias_declaration :: { Alias_declaration }
Alias_declaration : 'ALIAS' Alias_designator ListSubtype_indication 'IS' Name ListSignature ';' { AbsVhdl.Alias_declaration $2 $3 $5 (reverse $6) }
Alias_designator :: { Alias_designator }
Alias_designator : Identifier { AbsVhdl.Alias_designatorIdentifier $1 }
                 | Character_literal { AbsVhdl.Alias_designatorCharacter_literal $1 }
                 | Operator_symbol { AbsVhdl.Alias_designatorOperator_symbol $1 }
Allocator :: { Allocator }
Allocator : 'NEW' Subtype_indication { AbsVhdl.Allocator1 $2 }
          | 'NEW' Qualified_expression { AbsVhdl.Allocator2 $2 }
Qualified_expression :: { Qualified_expression }
Qualified_expression : Expression { AbsVhdl.Qualified_expression $1 }
                     | Expression { AbsVhdl.Qualified_expression $1 }
                     | Type_mark '\'' '(' Expression ')' { AbsVhdl.Qualified_expression1 $1 $4 }
                     | Type_mark '\'' Aggregate { AbsVhdl.Qualified_expression2 $1 $3 }
Architecture_body :: { Architecture_body }
Architecture_body : 'ARCHITECTURE' Identifier 'OF' Entity_name 'IS' Architecture_declarative_part 'BEGIN' Architecture_statement_part 'END' MaybeArch MaybeArchitecture_simple_name ';' { AbsVhdl.Architecture_body $2 $4 $6 $8 $10 $11 }
MaybeArch :: { MaybeArch }
MaybeArch : 'ARCHITECTURE' { AbsVhdl.MaybeArch_ARCHITECTURE }
          | {- empty -} { AbsVhdl.MaybeArch1 }
MaybeArchitecture_simple_name :: { MaybeArchitecture_simple_name }
MaybeArchitecture_simple_name : Architecture_simple_name { AbsVhdl.MaybeArchitecture_simple_nameArchitecture_simple_name $1 }
                              | {- empty -} { AbsVhdl.MaybeArchitecture_simple_name1 }
Architecture_simple_name :: { Architecture_simple_name }
Architecture_simple_name : Simple_name { AbsVhdl.Architecture_simple_name $1 }
Array_type_definition :: { Array_type_definition }
Array_type_definition : Unconstrained_array_definition { AbsVhdl.Array_type_definitionUnconstrained_array_definition $1 }
                      | Constrained_array_definition { AbsVhdl.Array_type_definitionConstrained_array_definition $1 }
Assertion :: { Assertion }
Assertion : 'ASSERT' Condition ListMaybeREPORT ListMaybeSEVERITY { AbsVhdl.Assertion $2 (reverse $3) (reverse $4) }
Assertion_statement :: { Assertion_statement }
Assertion_statement : ListLabel Assertion { AbsVhdl.Assertion_statement $1 $2 }
Association_element :: { Association_element }
Association_element : ListFormal_part Actual_part { AbsVhdl.Association_element $1 $2 }
Association_list :: { Association_list }
Association_list : ListAssociation_element { AbsVhdl.Association_list (reverse $1) }
Generic_clause_Map :: { Generic_clause_Map }
Generic_clause_Map : Generic_clause ListGeneric_map_aspectSemi { AbsVhdl.Generic_clause_Map $1 (reverse $2) }
Port_clause_map :: { Port_clause_map }
Port_clause_map : Port_clause ListPort_map_aspectSemi { AbsVhdl.Port_clause_map $1 (reverse $2) }
Port_map_aspectSemi :: { Port_map_aspectSemi }
Port_map_aspectSemi : Port_map_aspectSemi ';' { AbsVhdl.Port_map_aspectSemi $1 }
Index_specificationPar :: { Index_specificationPar }
Index_specificationPar : '(' Index_specification ')' { AbsVhdl.Index_specificationPar $2 }
Guard_expressionPar :: { Guard_expressionPar }
Guard_expressionPar : '(' Guard_expressionPar ')' { AbsVhdl.Guard_expressionPar $2 }
Case_labelColon :: { Case_labelColon }
Case_labelColon : Case_label ':' { AbsVhdl.Case_labelColon $1 }
Case_label :: { Case_label }
Case_label : Label { AbsVhdl.Case_label $1 }
           | Label { AbsVhdl.Case_label $1 }
WaveformElse :: { WaveformElse }
WaveformElse : Waveform 'WHEN' Condition 'ELSE' { AbsVhdl.WaveformElse $1 $3 }
             | 'Waveform' ListWhenCondition { AbsVhdl.WaveformNoElse (reverse $2) }
WhenCondition :: { WhenCondition }
WhenCondition : 'WHEN' Condition { AbsVhdl.WhenCondition $2 }
DotInt :: { DotInt }
DotInt : '.' VInteger { AbsVhdl.DotInt $2 }
Static_expressionAssign :: { Static_expressionAssign }
Static_expressionAssign : ':=' Static_expression { AbsVhdl.Static_expressionAssign $2 }
LoopLabelColon :: { LoopLabelColon }
LoopLabelColon : Loop_label ':' { AbsVhdl.LoopLabelColon $1 }
Loop_label :: { Loop_label }
Loop_label : Label { AbsVhdl.Loop_label $1 }
           | Label { AbsVhdl.Loop_label $1 }
Attribute_declaration :: { Attribute_declaration }
Attribute_declaration : 'ATTRIBUTE' Identifier ':' Type_mark ';' { AbsVhdl.Attribute_declaration $2 $4 }
Attribute_designator :: { Attribute_designator }
Attribute_designator : Attribute_simple_name { AbsVhdl.Attribute_designator $1 }
Attribute_simple_name :: { Attribute_simple_name }
Attribute_simple_name : Simple_name { AbsVhdl.Attribute_simple_name $1 }
Attribute_name :: { Attribute_name }
Attribute_name : Prefix ListSignature '\'' Attribute_designator ListExpressPar { AbsVhdl.Attribute_name $1 (reverse $2) $4 (reverse $5) }
ExpressPar :: { ExpressPar }
ExpressPar : '(' Expression ')' { AbsVhdl.ExpressPar $2 }
Attribute_specification :: { Attribute_specification }
Attribute_specification : 'ATTRIBUTE' Attribute_designator 'OF' Entity_specification 'IS' Expression ';' { AbsVhdl.Attribute_specification $2 $4 $6 }
Base :: { Base }
Base : VInteger { AbsVhdl.Base $1 }
Base_unit_declaration :: { Base_unit_declaration }
Base_unit_declaration : Identifier ';' { AbsVhdl.Base_unit_declaration $1 }
Based_integer :: { Based_integer }
Based_integer : ListExtended_digit { AbsVhdl.Based_integer $1 }
Digit :: { Digit }
Digit : '0' { AbsVhdl.Digit_0 }
      | '1' { AbsVhdl.Digit_1 }
      | '2' { AbsVhdl.Digit_2 }
      | '3' { AbsVhdl.Digit_3 }
      | '4' { AbsVhdl.Digit_4 }
      | '5' { AbsVhdl.Digit_5 }
      | '6' { AbsVhdl.Digit_6 }
      | '7' { AbsVhdl.Digit_7 }
      | '8' { AbsVhdl.Digit_8 }
      | '9' { AbsVhdl.Digit_9 }
Based_literal :: { Based_literal }
Based_literal : Base '#' ListBased_integer '#' ListExponent { AbsVhdl.Based_literal $1 (reverse $3) (reverse $5) }
Basic_identifier :: { Basic_identifier }
Basic_identifier : Ident { AbsVhdl.Basic_identifier $1 }
Binding_indication :: { Binding_indication }
Binding_indication : ListUseEntity ListGeneric_map_aspect ListPort_map_aspect { AbsVhdl.Binding_indication $1 (reverse $2) (reverse $3) }
ListUseEntity :: { [UseEntity] }
ListUseEntity : {- empty -} { [] }
              | UseEntity ListUseEntity { (:) $1 $2 }
              | {- empty -} { [] }
              | UseEntity ListUseEntity { (:) $1 $2 }
              | {- empty -} { [] }
              | UseEntity ListUseEntity { (:) $1 $2 }
Bit_string_literal :: { Bit_string_literal }
Bit_string_literal : Base_specifier '\"' Bit_value '\"' { AbsVhdl.Bit_string_literal $1 $3 }
Bit_value :: { Bit_value }
Bit_value : ListExtended_digit { AbsVhdl.Bit_value $1 }
Block_configuration :: { Block_configuration }
Block_configuration : 'FOR' Block_specification ListUseEntity ListConfiguration_item 'END' 'FOR' ';' { AbsVhdl.Block_configuration $2 $3 (reverse $4) }
Block_declarative_item :: { Block_declarative_item }
Block_declarative_item : Subprogram_declaration { AbsVhdl.Block_declarative_itemSubprogram_declaration $1 }
                       | Subprogram_body { AbsVhdl.Block_declarative_itemSubprogram_body $1 }
                       | Type_declaration { AbsVhdl.Block_declarative_itemType_declaration $1 }
                       | Subtype_declaration { AbsVhdl.Block_declarative_itemSubtype_declaration $1 }
                       | Constant_declaration { AbsVhdl.Block_declarative_itemConstant_declaration $1 }
                       | Signal_declaration { AbsVhdl.Block_declarative_itemSignal_declaration $1 }
                       | Shared_variable_declaration { AbsVhdl.Block_declarative_itemShared_variable_declaration $1 }
                       | File_declaration { AbsVhdl.Block_declarative_itemFile_declaration $1 }
                       | Alias_declaration { AbsVhdl.Block_declarative_itemAlias_declaration $1 }
                       | Component_declaration { AbsVhdl.Block_declarative_itemComponent_declaration $1 }
                       | Attribute_declaration { AbsVhdl.Block_declarative_itemAttribute_declaration $1 }
                       | Attribute_specification { AbsVhdl.Block_declarative_itemAttribute_specification $1 }
                       | Configuration_specification { AbsVhdl.Block_declarative_itemConfiguration_specification $1 }
                       | Disconnection_specification { AbsVhdl.Block_declarative_itemDisconnection_specification $1 }
                       | Use_clause { AbsVhdl.Block_declarative_itemUse_clause $1 }
                       | Group_template_declaration { AbsVhdl.Block_declarative_itemGroup_template_declaration $1 }
                       | Group_declaration { AbsVhdl.Block_declarative_itemGroup_declaration $1 }
Shared_variable_declaration :: { Shared_variable_declaration }
Shared_variable_declaration : Variable_declaration { AbsVhdl.Shared_variable_declaration $1 }
Block_declarative_part :: { Block_declarative_part }
Block_declarative_part : ListBlock_declarative_item { AbsVhdl.Block_declarative_part (reverse $1) }
Block_header :: { Block_header }
Block_header : ListGeneric_clause_Map ListPort_clause_map { AbsVhdl.Block_header $1 (reverse $2) }
Architecture_name :: { Architecture_name }
Architecture_name : Name { AbsVhdl.Architecture_name $1 }
Generate_statement_label :: { Generate_statement_label }
Generate_statement_label : Name { AbsVhdl.Generate_statement_label $1 }
Block_specification :: { Block_specification }
Block_specification : Architecture_name { AbsVhdl.Block_specificationArchitecture_name $1 }
                    | Block_statement_label { AbsVhdl.Block_specificationBlock_statement_label $1 }
                    | Generate_statement_label Index_specificationPar { AbsVhdl.Block_specification1 $1 $2 }
Block_statement_label :: { Block_statement_label }
Block_statement_label : Label { AbsVhdl.Block_statement_label $1 }
Block_statement :: { Block_statement }
Block_statement : Block_label ':' 'BLOCK' ListGuard_expressionPar ListIS Block_header Block_declarative_part 'BEGIN' Block_statement_part 'END' 'BLOCK' ListBlock_label ';' { AbsVhdl.Block_statement $1 (reverse $4) (reverse $5) $6 $7 $9 (reverse $12) }
Block_label :: { Block_label }
Block_label : Label { AbsVhdl.Block_label $1 }
Block_statement_part :: { Block_statement_part }
Block_statement_part : ListConcurrent_statement { AbsVhdl.Block_statement_part $1 }
Case_statement :: { Case_statement }
Case_statement : ListCase_labelColon 'CASE' Expression 'IS' ListCase_statement_alternative 'END' 'CASE' ListCase_label ';' { AbsVhdl.Case_statement (reverse $1) $3 (reverse $5) (reverse $8) }
Choice :: { Choice }
Choice : Simple_expression { AbsVhdl.ChoiceSimple_expression $1 }
       | Discrete_range { AbsVhdl.ChoiceDiscrete_range $1 }
       | Element_simple_name { AbsVhdl.ChoiceElement_simple_name $1 }
       | 'OTHERS' { AbsVhdl.Choice_OTHERS }
Element_simple_name :: { Element_simple_name }
Element_simple_name : Simple_name { AbsVhdl.Element_simple_name $1 }
Choices :: { Choices }
Choices : ListChoice { AbsVhdl.Choices $1 }
Case_statement_alternative :: { Case_statement_alternative }
Case_statement_alternative : 'WHEN' Choices '=>' Sequence_of_statements { AbsVhdl.Case_statement_alternative $2 $4 }
Character_literal :: { Character_literal }
Character_literal : '\'' Graphic_character '\'' { AbsVhdl.Character_literal $2 }
Component_configuration :: { Component_configuration }
Component_configuration : 'FOR' Component_specification ListBinding_indication ListBlock_configuration 'END' 'FOR' ';' { AbsVhdl.Component_configuration $2 (reverse $3) (reverse $4) }
Component_declaration :: { Component_declaration }
Component_declaration : 'COMPONENT' Identifier ListIS ListLocal_generic_clause ListLocal_port_clause 'END' 'COMPONENT' ListComponent_simple_name ';' { AbsVhdl.Component_declaration $2 (reverse $3) (reverse $4) (reverse $5) (reverse $8) }
Component_simple_name :: { Component_simple_name }
Component_simple_name : Simple_name { AbsVhdl.Component_simple_name $1 }
Local_port_clause :: { Local_port_clause }
Local_port_clause : Port_clause { AbsVhdl.Local_port_clause $1 }
Component_instantiation_statement :: { Component_instantiation_statement }
Component_instantiation_statement : Instantiation_label ':' Instantiated_unit ListGeneric_map_aspect ListPort_map_aspect ';' { AbsVhdl.Component_instantiation_statement $1 $3 (reverse $4) (reverse $5) }
Instantiation_label :: { Instantiation_label }
Instantiation_label : Label { AbsVhdl.Instantiation_label $1 }
                    | Label { AbsVhdl.Instantiation_label $1 }
Component_specification :: { Component_specification }
Component_specification : Instantiation_list ':' Component_name { AbsVhdl.Component_specification $1 $3 }
Component_name :: { Component_name }
Component_name : Name { AbsVhdl.Component_name $1 }
Composite_type_definition :: { Composite_type_definition }
Composite_type_definition : Array_type_definition { AbsVhdl.Composite_type_definitionArray_type_definition $1 }
                          | Record_type_definition { AbsVhdl.Composite_type_definitionRecord_type_definition $1 }
Concurrent_assertion_statement :: { Concurrent_assertion_statement }
Concurrent_assertion_statement : ListLabel ListMaybePOSTPONED Assertion ';' { AbsVhdl.Concurrent_assertion_statement $1 (reverse $2) $3 }
MaybePOSTPONED :: { MaybePOSTPONED }
MaybePOSTPONED : 'POSTPONED' { AbsVhdl.MaybePOSTPONED }
Concurrent_procedure_call_statement :: { Concurrent_procedure_call_statement }
Concurrent_procedure_call_statement : ListLabel ListMaybePOSTPONED Procedure_call ';' { AbsVhdl.Concurrent_procedure_call_statement $1 (reverse $2) $3 }
Concurrent_signal_assignment_statement :: { Concurrent_signal_assignment_statement }
Concurrent_signal_assignment_statement : ListLabel ListMaybePOSTPONED Conditional_signal_assignment { AbsVhdl.Concurrent_signal_assignment_statement1 $1 (reverse $2) $3 }
                                       | ListLabel ListMaybePOSTPONED Selected_signal_assignment { AbsVhdl.Concurrent_signal_assignment_statement2 $1 (reverse $2) $3 }
Concurrent_statement :: { Concurrent_statement }
Concurrent_statement : Block_statement { AbsVhdl.Concurrent_statementBlock_statement $1 }
                     | Process_statement { AbsVhdl.Concurrent_statementProcess_statement $1 }
                     | Concurrent_procedure_call_statement { AbsVhdl.Concurrent_statementConcurrent_procedure_call_statement $1 }
                     | Concurrent_assertion_statement { AbsVhdl.Concurrent_statementConcurrent_assertion_statement $1 }
                     | Concurrent_signal_assignment_statement { AbsVhdl.Concurrent_statementConcurrent_signal_assignment_statement $1 }
                     | Component_instantiation_statement { AbsVhdl.Concurrent_statementComponent_instantiation_statement $1 }
                     | Generate_statement { AbsVhdl.Concurrent_statementGenerate_statement $1 }
Condition :: { Condition }
Condition : Boolean_expression { AbsVhdl.Condition $1 }
Boolean_expression :: { Boolean_expression }
Boolean_expression : Expression { AbsVhdl.Boolean_expression $1 }
Condition_clause :: { Condition_clause }
Condition_clause : 'UNTIL' Condition { AbsVhdl.Condition_clause $2 }
Conditional_signal_assignment :: { Conditional_signal_assignment }
Conditional_signal_assignment : Target '<=' Options Conditional_waveforms ';' { AbsVhdl.Conditional_signal_assignment $1 $3 $4 }
Conditional_waveforms :: { Conditional_waveforms }
Conditional_waveforms : ListWaveformElse { AbsVhdl.Conditional_waveforms $1 }
MaybeCONFIGURATION :: { MaybeCONFIGURATION }
MaybeCONFIGURATION : 'CONFIGURATION' { AbsVhdl.MaybeCONFIGURATION }
Configuration_declaration :: { Configuration_declaration }
Configuration_declaration : 'CONFIGURATION' Identifier 'OF' Entity_name 'IS' Configuration_declarative_part Block_configuration 'END' ListMaybeCONFIGURATION ListConfiguration_simple_name ';' { AbsVhdl.Configuration_declaration $2 $4 $6 $7 (reverse $9) (reverse $10) }
Configuration_simple_name :: { Configuration_simple_name }
Configuration_simple_name : Simple_name { AbsVhdl.Configuration_simple_name $1 }
Configuration_declarative_item :: { Configuration_declarative_item }
Configuration_declarative_item : Use_clause { AbsVhdl.Configuration_declarative_itemUse_clause $1 }
                               | Attribute_specification { AbsVhdl.Configuration_declarative_itemAttribute_specification $1 }
                               | Group_declaration { AbsVhdl.Configuration_declarative_itemGroup_declaration $1 }
Configuration_declarative_part :: { Configuration_declarative_part }
Configuration_declarative_part : ListConfiguration_declarative_item { AbsVhdl.Configuration_declarative_part (reverse $1) }
Configuration_item :: { Configuration_item }
Configuration_item : Block_configuration { AbsVhdl.Configuration_itemBlock_configuration $1 }
                   | Component_configuration { AbsVhdl.Configuration_itemComponent_configuration $1 }
Configuration_specification :: { Configuration_specification }
Configuration_specification : 'FOR' Component_specification Binding_indication ';' { AbsVhdl.Configuration_specification $2 $3 }
Constant_declaration :: { Constant_declaration }
Constant_declaration : 'CONSTANT' Identifier_list ':' Subtype_indication ListVarAssign ';' { AbsVhdl.Constant_declaration $2 $4 (reverse $5) }
VarAssign :: { VarAssign }
VarAssign : ':=' Expression { AbsVhdl.VarAssign $2 }
Constrained_array_definition :: { Constrained_array_definition }
Constrained_array_definition : 'ARRAY' Index_constraint 'OF' Element_subtype_indication { AbsVhdl.Constrained_array_definition $2 $4 }
Constraint :: { Constraint }
Constraint : Range_constraint { AbsVhdl.ConstraintRange_constraint $1 }
           | Index_constraint { AbsVhdl.ConstraintIndex_constraint $1 }
Context_clause :: { Context_clause }
Context_clause : ListContext_item { AbsVhdl.Context_clause (reverse $1) }
Context_item :: { Context_item }
Context_item : Library_clause { AbsVhdl.Context_itemLibrary_clause $1 }
             | Use_clause { AbsVhdl.Context_itemUse_clause $1 }
Decimal_literal :: { Decimal_literal }
Decimal_literal : VInteger ListDotInt ListExponent { AbsVhdl.Decimal_literal $1 (reverse $2) (reverse $3) }
Declaration :: { Declaration }
Declaration : Type_declaration { AbsVhdl.DeclarationType_declaration $1 }
            | Subtype_declaration { AbsVhdl.DeclarationSubtype_declaration $1 }
            | Object_declaration { AbsVhdl.DeclarationObject_declaration $1 }
            | Interface_declaration { AbsVhdl.DeclarationInterface_declaration $1 }
            | Alias_declaration { AbsVhdl.DeclarationAlias_declaration $1 }
            | Attribute_declaration { AbsVhdl.DeclarationAttribute_declaration $1 }
            | Component_declaration { AbsVhdl.DeclarationComponent_declaration $1 }
            | Group_template_declaration { AbsVhdl.DeclarationGroup_template_declaration $1 }
            | Group_declaration { AbsVhdl.DeclarationGroup_declaration $1 }
            | Entity_declaration { AbsVhdl.DeclarationEntity_declaration $1 }
            | Configuration_declaration { AbsVhdl.DeclarationConfiguration_declaration $1 }
            | Subprogram_declaration { AbsVhdl.DeclarationSubprogram_declaration $1 }
            | Package_declaration { AbsVhdl.DeclarationPackage_declaration $1 }
Delay_mechanism :: { Delay_mechanism }
Delay_mechanism : 'TRANSPORT' { AbsVhdl.Delay_mechanism_TRANSPORT }
                | ListMaybeRejectTime 'INERTIAL' { AbsVhdl.Delay_mechanism1 (reverse $1) }
MaybeRejectTime :: { MaybeRejectTime }
MaybeRejectTime : 'REJECT' Time_expression { AbsVhdl.MaybeRejectTime $2 }
ListMaybeRejectTime :: { [MaybeRejectTime] }
ListMaybeRejectTime : {- empty -} { [] }
                    | ListMaybeRejectTime MaybeRejectTime { flip (:) $1 $2 }
Design_file :: { Design_file }
Design_file : ListDesign_unit { AbsVhdl.Design_file $1 }
ListDesign_unit :: { [Design_unit] }
ListDesign_unit : Design_unit { (:[]) $1 }
                | Design_unit ListDesign_unit { (:) $1 $2 }
Design_unit :: { Design_unit }
Design_unit : Context_clause Library_unit { AbsVhdl.Design_unit $1 $2 }
Designator :: { Designator }
Designator : Identifier { AbsVhdl.DesignatorIdentifier $1 }
           | Operator_symbol { AbsVhdl.DesignatorOperator_symbol $1 }
Direction :: { Direction }
Direction : 'TO' { AbsVhdl.Direction_TO }
          | 'DOWNTO' { AbsVhdl.Direction_DOWNTO }
Disconnection_specification :: { Disconnection_specification }
Disconnection_specification : 'DISCONNECT' Guarded_signal_specification 'AFTER' Time_expression ';' { AbsVhdl.Disconnection_specification $2 $4 }
Discrete_range :: { Discrete_range }
Discrete_range : Discrete_subtype_indication { AbsVhdl.Discrete_rangeDiscrete_subtype_indication $1 }
               | Range { AbsVhdl.Discrete_rangeRange $1 }
Discrete_subtype_indication :: { Discrete_subtype_indication }
Discrete_subtype_indication : Subprogram_declarative_item { AbsVhdl.Discrete_subtype_indication $1 }
Element_declaration :: { Element_declaration }
Element_declaration : Identifier_list ':' Element_subtype_definition ';' { AbsVhdl.Element_declaration $1 $3 }
ChoiceAssign :: { ChoiceAssign }
ChoiceAssign : Choices '=>' { AbsVhdl.ChoiceAssign $1 }
Element_association :: { Element_association }
Element_association : ListChoiceAssign Expression { AbsVhdl.Element_association (reverse $1) $2 }
Element_subtype_definition :: { Element_subtype_definition }
Element_subtype_definition : Subtype_indication { AbsVhdl.Element_subtype_definition $1 }
Entity_aspect :: { Entity_aspect }
Entity_aspect : 'ENTITY' Entity_name ListParArchitecture_identifier { AbsVhdl.Entity_aspect1 $2 $3 }
              | 'CONFIGURATION' Configuration_name { AbsVhdl.Entity_aspect2 $2 }
              | 'OPEN' { AbsVhdl.Entity_aspect_OPEN }
Configuration_name :: { Configuration_name }
Configuration_name : Name { AbsVhdl.Configuration_name $1 }
ParArchitecture_identifier :: { ParArchitecture_identifier }
ParArchitecture_identifier : '(' Architecture_identifier ')' { AbsVhdl.ParArchitecture_identifier $2 }
ListParArchitecture_identifier :: { [ParArchitecture_identifier] }
ListParArchitecture_identifier : ParArchitecture_identifier { (:[]) $1 }
                               | ParArchitecture_identifier ListParArchitecture_identifier { (:) $1 $2 }
UseEntity :: { UseEntity }
UseEntity : 'USE' Entity_aspect { AbsVhdl.UseEntity $2 }
Entity_class :: { Entity_class }
Entity_class : 'ENTITY' { AbsVhdl.Entity_class_ENTITY }
             | 'ARCHITECTURE' { AbsVhdl.Entity_class_ARCHITECTURE }
             | 'CONFIGURATION' { AbsVhdl.Entity_class_CONFIGURATION }
             | 'PROCEDURE' { AbsVhdl.Entity_class_PROCEDURE }
             | 'FUNCTION' { AbsVhdl.Entity_class_FUNCTION }
             | 'PACKAGE' { AbsVhdl.Entity_class_PACKAGE }
             | 'TYPE' { AbsVhdl.Entity_class_TYPE }
             | 'SUBTYPE' { AbsVhdl.Entity_class_SUBTYPE }
             | 'CONSTANT' { AbsVhdl.Entity_class_CONSTANT }
             | 'SIGNAL' { AbsVhdl.Entity_class_SIGNAL }
             | 'VARIABLE' { AbsVhdl.Entity_class_VARIABLE }
             | 'COMPONENT' { AbsVhdl.Entity_class_COMPONENT }
             | 'LABEL' { AbsVhdl.Entity_class_LABEL }
             | 'LITERAL' { AbsVhdl.Entity_class_LITERAL }
             | 'UNITS' { AbsVhdl.Entity_class_UNITS }
             | 'GROUP' { AbsVhdl.Entity_class_GROUP }
             | 'FILE' { AbsVhdl.Entity_class_FILE }
ECArrows :: { ECArrows }
ECArrows : '<>' { AbsVhdl.ECArrows }
Entity_class_entry :: { Entity_class_entry }
Entity_class_entry : Entity_class ListECArrows { AbsVhdl.Entity_class_entry $1 (reverse $2) }
Entity_class_entry_list :: { Entity_class_entry_list }
Entity_class_entry_list : ListEntity_class_entry { AbsVhdl.Entity_class_entry_list $1 }
Entity_declaration :: { Entity_declaration }
Entity_declaration : 'ENTITY' Identifier 'IS' Entity_header Entity_declarative_part ListBEGINEntity_statement_part 'END' ListENTITYText ListEntity_simple_name ';' { AbsVhdl.Entity_declaration $2 $4 $5 (reverse $6) (reverse $8) (reverse $9) }
BEGINEntity_statement_part :: { BEGINEntity_statement_part }
BEGINEntity_statement_part : 'BEGIN' Entity_statement_part { AbsVhdl.BEGINEntity_statement_part $2 }
ENTITYText :: { ENTITYText }
ENTITYText : 'ENTITY' Entity_statement_part { AbsVhdl.ENTITYText $2 }
Entity_simple_name :: { Entity_simple_name }
Entity_simple_name : Simple_name { AbsVhdl.Entity_simple_name $1 }
Entity_declarative_item :: { Entity_declarative_item }
Entity_declarative_item : Subprogram_declaration { AbsVhdl.Entity_declarative_itemSubprogram_declaration $1 }
                        | Subprogram_body { AbsVhdl.Entity_declarative_itemSubprogram_body $1 }
                        | Type_declaration { AbsVhdl.Entity_declarative_itemType_declaration $1 }
                        | Subtype_declaration { AbsVhdl.Entity_declarative_itemSubtype_declaration $1 }
                        | Constant_declaration { AbsVhdl.Entity_declarative_itemConstant_declaration $1 }
                        | Signal_declaration { AbsVhdl.Entity_declarative_itemSignal_declaration $1 }
                        | Shared_variable_declaration { AbsVhdl.Entity_declarative_itemShared_variable_declaration $1 }
                        | File_declaration { AbsVhdl.Entity_declarative_itemFile_declaration $1 }
                        | Alias_declaration { AbsVhdl.Entity_declarative_itemAlias_declaration $1 }
                        | Attribute_declaration { AbsVhdl.Entity_declarative_itemAttribute_declaration $1 }
                        | Attribute_specification { AbsVhdl.Entity_declarative_itemAttribute_specification $1 }
                        | Disconnection_specification { AbsVhdl.Entity_declarative_itemDisconnection_specification $1 }
                        | Use_clause { AbsVhdl.Entity_declarative_itemUse_clause $1 }
                        | Group_template_declaration { AbsVhdl.Entity_declarative_itemGroup_template_declaration $1 }
                        | Group_declaration { AbsVhdl.Entity_declarative_itemGroup_declaration $1 }
Entity_declarative_part :: { Entity_declarative_part }
Entity_declarative_part : ListEntity_declarative_item { AbsVhdl.Entity_declarative_part (reverse $1) }
Entity_designator :: { Entity_designator }
Entity_designator : Entity_tag ListSignature { AbsVhdl.Entity_designator $1 (reverse $2) }
Entity_header :: { Entity_header }
Entity_header : ListFormal_generic_clause ListFormal_port_clause { AbsVhdl.Entity_header (reverse $1) (reverse $2) }
Formal_generic_clause :: { Formal_generic_clause }
Formal_generic_clause : Generic_clause { AbsVhdl.Formal_generic_clause $1 }
Formal_port_clause :: { Formal_port_clause }
Formal_port_clause : Port_clause { AbsVhdl.Formal_port_clause $1 }
Entity_name_list :: { Entity_name_list }
Entity_name_list : ListEntity_designator { AbsVhdl.Entity_name_list1 $1 }
                 | 'OTHERS' { AbsVhdl.Entity_name_list_OTHERS }
                 | 'ALL' { AbsVhdl.Entity_name_list_ALL }
Entity_specification :: { Entity_specification }
Entity_specification : Entity_name_list ':' Entity_class { AbsVhdl.Entity_specification $1 $3 }
Entity_statement :: { Entity_statement }
Entity_statement : Concurrent_assertion_statement { AbsVhdl.Entity_statementConcurrent_assertion_statement $1 }
                 | Passive_concurrent_procedure_call_statement { AbsVhdl.Entity_statementPassive_concurrent_procedure_call_statement $1 }
                 | Passive_process_statement { AbsVhdl.Entity_statementPassive_process_statement $1 }
Passive_process_statement :: { Passive_process_statement }
Passive_process_statement : Process_statement { AbsVhdl.Passive_process_statement $1 }
Passive_concurrent_procedure_call_statement :: { Passive_concurrent_procedure_call_statement }
Passive_concurrent_procedure_call_statement : Concurrent_procedure_call_statement { AbsVhdl.Passive_concurrent_procedure_call_statement $1 }
Entity_statement_part :: { Entity_statement_part }
Entity_statement_part : ListEntity_statement { AbsVhdl.Entity_statement_part (reverse $1) }
Entity_tag :: { Entity_tag }
Entity_tag : Simple_name { AbsVhdl.Entity_tagSimple_name $1 }
           | Character_literal { AbsVhdl.Entity_tagCharacter_literal $1 }
           | Operator_symbol { AbsVhdl.Entity_tagOperator_symbol $1 }
Enumeration_literal :: { Enumeration_literal }
Enumeration_literal : Identifier { AbsVhdl.Enumeration_literalIdentifier $1 }
                    | Character_literal { AbsVhdl.Enumeration_literalCharacter_literal $1 }
Enumeration_type_definition :: { Enumeration_type_definition }
Enumeration_type_definition : '(' ListEnumeration_literal ')' { AbsVhdl.Enumeration_type_definition $2 }
Exit_statement :: { Exit_statement }
Exit_statement : ListLabel 'EXIT' ListLoop_label ListWhenCondition ';' { AbsVhdl.Exit_statement $1 $3 (reverse $4) }
Exponent :: { Exponent }
Exponent : 'E' PlusOp VInteger { AbsVhdl.Exponent1 $2 $3 }
         | 'E' '-' VInteger { AbsVhdl.Exponent2 $3 }
PlusOp :: { PlusOp }
PlusOp : '+' { AbsVhdl.PlusOp }
Expression :: { Expression }
Expression : Relation ExpOps Relation { AbsVhdl.Expression1 $1 $2 $3 }
           | Relation { AbsVhdl.ExpressionRelation $1 }
ExpOps :: { ExpOps }
ExpOps : 'AND' { AbsVhdl.ExpOps_AND }
       | 'OR' { AbsVhdl.ExpOps_OR }
       | 'XOR' { AbsVhdl.ExpOps_XOR }
       | 'NAND' { AbsVhdl.ExpOps_NAND }
       | 'NOR' { AbsVhdl.ExpOps_NOR }
       | 'XNOR' { AbsVhdl.ExpOps_XNOR }
Extended_digit :: { Extended_digit }
Extended_digit : Digit { AbsVhdl.Extended_digitDigit $1 }
               | Letter { AbsVhdl.Extended_digitLetter $1 }
Extended_identifier :: { Extended_identifier }
Extended_identifier : ListGraphic_character { AbsVhdl.Extended_identifier $1 }
Factor :: { Factor }
Factor : ListPrimary { AbsVhdl.Factor1 $1 }
       | 'ABS' Primary { AbsVhdl.Factor2 $2 }
       | 'NOT' Primary { AbsVhdl.Factor3 $2 }
File_declaration :: { File_declaration }
File_declaration : ListFileMatch ';' { AbsVhdl.File_declaration (reverse $1) }
FileMatch :: { FileMatch }
FileMatch : 'FILE' Identifier_list ':' Subtype_indication File_open_information { AbsVhdl.FileMatch $2 $4 $5 }
File_logical_name :: { File_logical_name }
File_logical_name : String_expression { AbsVhdl.File_logical_name $1 }
String_expression :: { String_expression }
String_expression : Expression { AbsVhdl.String_expression $1 }
File_open_information :: { File_open_information }
File_open_information : ListOPENFile 'IS' File_logical_name { AbsVhdl.File_open_information (reverse $1) $3 }
OPENFile :: { OPENFile }
OPENFile : 'OPEN' File_open_kind_expression { AbsVhdl.OPENFile $2 }
File_open_kind_expression :: { File_open_kind_expression }
File_open_kind_expression : Expression { AbsVhdl.File_open_kind_expression $1 }
File_type_definition :: { File_type_definition }
File_type_definition : 'FILE' 'OF' Type_mark { AbsVhdl.File_type_definition $3 }
Floating_type_definition :: { Floating_type_definition }
Floating_type_definition : Range_constraint { AbsVhdl.Floating_type_definition $1 }
Formal_designator :: { Formal_designator }
Formal_designator : Generic_name { AbsVhdl.Formal_designatorGeneric_name $1 }
                  | Port_name { AbsVhdl.Formal_designatorPort_name $1 }
                  | Parameter_name { AbsVhdl.Formal_designatorParameter_name $1 }
Generic_name :: { Generic_name }
Generic_name : Name { AbsVhdl.Generic_name $1 }
Port_name :: { Port_name }
Port_name : Name { AbsVhdl.Port_name $1 }
Parameter_name :: { Parameter_name }
Parameter_name : Name { AbsVhdl.Parameter_name $1 }
Formal_parameter_list :: { Formal_parameter_list }
Formal_parameter_list : Parameter_interface_list { AbsVhdl.Formal_parameter_list $1 }
Parameter_interface_list :: { Parameter_interface_list }
Parameter_interface_list : Interface_list { AbsVhdl.Parameter_interface_list $1 }
Formal_part :: { Formal_part }
Formal_part : Formal_designator { AbsVhdl.Formal_partFormal_designator $1 }
            | Function_name '(' Formal_designator ')' { AbsVhdl.Formal_part1 $1 $3 }
            | Type_mark '(' Formal_designator ')' { AbsVhdl.Formal_part2 $1 $3 }
Function_name :: { Function_name }
Function_name : Name { AbsVhdl.Function_name $1 }
Full_type_declaration :: { Full_type_declaration }
Full_type_declaration : 'TYPE' Identifier 'IS' Type_definition ';' { AbsVhdl.Full_type_declaration $2 $4 }
Function_call :: { Function_call }
Function_call : Function_name ListActual_parameter_partPar { AbsVhdl.Function_call $1 (reverse $2) }
Actual_parameter_partPar :: { Actual_parameter_partPar }
Actual_parameter_partPar : '(' Actual_parameter_part ')' { AbsVhdl.Actual_parameter_partPar $2 }
BEGINBlock_declarative_item :: { BEGINBlock_declarative_item }
BEGINBlock_declarative_item : ListBlock_declarative_item 'BEGIN' { AbsVhdl.BEGINBlock_declarative_item (reverse $1) }
Generate_statement :: { Generate_statement }
Generate_statement : Generate_label ':' Generation_scheme 'GENERATE' ListBEGINBlock_declarative_item ListConcurrent_statement 'END' 'GENERATE' ListGenerate_label ';' { AbsVhdl.Generate_statement $1 $3 (reverse $5) $6 (reverse $9) }
Generate_label :: { Generate_label }
Generate_label : Label { AbsVhdl.Generate_label $1 }
Generation_scheme :: { Generation_scheme }
Generation_scheme : 'FOR' Generate_parameter_specification { AbsVhdl.Generation_scheme1 $2 }
                  | 'IF' Condition { AbsVhdl.Generation_scheme2 $2 }
Generate_parameter_specification :: { Generate_parameter_specification }
Generate_parameter_specification : Parameter_specification { AbsVhdl.Generate_parameter_specification $1 }
Generic_clause :: { Generic_clause }
Generic_clause : 'GENERIC' '(' Generic_list ')' ';' { AbsVhdl.Generic_clause $3 }
Generic_list :: { Generic_list }
Generic_list : Generic_interface_list { AbsVhdl.Generic_list $1 }
Generic_interface_list :: { Generic_interface_list }
Generic_interface_list : Interface_list { AbsVhdl.Generic_interface_list $1 }
Generic_map_aspect :: { Generic_map_aspect }
Generic_map_aspect : 'GENERIC' 'MAP' '(' Generic_association_list ')' { AbsVhdl.Generic_map_aspect $4 }
Generic_association_list :: { Generic_association_list }
Generic_association_list : Association_list { AbsVhdl.Generic_association_list $1 }
Generic_map_aspectSemi :: { Generic_map_aspectSemi }
Generic_map_aspectSemi : Generic_map_aspect ';' { AbsVhdl.Generic_map_aspectSemi $1 }
Graphic_character :: { Graphic_character }
Graphic_character : Basic_graphic_character { AbsVhdl.Graphic_characterBasic_graphic_character $1 }
                  | Lower_case_letter { AbsVhdl.Graphic_characterLower_case_letter $1 }
                  | Other_special_character { AbsVhdl.Graphic_characterOther_special_character $1 }
Other_special_character :: { Other_special_character }
Other_special_character : 'I DONT KOW WHAT GOES HERE' { AbsVhdl.Other_special_character }
Group_constituent :: { Group_constituent }
Group_constituent : Name { AbsVhdl.Group_constituentName $1 }
                  | Character_literal { AbsVhdl.Group_constituentCharacter_literal $1 }
Group_constituent_list :: { Group_constituent_list }
Group_constituent_list : ListGroup_constituent { AbsVhdl.Group_constituent_list $1 }
Group_template_declaration :: { Group_template_declaration }
Group_template_declaration : 'GROUP' Identifier 'IS' '(' Entity_class_entry_list ')' ';' { AbsVhdl.Group_template_declaration $2 $5 }
Group_declaration :: { Group_declaration }
Group_declaration : 'GROUP' Identifier ':' Group_template_name '(' Group_constituent_list ')' ';' { AbsVhdl.Group_declaration $2 $4 $6 }
Group_template_name :: { Group_template_name }
Group_template_name : Name { AbsVhdl.Group_template_name $1 }
Guarded_signal_specification :: { Guarded_signal_specification }
Guarded_signal_specification : Guarded_signal_list ':' Type_mark { AbsVhdl.Guarded_signal_specification $1 $3 }
Guarded_signal_list :: { Guarded_signal_list }
Guarded_signal_list : Signal_list { AbsVhdl.Guarded_signal_list $1 }
Identifier :: { Identifier }
Identifier : Basic_identifier { AbsVhdl.IdentifierBasic_identifier $1 }
           | Extended_identifier { AbsVhdl.IdentifierExtended_identifier $1 }
Identifier_list :: { Identifier_list }
Identifier_list : ListIdentifier { AbsVhdl.Identifier_list $1 }
If_statement :: { If_statement }
If_statement : ListIf_labelColon 'IF' Condition 'THEN' Sequence_of_statements ListELSEStatement ListELSEIFStatement 'END' 'IF' ListIf_label ';' { AbsVhdl.If_statement $1 $3 $5 (reverse $6) (reverse $7) $10 }
If_labelColon :: { If_labelColon }
If_labelColon : If_label ':' { AbsVhdl.If_labelColon $1 }
ELSEIFStatement :: { ELSEIFStatement }
ELSEIFStatement : 'ELSIF' Condition 'THEN' Sequence_of_statements { AbsVhdl.ELSEIFStatement $2 $4 }
ELSEStatement :: { ELSEStatement }
ELSEStatement : 'ELSE' Sequence_of_statements { AbsVhdl.ELSEStatement $2 }
If_label :: { If_label }
If_label : Label { AbsVhdl.If_label $1 }
Incomplete_type_declaration :: { Incomplete_type_declaration }
Incomplete_type_declaration : 'TYPE' Identifier ';' { AbsVhdl.Incomplete_type_declaration $2 }
Index_constraint :: { Index_constraint }
Index_constraint : '(' ListDiscrete_range ')' { AbsVhdl.Index_constraint $2 }
Index_specification :: { Index_specification }
Index_specification : Discrete_range { AbsVhdl.Index_specificationDiscrete_range $1 }
                    | Static_expression { AbsVhdl.Index_specificationStatic_expression $1 }
Static_expression :: { Static_expression }
Static_expression : Expression { AbsVhdl.Static_expression $1 }
Index_subtype_definition :: { Index_subtype_definition }
Index_subtype_definition : Type_mark Range '<>' { AbsVhdl.Index_subtype_definition $1 $2 }
Indexed_name :: { Indexed_name }
Indexed_name : Prefix '(' ListExpression ')' { AbsVhdl.Indexed_name $1 $3 }
Instantiated_unit :: { Instantiated_unit }
Instantiated_unit : ListCOMPONENTText Component_name { AbsVhdl.Instantiated_unit1 (reverse $1) $2 }
                  | 'ENTITY' Entity_name ListArchitecture_identifierPar { AbsVhdl.Instantiated_unit2 $2 (reverse $3) }
                  | 'CONFIGURATION' Configuration_name { AbsVhdl.Instantiated_unit3 $2 }
COMPONENTText :: { COMPONENTText }
COMPONENTText : 'COMPONENT' { AbsVhdl.COMPONENTText }
Architecture_identifierPar :: { Architecture_identifierPar }
Architecture_identifierPar : '(' Architecture_identifier ')' { AbsVhdl.Architecture_identifierPar $2 }
Entity_name :: { Entity_name }
Entity_name : Name { AbsVhdl.Entity_name $1 }
Architecture_identifier :: { Architecture_identifier }
Architecture_identifier : Identifier { AbsVhdl.Architecture_identifier $1 }
Instantiation_list :: { Instantiation_list }
Instantiation_list : ListInstantiation_label { AbsVhdl.Instantiation_list1 $1 }
                   | 'OTHERS' { AbsVhdl.Instantiation_list_OTHERS }
                   | 'ALL' { AbsVhdl.Instantiation_list_ALL }
VInteger :: { VInteger }
VInteger : NumString { AbsVhdl.VInteger $1 }
IntAccuum :: { IntAccuum }
IntAccuum : Digit IntAccuum { AbsVhdl.IntAccuum1 $1 $2 }
          | Digit Underline IntAccuum { AbsVhdl.IntAccuum2 $1 $2 $3 }
          | Digit { AbsVhdl.IntAccuumDigit $1 }
Underline :: { Underline }
Underline : '_' { AbsVhdl.Underline }
Integer_type_definition :: { Integer_type_definition }
Integer_type_definition : Range_constraint { AbsVhdl.Integer_type_definition $1 }
Interface_constant_declaration :: { Interface_constant_declaration }
Interface_constant_declaration : ListConstantText Identifier_list ':' ListInText Subtype_indication ListStatic_expressionAssign { AbsVhdl.Interface_constant_declaration (reverse $1) $2 (reverse $4) $5 (reverse $6) }
Interface_declaration :: { Interface_declaration }
Interface_declaration : Interface_constant_declaration { AbsVhdl.Interface_declarationInterface_constant_declaration $1 }
                      | Interface_signal_declaration { AbsVhdl.Interface_declarationInterface_signal_declaration $1 }
                      | Interface_variable_declaration { AbsVhdl.Interface_declarationInterface_variable_declaration $1 }
                      | Interface_file_declaration { AbsVhdl.Interface_declarationInterface_file_declaration $1 }
Interface_element :: { Interface_element }
Interface_element : Interface_declaration { AbsVhdl.Interface_element $1 }
Interface_file_declaration :: { Interface_file_declaration }
Interface_file_declaration : 'FILE' Identifier_list ':' Subtype_indication { AbsVhdl.Interface_file_declaration $2 $4 }
Interface_list :: { Interface_list }
Interface_list : ListInterface_element { AbsVhdl.Interface_list $1 }
Interface_signal_declaration :: { Interface_signal_declaration }
Interface_signal_declaration : ListSIGNALText Identifier_list ':' ListMode Subtype_indication ListBUSText ListStatic_expressionAssign { AbsVhdl.Interface_signal_declaration (reverse $1) $2 (reverse $4) $5 (reverse $6) (reverse $7) }
Interface_variable_declaration :: { Interface_variable_declaration }
Interface_variable_declaration : ListVARIABLEText Identifier_list ':' ListMode Subtype_indication ListStatic_expressionAssign { AbsVhdl.Interface_variable_declaration (reverse $1) $2 (reverse $4) $5 (reverse $6) }
Iteration_scheme :: { Iteration_scheme }
Iteration_scheme : 'WHILE' Condition { AbsVhdl.Iteration_scheme1 $2 }
                 | 'FOR' Loop_parameter_specification { AbsVhdl.Iteration_scheme2 $2 }
Loop_parameter_specification :: { Loop_parameter_specification }
Loop_parameter_specification : Parameter_specification { AbsVhdl.Loop_parameter_specification $1 }
Label :: { Label }
Label : Identifier { AbsVhdl.Label $1 }
Letter :: { Letter }
Letter : Upper_case_letter { AbsVhdl.LetterUpper_case_letter $1 }
       | Lower_case_letter { AbsVhdl.LetterLower_case_letter $1 }
Upper_case_letter :: { Upper_case_letter }
Upper_case_letter : 'A' { AbsVhdl.Upper_case_letter_A }
                  | 'B' { AbsVhdl.Upper_case_letter_B }
                  | 'C' { AbsVhdl.Upper_case_letter_C }
                  | 'D' { AbsVhdl.Upper_case_letter_D }
                  | 'E' { AbsVhdl.Upper_case_letter_E }
                  | 'F' { AbsVhdl.Upper_case_letter_F }
                  | 'G' { AbsVhdl.Upper_case_letter_G }
                  | 'H' { AbsVhdl.Upper_case_letter_H }
                  | 'I' { AbsVhdl.Upper_case_letter_I }
                  | 'J' { AbsVhdl.Upper_case_letter_J }
                  | 'K' { AbsVhdl.Upper_case_letter_K }
                  | 'L' { AbsVhdl.Upper_case_letter_L }
                  | 'M' { AbsVhdl.Upper_case_letter_M }
                  | 'N' { AbsVhdl.Upper_case_letter_N }
                  | 'O' { AbsVhdl.Upper_case_letter_O }
                  | 'P' { AbsVhdl.Upper_case_letter_P }
                  | 'Q' { AbsVhdl.Upper_case_letter_Q }
                  | 'R' { AbsVhdl.Upper_case_letter_R }
                  | 'S' { AbsVhdl.Upper_case_letter_S }
                  | 'T' { AbsVhdl.Upper_case_letter_T }
                  | 'U' { AbsVhdl.Upper_case_letter_U }
                  | 'V' { AbsVhdl.Upper_case_letter_V }
                  | 'W' { AbsVhdl.Upper_case_letter_W }
                  | 'X' { AbsVhdl.Upper_case_letter_X }
                  | 'Y' { AbsVhdl.Upper_case_letter_Y }
                  | 'Z' { AbsVhdl.Upper_case_letter_Z }
Lower_case_letter :: { Lower_case_letter }
Lower_case_letter : 'a' { AbsVhdl.Lower_case_letter_a }
                  | 'b' { AbsVhdl.Lower_case_letter_b }
                  | 'c' { AbsVhdl.Lower_case_letter_c }
                  | 'd' { AbsVhdl.Lower_case_letter_d }
                  | 'e' { AbsVhdl.Lower_case_letter_e }
                  | 'f' { AbsVhdl.Lower_case_letter_f }
                  | 'g' { AbsVhdl.Lower_case_letter_g }
                  | 'h' { AbsVhdl.Lower_case_letter_h }
                  | 'i' { AbsVhdl.Lower_case_letter_i }
                  | 'j' { AbsVhdl.Lower_case_letter_j }
                  | 'k' { AbsVhdl.Lower_case_letter_k }
                  | 'l' { AbsVhdl.Lower_case_letter_l }
                  | 'm' { AbsVhdl.Lower_case_letter_m }
                  | 'n' { AbsVhdl.Lower_case_letter_n }
                  | 'o' { AbsVhdl.Lower_case_letter_o }
                  | 'p' { AbsVhdl.Lower_case_letter_p }
                  | 'q' { AbsVhdl.Lower_case_letter_q }
                  | 'r' { AbsVhdl.Lower_case_letter_r }
                  | 's' { AbsVhdl.Lower_case_letter_s }
                  | 't' { AbsVhdl.Lower_case_letter_t }
                  | 'u' { AbsVhdl.Lower_case_letter_u }
                  | 'v' { AbsVhdl.Lower_case_letter_v }
                  | 'w' { AbsVhdl.Lower_case_letter_w }
                  | 'x' { AbsVhdl.Lower_case_letter_x }
                  | 'y' { AbsVhdl.Lower_case_letter_y }
                  | 'z' { AbsVhdl.Lower_case_letter_z }
Letter_or_digit :: { Letter_or_digit }
Letter_or_digit : Letter { AbsVhdl.Letter_or_digitLetter $1 }
                | Digit { AbsVhdl.Letter_or_digitDigit $1 }
Library_clause :: { Library_clause }
Library_clause : 'LIBRARY' Logical_name_list ';' { AbsVhdl.Library_clause $2 }
Library_unit :: { Library_unit }
Library_unit : Primary_unit { AbsVhdl.Library_unitPrimary_unit $1 }
             | Secondary_unit { AbsVhdl.Library_unitSecondary_unit $1 }
Literal :: { Literal }
Literal : Numeric_literal { AbsVhdl.LiteralNumeric_literal $1 }
        | Enumeration_literal { AbsVhdl.LiteralEnumeration_literal $1 }
        | String_literal { AbsVhdl.LiteralString_literal $1 }
        | Bit_string_literal { AbsVhdl.LiteralBit_string_literal $1 }
        | 'NULL' { AbsVhdl.Literal_NULL }
Logical_name :: { Logical_name }
Logical_name : Identifier { AbsVhdl.Logical_name $1 }
Logical_name_list :: { Logical_name_list }
Logical_name_list : ListLogical_name { AbsVhdl.Logical_name_list $1 }
Logical_operator :: { Logical_operator }
Logical_operator : 'AND' { AbsVhdl.Logical_operator_AND }
                 | 'OR' { AbsVhdl.Logical_operator_OR }
                 | 'NAND' { AbsVhdl.Logical_operator_NAND }
                 | 'NOR' { AbsVhdl.Logical_operator_NOR }
                 | 'XOR' { AbsVhdl.Logical_operator_XOR }
                 | 'XNOR' { AbsVhdl.Logical_operator_XNOR }
Loop_statement :: { Loop_statement }
Loop_statement : ListLoopLabelColon ListIteration_scheme 'LOOP' Sequence_of_statements 'END' 'LOOP' ListLoop_label ';' { AbsVhdl.Loop_statement $1 (reverse $2) $4 $7 }
Miscellaneous_operator :: { Miscellaneous_operator }
Miscellaneous_operator : '**' { AbsVhdl.Miscellaneous_operator1 }
                       | 'ABS' { AbsVhdl.Miscellaneous_operator_ABS }
                       | 'NOT' { AbsVhdl.Miscellaneous_operator_NOT }
Mode :: { Mode }
Mode : 'IN' { AbsVhdl.Mode_IN }
     | 'OUT' { AbsVhdl.Mode_OUT }
     | 'INOUT' { AbsVhdl.Mode_INOUT }
     | 'BUFFER' { AbsVhdl.Mode_BUFFER }
     | 'LINKAGE' { AbsVhdl.Mode_LINKAGE }
Multiplying_operator :: { Multiplying_operator }
Multiplying_operator : '*' { AbsVhdl.Multiplying_operator1 }
                     | '/' { AbsVhdl.Multiplying_operator2 }
                     | 'MOD' { AbsVhdl.Multiplying_operator_MOD }
                     | 'REM' { AbsVhdl.Multiplying_operator_REM }
Name :: { Name }
Name : Simple_name { AbsVhdl.NameSimple_name $1 }
     | Operator_symbol { AbsVhdl.NameOperator_symbol $1 }
     | Selected_name { AbsVhdl.NameSelected_name $1 }
     | Indexed_name { AbsVhdl.NameIndexed_name $1 }
     | Slice_name { AbsVhdl.NameSlice_name $1 }
     | Attribute_name { AbsVhdl.NameAttribute_name $1 }
Next_statement :: { Next_statement }
Next_statement : ListLabel 'NEXT' ListLoop_label ListWhenCondition ';' { AbsVhdl.Next_statement $1 $3 (reverse $4) }
Null_statement :: { Null_statement }
Null_statement : ListLabel 'NULL' ';' { AbsVhdl.Null_statement $1 }
Numeric_literal :: { Numeric_literal }
Numeric_literal : Abstract_literal { AbsVhdl.Numeric_literalAbstract_literal $1 }
                | Physical_literal { AbsVhdl.Numeric_literalPhysical_literal $1 }
Object_declaration :: { Object_declaration }
Object_declaration : Constant_declaration { AbsVhdl.Object_declarationConstant_declaration $1 }
                   | Signal_declaration { AbsVhdl.Object_declarationSignal_declaration $1 }
                   | Variable_declaration { AbsVhdl.Object_declarationVariable_declaration $1 }
                   | File_declaration { AbsVhdl.Object_declarationFile_declaration $1 }
Operator_symbol :: { Operator_symbol }
Operator_symbol : String_literal { AbsVhdl.Operator_symbol $1 }
Options :: { Options }
Options : ListGUARDEDtext ListDelay_mechanism { AbsVhdl.Options (reverse $1) (reverse $2) }
Package_body :: { Package_body }
Package_body : 'PACKAGE' 'body' Package_simple_name 'IS' Package_body_declarative_part 'END' ListPackageBodytext ListPackageBodytext ';' { AbsVhdl.Package_body $3 $5 (reverse $7) (reverse $8) }
Package_simple_name :: { Package_simple_name }
Package_simple_name : Simple_name { AbsVhdl.Package_simple_name $1 }
Package_body_declarative_item :: { Package_body_declarative_item }
Package_body_declarative_item : Subprogram_declaration { AbsVhdl.Package_body_declarative_itemSubprogram_declaration $1 }
                              | Subprogram_body { AbsVhdl.Package_body_declarative_itemSubprogram_body $1 }
                              | Type_declaration { AbsVhdl.Package_body_declarative_itemType_declaration $1 }
                              | Subtype_declaration { AbsVhdl.Package_body_declarative_itemSubtype_declaration $1 }
                              | Constant_declaration { AbsVhdl.Package_body_declarative_itemConstant_declaration $1 }
                              | Shared_variable_declaration { AbsVhdl.Package_body_declarative_itemShared_variable_declaration $1 }
                              | File_declaration { AbsVhdl.Package_body_declarative_itemFile_declaration $1 }
                              | Alias_declaration { AbsVhdl.Package_body_declarative_itemAlias_declaration $1 }
                              | Use_clause { AbsVhdl.Package_body_declarative_itemUse_clause $1 }
                              | Group_template_declaration { AbsVhdl.Package_body_declarative_itemGroup_template_declaration $1 }
                              | Group_declaration { AbsVhdl.Package_body_declarative_itemGroup_declaration $1 }
Package_body_declarative_part :: { Package_body_declarative_part }
Package_body_declarative_part : ListPackage_body_declarative_item { AbsVhdl.Package_body_declarative_part (reverse $1) }
Package_declaration :: { Package_declaration }
Package_declaration : 'PACKAGE' Identifier 'IS' Package_declarative_part 'END' ListPackagetext ListPackage_simple_name ';' { AbsVhdl.Package_declaration $2 $4 $6 (reverse $7) }
Packagetext :: { Packagetext }
Packagetext : 'PACKAGE' { AbsVhdl.Packagetext }
Package_declarative_item :: { Package_declarative_item }
Package_declarative_item : Subprogram_declaration { AbsVhdl.Package_declarative_itemSubprogram_declaration $1 }
                         | Type_declaration { AbsVhdl.Package_declarative_itemType_declaration $1 }
                         | Subtype_declaration { AbsVhdl.Package_declarative_itemSubtype_declaration $1 }
                         | Constant_declaration { AbsVhdl.Package_declarative_itemConstant_declaration $1 }
                         | Signal_declaration { AbsVhdl.Package_declarative_itemSignal_declaration $1 }
                         | Shared_variable_declaration { AbsVhdl.Package_declarative_itemShared_variable_declaration $1 }
                         | File_declaration { AbsVhdl.Package_declarative_itemFile_declaration $1 }
                         | Alias_declaration { AbsVhdl.Package_declarative_itemAlias_declaration $1 }
                         | Component_declaration { AbsVhdl.Package_declarative_itemComponent_declaration $1 }
                         | Attribute_declaration { AbsVhdl.Package_declarative_itemAttribute_declaration $1 }
                         | Attribute_specification { AbsVhdl.Package_declarative_itemAttribute_specification $1 }
                         | Disconnection_specification { AbsVhdl.Package_declarative_itemDisconnection_specification $1 }
                         | Use_clause { AbsVhdl.Package_declarative_itemUse_clause $1 }
                         | Group_template_declaration { AbsVhdl.Package_declarative_itemGroup_template_declaration $1 }
                         | Group_declaration { AbsVhdl.Package_declarative_itemGroup_declaration $1 }
Package_declarative_part :: { Package_declarative_part }
Package_declarative_part : ListPackage_declarative_item { AbsVhdl.Package_declarative_part (reverse $1) }
Parameter_specification :: { Parameter_specification }
Parameter_specification : Identifier 'IN' Discrete_range { AbsVhdl.Parameter_specification $1 $3 }
Physical_literal :: { Physical_literal }
Physical_literal : ListAbstract_literal Unit_name { AbsVhdl.Physical_literal (reverse $1) $2 }
Unit_name :: { Unit_name }
Unit_name : Name { AbsVhdl.Unit_name $1 }
Physical_type_definition :: { Physical_type_definition }
Physical_type_definition : Range_constraint 'UNITS' Base_unit_declaration ListSecondary_unit_declaration 'END' 'UNITS' ListPhysical_type_simple_name { AbsVhdl.Physical_type_definition $1 $3 (reverse $4) (reverse $7) }
Physical_type_simple_name :: { Physical_type_simple_name }
Physical_type_simple_name : Simple_name { AbsVhdl.Physical_type_simple_name $1 }
Port_clause :: { Port_clause }
Port_clause : 'PORT' '(' Port_list ')' ';' { AbsVhdl.Port_clause $3 }
Port_list :: { Port_list }
Port_list : Port_interface_list { AbsVhdl.Port_list $1 }
Port_interface_list :: { Port_interface_list }
Port_interface_list : Interface_list { AbsVhdl.Port_interface_list $1 }
Port_map_aspect :: { Port_map_aspect }
Port_map_aspect : 'PORT' 'MAP' '(' Port_association_list ')' { AbsVhdl.Port_map_aspect $4 }
Port_association_list :: { Port_association_list }
Port_association_list : Association_list { AbsVhdl.Port_association_list $1 }
Procedure_name :: { Procedure_name }
Procedure_name : Name { AbsVhdl.Procedure_name $1 }
Prefix :: { Prefix }
Prefix : Name { AbsVhdl.PrefixName $1 }
       | Function_call { AbsVhdl.PrefixFunction_call $1 }
Primary :: { Primary }
Primary : Name { AbsVhdl.PrimaryName $1 }
        | Literal { AbsVhdl.PrimaryLiteral $1 }
        | Aggregate { AbsVhdl.PrimaryAggregate $1 }
        | Function_call { AbsVhdl.PrimaryFunction_call $1 }
        | Qualified_expression { AbsVhdl.PrimaryQualified_expression $1 }
        | Type_conversion { AbsVhdl.PrimaryType_conversion $1 }
        | Allocator { AbsVhdl.PrimaryAllocator $1 }
        | '(' Expression ')' { AbsVhdl.Primary1 $2 }
Primary_unit :: { Primary_unit }
Primary_unit : Entity_declaration { AbsVhdl.Primary_unitEntity_declaration $1 }
             | Configuration_declaration { AbsVhdl.Primary_unitConfiguration_declaration $1 }
             | Package_declaration { AbsVhdl.Primary_unitPackage_declaration $1 }
Procedure_call :: { Procedure_call }
Procedure_call : Procedure_name ListActual_parameter_partPar { AbsVhdl.Procedure_call1 $1 (reverse $2) }
Procedure_call_statement :: { Procedure_call_statement }
Procedure_call_statement : ListLabel Procedure_call ';' { AbsVhdl.Procedure_call_statement $1 $2 }
Process_declarative_item :: { Process_declarative_item }
Process_declarative_item : Subprogram_declaration { AbsVhdl.Process_declarative_itemSubprogram_declaration $1 }
                         | Subprogram_body { AbsVhdl.Process_declarative_itemSubprogram_body $1 }
                         | Type_declaration { AbsVhdl.Process_declarative_itemType_declaration $1 }
                         | Subtype_declaration { AbsVhdl.Process_declarative_itemSubtype_declaration $1 }
                         | Constant_declaration { AbsVhdl.Process_declarative_itemConstant_declaration $1 }
                         | Variable_declaration { AbsVhdl.Process_declarative_itemVariable_declaration $1 }
                         | File_declaration { AbsVhdl.Process_declarative_itemFile_declaration $1 }
                         | Alias_declaration { AbsVhdl.Process_declarative_itemAlias_declaration $1 }
                         | Attribute_declaration { AbsVhdl.Process_declarative_itemAttribute_declaration $1 }
                         | Attribute_specification { AbsVhdl.Process_declarative_itemAttribute_specification $1 }
                         | Use_clause { AbsVhdl.Process_declarative_itemUse_clause $1 }
                         | Group_template_declaration { AbsVhdl.Process_declarative_itemGroup_template_declaration $1 }
                         | Group_declaration { AbsVhdl.Process_declarative_itemGroup_declaration $1 }
Process_declarative_part :: { Process_declarative_part }
Process_declarative_part : ListProcess_declarative_item { AbsVhdl.Process_declarative_part (reverse $1) }
Process_statement :: { Process_statement }
Process_statement : ListProcess_labelColon ListMaybePOSTPONED 'PROCESS' ListSensitivity_listPar ListIS Process_declarative_part 'BEGIN' Process_statement_part 'END' ListMaybePOSTPONED 'PROCESS' ListProcess_label ';' { AbsVhdl.Process_statement (reverse $1) (reverse $2) (reverse $4) (reverse $5) $6 $8 (reverse $10) (reverse $12) }
Process_labelColon :: { Process_labelColon }
Process_labelColon : ':' { AbsVhdl.Process_labelColon }
Sensitivity_listPar :: { Sensitivity_listPar }
Sensitivity_listPar : '(' Sensitivity_list ')' { AbsVhdl.Sensitivity_listPar $2 }
Process_label :: { Process_label }
Process_label : Label { AbsVhdl.Process_label $1 }
Process_statement_part :: { Process_statement_part }
Process_statement_part : ListSensitivity_list { AbsVhdl.Process_statement_part $1 }
Range :: { Range }
Range : Range_attribute_name { AbsVhdl.RangeRange_attribute_name $1 }
      | Simple_expression Direction Simple_expression { AbsVhdl.Range1 $1 $2 $3 }
Range_attribute_name :: { Range_attribute_name }
Range_attribute_name : Attribute_name { AbsVhdl.Range_attribute_name $1 }
Range_constraint :: { Range_constraint }
Range_constraint : Range Range { AbsVhdl.Range_constraint $1 $2 }
Record_type_definition :: { Record_type_definition }
Record_type_definition : 'RECORD' ListElement_declaration 'END' 'RECORD' ListRecord_type_simple_name { AbsVhdl.Record_type_definition $2 (reverse $5) }
Record_type_simple_name :: { Record_type_simple_name }
Record_type_simple_name : Simple_name { AbsVhdl.Record_type_simple_name $1 }
Relation :: { Relation }
Relation : Shift_expression ListReShift { AbsVhdl.Relation $1 (reverse $2) }
ReShift :: { ReShift }
ReShift : Relational_operator Shift_expression { AbsVhdl.ReShift $1 $2 }
Relational_operator :: { Relational_operator }
Relational_operator : '=' { AbsVhdl.Relational_operator1 }
                    | '/=' { AbsVhdl.Relational_operator2 }
                    | '<' { AbsVhdl.Relational_operator3 }
                    | '<=' { AbsVhdl.Relational_operator4 }
                    | '>' { AbsVhdl.Relational_operator5 }
                    | '>=' { AbsVhdl.Relational_operator6 }
Report_statement :: { Report_statement }
Report_statement : ListLabel 'REPORT' Expression ListSevExp ';' { AbsVhdl.Report_statement $1 $3 (reverse $4) }
SevExp :: { SevExp }
SevExp : 'SEVERITY' Expression { AbsVhdl.SevExp $2 }
Return_statement :: { Return_statement }
Return_statement : ListLabel 'RETURN' ListExpression ';' { AbsVhdl.Return_statement $1 $3 }
Scalar_type_definition :: { Scalar_type_definition }
Scalar_type_definition : Enumeration_type_definition { AbsVhdl.Scalar_type_definitionEnumeration_type_definition $1 }
                       | Integer_type_definition { AbsVhdl.Scalar_type_definitionInteger_type_definition $1 }
                       | Floating_type_definition { AbsVhdl.Scalar_type_definitionFloating_type_definition $1 }
                       | Physical_type_definition { AbsVhdl.Scalar_type_definitionPhysical_type_definition $1 }
Secondary_unit :: { Secondary_unit }
Secondary_unit : Architecture_body { AbsVhdl.Secondary_unitArchitecture_body $1 }
               | Package_body { AbsVhdl.Secondary_unitPackage_body $1 }
Secondary_unit_declaration :: { Secondary_unit_declaration }
Secondary_unit_declaration : Identifier '=' Physical_literal ';' { AbsVhdl.Secondary_unit_declaration $1 $3 }
Selected_name :: { Selected_name }
Selected_name : Prefix '.' Suffix { AbsVhdl.Selected_name $1 $3 }
Selected_signal_assignment :: { Selected_signal_assignment }
Selected_signal_assignment : 'WITH' Expression 'SELECT' Target '<=' Options Selected_waveforms ';' { AbsVhdl.Selected_signal_assignment $2 $4 $6 $7 }
Selected_waveforms :: { Selected_waveforms }
Selected_waveforms : ListWaveChoice { AbsVhdl.Selected_waveforms $1 }
WaveChoice :: { WaveChoice }
WaveChoice : Waveform 'WHEN' Choices { AbsVhdl.WaveChoice $1 $3 }
Sensitivity_clause :: { Sensitivity_clause }
Sensitivity_clause : 'ON' Sensitivity_list { AbsVhdl.Sensitivity_clause $2 }
Sensitivity_list :: { Sensitivity_list }
Sensitivity_list : ListSignal_name { AbsVhdl.Sensitivity_list $1 }
Signal_name :: { Signal_name }
Signal_name : Name { AbsVhdl.Signal_name $1 }
Sequence_of_statements :: { Sequence_of_statements }
Sequence_of_statements : ListSequence_of_statements { AbsVhdl.Sequence_of_statements (reverse $1) }
Sequential_statement :: { Sequential_statement }
Sequential_statement : Wait_statement { AbsVhdl.Sequential_statementWait_statement $1 }
                     | Assertion_statement { AbsVhdl.Sequential_statementAssertion_statement $1 }
                     | Report_statement { AbsVhdl.Sequential_statementReport_statement $1 }
                     | Signal_assignment_statement { AbsVhdl.Sequential_statementSignal_assignment_statement $1 }
                     | Variable_assignment_statement { AbsVhdl.Sequential_statementVariable_assignment_statement $1 }
                     | Procedure_call_statement { AbsVhdl.Sequential_statementProcedure_call_statement $1 }
                     | If_statement { AbsVhdl.Sequential_statementIf_statement $1 }
                     | Case_statement { AbsVhdl.Sequential_statementCase_statement $1 }
                     | Loop_statement { AbsVhdl.Sequential_statementLoop_statement $1 }
                     | Next_statement { AbsVhdl.Sequential_statementNext_statement $1 }
                     | Exit_statement { AbsVhdl.Sequential_statementExit_statement $1 }
                     | Return_statement { AbsVhdl.Sequential_statementReturn_statement $1 }
                     | Null_statement { AbsVhdl.Sequential_statementNull_statement $1 }
Shift_expression :: { Shift_expression }
Shift_expression : Simple_expression ListShift_operatorSimple_expressionText { AbsVhdl.Shift_expression $1 (reverse $2) }
Shift_operatorSimple_expressionText :: { Shift_operatorSimple_expressionText }
Shift_operatorSimple_expressionText : Shift_operator Simple_expression { AbsVhdl.Shift_operatorSimple_expressionText $1 $2 }
                                    | Shift_operator Simple_expression { AbsVhdl.Shift_operatorSimple_expressionText $1 $2 }
Shift_operator :: { Shift_operator }
Shift_operator : 'SLL' { AbsVhdl.Shift_operator_SLL }
               | 'SRL' { AbsVhdl.Shift_operator_SRL }
               | 'SLA' { AbsVhdl.Shift_operator_SLA }
               | 'SRA' { AbsVhdl.Shift_operator_SRA }
               | 'ROL' { AbsVhdl.Shift_operator_ROL }
               | 'ROR' { AbsVhdl.Shift_operator_ROR }
Sign :: { Sign }
Sign : '+' { AbsVhdl.Sign1 } | '-' { AbsVhdl.Sign2 }
Signal_assignment_statement :: { Signal_assignment_statement }
Signal_assignment_statement : ListLabel Target '<=' ListDelay_mechanism Waveform ';' { AbsVhdl.Signal_assignment_statement $1 $2 (reverse $4) $5 }
Signal_declaration :: { Signal_declaration }
Signal_declaration : Signal Identifier_list ':' Subtype_indication ListSignal_kind ListVarAssign ';' { AbsVhdl.Signal_declaration $1 $2 $4 (reverse $5) (reverse $6) }
Signal :: { Signal }
Signal : 'signal' { AbsVhdl.Signal }
Signal_kind :: { Signal_kind }
Signal_kind : 'REGISTER' { AbsVhdl.Signal_kind_REGISTER }
            | 'BUS' { AbsVhdl.Signal_kind_BUS }
Signal_list :: { Signal_list }
Signal_list : ListSignal_name { AbsVhdl.Signal_list1 $1 }
            | 'OTHERS' { AbsVhdl.Signal_list_OTHERS }
            | 'ALL' { AbsVhdl.Signal_list_ALL }
Signature :: { Signature }
Signature : ListTypeRe { AbsVhdl.Signature (reverse $1) }
ReturnType :: { ReturnType }
ReturnType : 'return' Type_mark { AbsVhdl.ReturnType $2 }
TypeRe :: { TypeRe }
TypeRe : ListType_mark ListReturnType { AbsVhdl.TypeRe $1 (reverse $2) }
Simple_expression :: { Simple_expression }
Simple_expression : ListSign Term ListAddOpTem { AbsVhdl.Simple_expression (reverse $1) $2 (reverse $3) }
AddOpTem :: { AddOpTem }
AddOpTem : Adding_operator Term { AbsVhdl.AddOpTem $1 $2 }
Simple_name :: { Simple_name }
Simple_name : Ident { AbsVhdl.Simple_name $1 }
Slice_name :: { Slice_name }
Slice_name : Prefix '(' Discrete_range ')' { AbsVhdl.Slice_name $1 $3 }
String_literal :: { String_literal }
String_literal : '\"' ListGraphic_character '\"' { AbsVhdl.String_literal $2 }
Subprogram_body :: { Subprogram_body }
Subprogram_body : Subprogram_specification 'IS' Subprogram_declarative_part 'BEGIN' Subprogram_statement_part 'END' ListSubprogram_kind ListDesignator ';' { AbsVhdl.Subprogram_body $1 $3 $5 (reverse $7) (reverse $8) }
Subprogram_declaration :: { Subprogram_declaration }
Subprogram_declaration : Subprogram_specification ';' { AbsVhdl.Subprogram_declaration $1 }
Subprogram_declarative_item :: { Subprogram_declarative_item }
Subprogram_declarative_item : Subprogram_declaration { AbsVhdl.Subprogram_declarative_itemSubprogram_declaration $1 }
                            | Subprogram_body { AbsVhdl.Subprogram_declarative_itemSubprogram_body $1 }
                            | Type_declaration { AbsVhdl.Subprogram_declarative_itemType_declaration $1 }
                            | Subtype_declaration { AbsVhdl.Subprogram_declarative_itemSubtype_declaration $1 }
                            | Constant_declaration { AbsVhdl.Subprogram_declarative_itemConstant_declaration $1 }
                            | Variable_declaration { AbsVhdl.Subprogram_declarative_itemVariable_declaration $1 }
                            | File_declaration { AbsVhdl.Subprogram_declarative_itemFile_declaration $1 }
                            | Alias_declaration { AbsVhdl.Subprogram_declarative_itemAlias_declaration $1 }
                            | Attribute_declaration { AbsVhdl.Subprogram_declarative_itemAttribute_declaration $1 }
                            | Attribute_specification { AbsVhdl.Subprogram_declarative_itemAttribute_specification $1 }
                            | Use_clause { AbsVhdl.Subprogram_declarative_itemUse_clause $1 }
                            | Group_template_declaration { AbsVhdl.Subprogram_declarative_itemGroup_template_declaration $1 }
                            | Group_declaration { AbsVhdl.Subprogram_declarative_itemGroup_declaration $1 }
Subprogram_declarative_part :: { Subprogram_declarative_part }
Subprogram_declarative_part : ListSubprogram_declarative_item { AbsVhdl.Subprogram_declarative_part (reverse $1) }
Subprogram_kind :: { Subprogram_kind }
Subprogram_kind : 'PROCEDURE' { AbsVhdl.Subprogram_kind_PROCEDURE }
                | 'FUNCTION' { AbsVhdl.Subprogram_kind_FUNCTION }
Subprogram_specification :: { Subprogram_specification }
Subprogram_specification : 'PROCEDURE' Designator ListFormal_parameter_listPar { AbsVhdl.Subprogram_specification1 $2 (reverse $3) }
                         | ListPureImpure 'FUNCTION' Designator ListFormal_parameter_listPar 'RETURN' Type_mark { AbsVhdl.Subprogram_specification2 (reverse $1) $3 (reverse $4) $6 }
Formal_parameter_listPar :: { Formal_parameter_listPar }
Formal_parameter_listPar : '(' Formal_parameter_list ')' { AbsVhdl.Formal_parameter_listPar $2 }
PureImpure :: { PureImpure }
PureImpure : 'PURE' { AbsVhdl.PureImpure_PURE }
           | 'IMPURE' { AbsVhdl.PureImpure_IMPURE }
Subprogram_statement_part :: { Subprogram_statement_part }
Subprogram_statement_part : ListSequential_statement { AbsVhdl.Subprogram_statement_part (reverse $1) }
Subtype_declaration :: { Subtype_declaration }
Subtype_declaration : 'SUBTYPE' Identifier 'IS' Subtype_indication ';' { AbsVhdl.Subtype_declaration $2 $4 }
Subtype_indication :: { Subtype_indication }
Subtype_indication : ListResolution_function_name Type_mark ListConstraint { AbsVhdl.Subtype_indication (reverse $1) $2 (reverse $3) }
Resolution_function_name :: { Resolution_function_name }
Resolution_function_name : Ident { AbsVhdl.Resolution_function_name $1 }
Suffix :: { Suffix }
Suffix : Simple_name { AbsVhdl.SuffixSimple_name $1 }
       | Character_literal { AbsVhdl.SuffixCharacter_literal $1 }
       | Operator_symbol { AbsVhdl.SuffixOperator_symbol $1 }
       | 'ALL' { AbsVhdl.Suffix_ALL }
Target :: { Target }
Target : Name { AbsVhdl.TargetName $1 }
       | Aggregate { AbsVhdl.TargetAggregate $1 }
Term :: { Term }
Term : Factor ListFacMulFac { AbsVhdl.Term $1 (reverse $2) }
FacMulFac :: { FacMulFac }
FacMulFac : Multiplying_operator Factor { AbsVhdl.FacMulFac $1 $2 }
Timeout_clause :: { Timeout_clause }
Timeout_clause : 'FOR' Time_expression { AbsVhdl.Timeout_clause $2 }
Time_expression :: { Time_expression }
Time_expression : Expression { AbsVhdl.Time_expression $1 }
Type_conversion :: { Type_conversion }
Type_conversion : Type_mark '(' Expression ')' { AbsVhdl.Type_conversion $1 $3 }
Type_declaration :: { Type_declaration }
Type_declaration : Full_type_declaration { AbsVhdl.Type_declarationFull_type_declaration $1 }
                 | Incomplete_type_declaration { AbsVhdl.Type_declarationIncomplete_type_declaration $1 }
Type_definition :: { Type_definition }
Type_definition : Scalar_type_definition { AbsVhdl.Type_definitionScalar_type_definition $1 }
                | Composite_type_definition { AbsVhdl.Type_definitionComposite_type_definition $1 }
                | Access_type_definition { AbsVhdl.Type_definitionAccess_type_definition $1 }
                | File_type_definition { AbsVhdl.Type_definitionFile_type_definition $1 }
Type_mark :: { Type_mark }
Type_mark : Type_name { AbsVhdl.Type_markType_name $1 }
          | Subtype_name { AbsVhdl.Type_markSubtype_name $1 }
Type_name :: { Type_name }
Type_name : Ident { AbsVhdl.Type_name $1 }
Unconstrained_array_definition :: { Unconstrained_array_definition }
Unconstrained_array_definition : 'ARRAY' '(' ListIndex_subtype_definition ')' 'OF' Element_subtype_indication { AbsVhdl.Unconstrained_array_definition $3 $6 }
Element_subtype_indication :: { Element_subtype_indication }
Element_subtype_indication : Subtype_indication { AbsVhdl.Element_subtype_indication $1 }
Subtype_name :: { Subtype_name }
Subtype_name : Ident { AbsVhdl.Subtype_name $1 }
Use_clause :: { Use_clause }
Use_clause : 'USE' ListSelected_name ';' { AbsVhdl.Use_clause $2 }
Variable_assignment_statement :: { Variable_assignment_statement }
Variable_assignment_statement : ListLabel Target ':=' Expression ';' { AbsVhdl.Variable_assignment_statement $1 $2 $4 }
Variable_declaration :: { Variable_declaration }
Variable_declaration : ListSharedText 'VARIABLE' Identifier_list ':' Subtype_indication ListVarAssign ';' { AbsVhdl.Variable_declaration (reverse $1) $3 $5 (reverse $6) }
SharedText :: { SharedText }
SharedText : 'SHARED' { AbsVhdl.ShareText }
ListSharedText :: { [SharedText] }
ListSharedText : {- empty -} { [] }
               | ListSharedText SharedText { flip (:) $1 $2 }
Value_expression :: { Value_expression }
Value_expression : Expression { AbsVhdl.Value_expression $1 }
Wait_statement :: { Wait_statement }
Wait_statement : ListLabel 'WAIT' ListSensitivity_clause ListCondition_clause ListTimeout_clause ';' { AbsVhdl.Wait_statement $1 (reverse $3) (reverse $4) (reverse $5) }
Waveform :: { Waveform }
Waveform : ListWaveform_element { AbsVhdl.Waveform1 $1 }
         | 'UNAFFECTED' { AbsVhdl.Waveform_UNAFFECTED }
Waveform_element :: { Waveform_element }
Waveform_element : Value_expression ListAfterTime { AbsVhdl.Waveform_element1 $1 $2 }
                 | 'NULL' ListAfterTime { AbsVhdl.Waveform_element2 $2 }
AfterTime :: { AfterTime }
AfterTime : 'AFTER' Time_expression { AbsVhdl.AfterTime $2 }
Architecture_declarative_part :: { Architecture_declarative_part }
Architecture_declarative_part : ListBlock_declarative_item { AbsVhdl.Architecture_declarative_part (reverse $1) }
Architecture_statement_part :: { Architecture_statement_part }
Architecture_statement_part : ListConcurrent_statement { AbsVhdl.Architecture_statement_part $1 }
ListConcurrent_statement :: { [Concurrent_statement] }
ListConcurrent_statement : {- empty -} { [] }
                         | Concurrent_statement ListConcurrent_statement { (:) $1 $2 }
                         | {- empty -} { [] }
                         | Concurrent_statement ListConcurrent_statement { (:) $1 $2 }
ListBlock_declarative_item :: { [Block_declarative_item] }
ListBlock_declarative_item : {- empty -} { [] }
                           | ListBlock_declarative_item Block_declarative_item { flip (:) $1 $2 }
ListSign :: { [Sign] }
ListSign : {- empty -} { [] } | ListSign Sign { flip (:) $1 $2 }
ListAddOpTem :: { [AddOpTem] }
ListAddOpTem : {- empty -} { [] }
             | ListAddOpTem AddOpTem { flip (:) $1 $2 }
ListGraphic_character :: { [Graphic_character] }
ListGraphic_character : {- empty -} { [] }
                      | Graphic_character ListGraphic_character { (:) $1 $2 }
                      | Graphic_character { (:[]) $1 }
                      | Graphic_character ListGraphic_character { (:) $1 $2 }
ListSubprogram_kind :: { [Subprogram_kind] }
ListSubprogram_kind : {- empty -} { [] }
                    | ListSubprogram_kind Subprogram_kind { flip (:) $1 $2 }
ListDesignator :: { [Designator] }
ListDesignator : {- empty -} { [] }
               | ListDesignator Designator { flip (:) $1 $2 }
ListSubprogram_declarative_item :: { [Subprogram_declarative_item] }
ListSubprogram_declarative_item : {- empty -} { [] }
                                | ListSubprogram_declarative_item Subprogram_declarative_item { flip (:) $1 $2 }
ListFormal_parameter_listPar :: { [Formal_parameter_listPar] }
ListFormal_parameter_listPar : {- empty -} { [] }
                             | ListFormal_parameter_listPar Formal_parameter_listPar { flip (:) $1 $2 }
ListPureImpure :: { [PureImpure] }
ListPureImpure : {- empty -} { [] }
               | ListPureImpure PureImpure { flip (:) $1 $2 }
ListSequential_statement :: { [Sequential_statement] }
ListSequential_statement : {- empty -} { [] }
                         | ListSequential_statement Sequential_statement { flip (:) $1 $2 }
ListResolution_function_name :: { [Resolution_function_name] }
ListResolution_function_name : {- empty -} { [] }
                             | ListResolution_function_name Resolution_function_name { flip (:) $1 $2 }
ListConstraint :: { [Constraint] }
ListConstraint : {- empty -} { [] }
               | ListConstraint Constraint { flip (:) $1 $2 }
ListFacMulFac :: { [FacMulFac] }
ListFacMulFac : {- empty -} { [] }
              | ListFacMulFac FacMulFac { flip (:) $1 $2 }
ListIndex_subtype_definition :: { [Index_subtype_definition] }
ListIndex_subtype_definition : {- empty -} { [] }
                             | Index_subtype_definition { (:[]) $1 }
                             | Index_subtype_definition ',' ListIndex_subtype_definition { (:) $1 $3 }
ListSelected_name :: { [Selected_name] }
ListSelected_name : Selected_name { (:[]) $1 }
                  | Selected_name ',' ListSelected_name { (:) $1 $3 }
ListSensitivity_clause :: { [Sensitivity_clause] }
ListSensitivity_clause : {- empty -} { [] }
                       | ListSensitivity_clause Sensitivity_clause { flip (:) $1 $2 }
ListCondition_clause :: { [Condition_clause] }
ListCondition_clause : {- empty -} { [] }
                     | ListCondition_clause Condition_clause { flip (:) $1 $2 }
ListTimeout_clause :: { [Timeout_clause] }
ListTimeout_clause : {- empty -} { [] }
                   | ListTimeout_clause Timeout_clause { flip (:) $1 $2 }
ListWaveform_element :: { [Waveform_element] }
ListWaveform_element : Waveform_element { (:[]) $1 }
                     | Waveform_element ',' ListWaveform_element { (:) $1 $3 }
ListAfterTime :: { [AfterTime] }
ListAfterTime : {- empty -} { [] }
              | AfterTime { (:[]) $1 }
              | AfterTime ',' ListAfterTime { (:) $1 $3 }
ListChoiceAssign :: { [ChoiceAssign] }
ListChoiceAssign : {- empty -} { [] }
                 | ListChoiceAssign ChoiceAssign { flip (:) $1 $2 }
ListSignature :: { [Signature] }
ListSignature : {- empty -} { [] }
              | ListSignature Signature { flip (:) $1 $2 }
ListSubtype_indication :: { [Subtype_indication] }
ListSubtype_indication : {- empty -} { [] }
                       | Subtype_indication { (:[]) $1 }
                       | Subtype_indication ';' ListSubtype_indication { (:) $1 $3 }
MaybeREPORT :: { MaybeREPORT }
MaybeREPORT : 'REPORT' Expression { AbsVhdl.MaybeREPORT1 $2 }
            | {- empty -} { AbsVhdl.MaybeREPORT2 }
ListMaybeREPORT :: { [MaybeREPORT] }
ListMaybeREPORT : {- empty -} { [] }
                | ListMaybeREPORT MaybeREPORT { flip (:) $1 $2 }
MaybeSEVERITY :: { MaybeSEVERITY }
MaybeSEVERITY : 'SEVERITY' Expression { AbsVhdl.MaybeSEVERITY1 $2 }
              | {- empty -} { AbsVhdl.MaybeSEVERITY2 }
ListMaybeSEVERITY :: { [MaybeSEVERITY] }
ListMaybeSEVERITY : {- empty -} { [] }
                  | ListMaybeSEVERITY MaybeSEVERITY { flip (:) $1 $2 }
ListLabel :: { [Label] }
ListLabel : {- empty -} { [] }
          | Label { (:[]) $1 }
          | Label ':' ListLabel { (:) $1 $3 }
ListFormal_part :: { [Formal_part] }
ListFormal_part : {- empty -} { [] }
                | Formal_part { (:[]) $1 }
                | Formal_part '=>' ListFormal_part { (:) $1 $3 }
ListAssociation_element :: { [Association_element] }
ListAssociation_element : {- empty -} { [] }
                        | ListAssociation_element Association_element ',' { flip (:) $1 $2 }
ListUnderline :: { [Underline] }
ListUnderline : {- empty -} { [] }
              | ListUnderline Underline { flip (:) $1 $2 }
ListExtended_digit :: { [Extended_digit] }
ListExtended_digit : {- empty -} { [] }
                   | Extended_digit { (:[]) $1 }
                   | Extended_digit '_' ListExtended_digit { (:) $1 $3 }
ListExpressPar :: { [ExpressPar] }
ListExpressPar : {- empty -} { [] }
               | ListExpressPar ExpressPar { flip (:) $1 $2 }
Base_specifier :: { Base_specifier }
Base_specifier : 'B' { AbsVhdl.Base_specifier_B }
               | 'O' { AbsVhdl.Base_specifier_O }
               | 'X' { AbsVhdl.Base_specifier_X }
ListExponent :: { [Exponent] }
ListExponent : {- empty -} { [] }
             | ListExponent Exponent { flip (:) $1 $2 }
ListBased_integer :: { [Based_integer] }
ListBased_integer : {- empty -} { [] }
                  | ListBased_integer Based_integer '.' { flip (:) $1 $2 }
Basic_character :: { Basic_character }
Basic_character : Basic_graphic_character { AbsVhdl.Basic_characterBasic_graphic_character $1 }
                | Format_effector { AbsVhdl.Basic_characterFormat_effector $1 }
Format_effector :: { Format_effector }
Format_effector : 'Format_effector' { AbsVhdl.Format_effector }
Basic_graphic_character :: { Basic_graphic_character }
Basic_graphic_character : Upper_case_letter { AbsVhdl.Basic_graphic_characterUpper_case_letter $1 }
                        | Digit { AbsVhdl.Basic_graphic_characterDigit $1 }
                        | Special_character { AbsVhdl.Basic_graphic_characterSpecial_character $1 }
                        | Space_character { AbsVhdl.Basic_graphic_characterSpace_character $1 }
ListGeneric_map_aspect :: { [Generic_map_aspect] }
ListGeneric_map_aspect : {- empty -} { [] }
                       | ListGeneric_map_aspect Generic_map_aspect { flip (:) $1 $2 }
ListPort_map_aspect :: { [Port_map_aspect] }
ListPort_map_aspect : {- empty -} { [] }
                    | ListPort_map_aspect Port_map_aspect { flip (:) $1 $2 }
ListConfiguration_item :: { [Configuration_item] }
ListConfiguration_item : {- empty -} { [] }
                       | ListConfiguration_item Configuration_item { flip (:) $1 $2 }
ListGeneric_clause_Map :: { [Generic_clause_Map] }
ListGeneric_clause_Map : {- empty -} { [] }
                       | Generic_clause_Map ListGeneric_clause_Map { (:) $1 $2 }
                       | {- empty -} { [] }
                       | Generic_clause_Map ListGeneric_clause_Map { (:) $1 $2 }
ListGeneric_map_aspectSemi :: { [Generic_map_aspectSemi] }
ListGeneric_map_aspectSemi : {- empty -} { [] }
                           | ListGeneric_map_aspectSemi Generic_map_aspectSemi { flip (:) $1 $2 }
ListPort_map_aspectSemi :: { [Port_map_aspectSemi] }
ListPort_map_aspectSemi : {- empty -} { [] }
                        | ListPort_map_aspectSemi Port_map_aspectSemi { flip (:) $1 $2 }
ListGuard_expressionPar :: { [Guard_expressionPar] }
ListGuard_expressionPar : {- empty -} { [] }
                        | ListGuard_expressionPar Guard_expressionPar { flip (:) $1 $2 }
ListIS :: { [IS] }
ListIS : {- empty -} { [] } | ListIS IS { flip (:) $1 $2 }
ListBlock_label :: { [Block_label] }
ListBlock_label : {- empty -} { [] }
                | ListBlock_label Block_label { flip (:) $1 $2 }
ListCase_label :: { [Case_label] }
ListCase_label : {- empty -} { [] }
               | ListCase_label Case_label { flip (:) $1 $2 }
ListCase_labelColon :: { [Case_labelColon] }
ListCase_labelColon : {- empty -} { [] }
                    | ListCase_labelColon Case_labelColon { flip (:) $1 $2 }
ListCase_statement_alternative :: { [Case_statement_alternative] }
ListCase_statement_alternative : {- empty -} { [] }
                               | ListCase_statement_alternative Case_statement_alternative { flip (:) $1 $2 }
ListChoice :: { [Choice] }
ListChoice : Choice { (:[]) $1 } | Choice ListChoice { (:) $1 $2 }
ListBinding_indication :: { [Binding_indication] }
ListBinding_indication : {- empty -} { [] }
                       | ListBinding_indication Binding_indication ';' { flip (:) $1 $2 }
ListBlock_configuration :: { [Block_configuration] }
ListBlock_configuration : {- empty -} { [] }
                        | ListBlock_configuration Block_configuration { flip (:) $1 $2 }
ListLocal_generic_clause :: { [Local_generic_clause] }
ListLocal_generic_clause : {- empty -} { [] }
                         | ListLocal_generic_clause Local_generic_clause { flip (:) $1 $2 }
Local_generic_clause :: { Local_generic_clause }
Local_generic_clause : Generic_clause { AbsVhdl.Local_generic_clause $1 }
Special_character :: { Special_character }
Special_character : '$' { AbsVhdl.Special_character }
Space_character :: { Space_character }
Space_character : ' ' { AbsVhdl.Space_character }
ListLocal_port_clause :: { [Local_port_clause] }
ListLocal_port_clause : {- empty -} { [] }
                      | ListLocal_port_clause Local_port_clause { flip (:) $1 $2 }
ListMaybePOSTPONED :: { [MaybePOSTPONED] }
ListMaybePOSTPONED : {- empty -} { [] }
                   | ListMaybePOSTPONED MaybePOSTPONED { flip (:) $1 $2 }
ListWhenCondition :: { [WhenCondition] }
ListWhenCondition : {- empty -} { [] }
                  | ListWhenCondition WhenCondition { flip (:) $1 $2 }
ListWaveformElse :: { [WaveformElse] }
ListWaveformElse : {- empty -} { [] }
                 | WaveformElse ListWaveformElse { (:) $1 $2 }
                 | {- empty -} { [] }
                 | WaveformElse ListWaveformElse { (:) $1 $2 }
ListMaybeCONFIGURATION :: { [MaybeCONFIGURATION] }
ListMaybeCONFIGURATION : {- empty -} { [] }
                       | ListMaybeCONFIGURATION MaybeCONFIGURATION { flip (:) $1 $2 }
ListConfiguration_simple_name :: { [Configuration_simple_name] }
ListConfiguration_simple_name : {- empty -} { [] }
                              | ListConfiguration_simple_name Configuration_simple_name { flip (:) $1 $2 }
ListConfiguration_declarative_item :: { [Configuration_declarative_item] }
ListConfiguration_declarative_item : {- empty -} { [] }
                                   | ListConfiguration_declarative_item Configuration_declarative_item { flip (:) $1 $2 }
ListVarAssign :: { [VarAssign] }
ListVarAssign : {- empty -} { [] }
              | ListVarAssign VarAssign { flip (:) $1 $2 }
ListContext_item :: { [Context_item] }
ListContext_item : {- empty -} { [] }
                 | ListContext_item Context_item { flip (:) $1 $2 }
ListIndex_specificationPar :: { [Index_specificationPar] }
ListIndex_specificationPar : {- empty -} { [] }
                           | ListIndex_specificationPar Index_specificationPar { flip (:) $1 $2 }
ListDotInt :: { [DotInt] }
ListDotInt : {- empty -} { [] }
           | ListDotInt DotInt { flip (:) $1 $2 }
ListECArrows :: { [ECArrows] }
ListECArrows : {- empty -} { [] }
             | ListECArrows ECArrows { flip (:) $1 $2 }
ListEntity_class_entry :: { [Entity_class_entry] }
ListEntity_class_entry : Entity_class_entry { (:[]) $1 }
                       | Entity_class_entry ',' ListEntity_class_entry { (:) $1 $3 }
ListEntity_simple_name :: { [Entity_simple_name] }
ListEntity_simple_name : {- empty -} { [] }
                       | ListEntity_simple_name Entity_simple_name { flip (:) $1 $2 }
ListBEGINEntity_statement_part :: { [BEGINEntity_statement_part] }
ListBEGINEntity_statement_part : {- empty -} { [] }
                               | ListBEGINEntity_statement_part BEGINEntity_statement_part { flip (:) $1 $2 }
ListENTITYText :: { [ENTITYText] }
ListENTITYText : {- empty -} { [] }
               | ListENTITYText ENTITYText { flip (:) $1 $2 }
ListEntity_declarative_item :: { [Entity_declarative_item] }
ListEntity_declarative_item : {- empty -} { [] }
                            | ListEntity_declarative_item Entity_declarative_item { flip (:) $1 $2 }
ListFormal_generic_clause :: { [Formal_generic_clause] }
ListFormal_generic_clause : {- empty -} { [] }
                          | ListFormal_generic_clause Formal_generic_clause { flip (:) $1 $2 }
ListFormal_port_clause :: { [Formal_port_clause] }
ListFormal_port_clause : {- empty -} { [] }
                       | ListFormal_port_clause Formal_port_clause { flip (:) $1 $2 }
ListEntity_designator :: { [Entity_designator] }
ListEntity_designator : Entity_designator { (:[]) $1 }
                      | Entity_designator ListEntity_designator { (:) $1 $2 }
ListEntity_statement :: { [Entity_statement] }
ListEntity_statement : {- empty -} { [] }
                     | ListEntity_statement Entity_statement { flip (:) $1 $2 }
ListEnumeration_literal :: { [Enumeration_literal] }
ListEnumeration_literal : Enumeration_literal { (:[]) $1 }
                        | Enumeration_literal ',' ListEnumeration_literal { (:) $1 $3 }
ListLoop_label :: { [Loop_label] }
ListLoop_label : {- empty -} { [] }
               | Loop_label { (:[]) $1 }
               | Loop_label ',' ListLoop_label { (:) $1 $3 }
ListPlusOp :: { [PlusOp] }
ListPlusOp : {- empty -} { [] }
           | ListPlusOp PlusOp { flip (:) $1 $2 }
ListPrimary :: { [Primary] }
ListPrimary : Primary { (:[]) $1 }
            | Primary '**' ListPrimary { (:) $1 $3 }
ListOPENFile :: { [OPENFile] }
ListOPENFile : {- empty -} { [] }
             | ListOPENFile OPENFile { flip (:) $1 $2 }
ListActual_parameter_partPar :: { [Actual_parameter_partPar] }
ListActual_parameter_partPar : {- empty -} { [] }
                             | ListActual_parameter_partPar Actual_parameter_partPar { flip (:) $1 $2 }
ListBEGINBlock_declarative_item :: { [BEGINBlock_declarative_item] }
ListBEGINBlock_declarative_item : {- empty -} { [] }
                                | ListBEGINBlock_declarative_item BEGINBlock_declarative_item { flip (:) $1 $2 }
ListGenerate_label :: { [Generate_label] }
ListGenerate_label : {- empty -} { [] }
                   | ListGenerate_label Generate_label { flip (:) $1 $2 }
ListGroup_constituent :: { [Group_constituent] }
ListGroup_constituent : Group_constituent { (:[]) $1 }
                      | Group_constituent ',' ListGroup_constituent { (:) $1 $3 }
ListIdentifier :: { [Identifier] }
ListIdentifier : Identifier { (:[]) $1 }
               | Identifier ',' ListIdentifier { (:) $1 $3 }
ListIf_label :: { [If_label] }
ListIf_label : {- empty -} { [] }
             | If_label { (:[]) $1 }
             | If_label ',' ListIf_label { (:) $1 $3 }
ListIf_labelColon :: { [If_labelColon] }
ListIf_labelColon : {- empty -} { [] }
                  | If_labelColon { (:[]) $1 }
                  | If_labelColon ',' ListIf_labelColon { (:) $1 $3 }
ListELSEIFStatement :: { [ELSEIFStatement] }
ListELSEIFStatement : {- empty -} { [] }
                    | ListELSEIFStatement ELSEIFStatement { flip (:) $1 $2 }
ListELSEStatement :: { [ELSEStatement] }
ListELSEStatement : {- empty -} { [] }
                  | ListELSEStatement ELSEStatement { flip (:) $1 $2 }
ListDiscrete_range :: { [Discrete_range] }
ListDiscrete_range : Discrete_range { (:[]) $1 }
                   | Discrete_range ',' ListDiscrete_range { (:) $1 $3 }
ListExpression :: { [Expression] }
ListExpression : Expression { (:[]) $1 }
               | Expression ',' ListExpression { (:) $1 $3 }
               | {- empty -} { [] }
               | Expression ListExpression { (:) $1 $2 }
ListCOMPONENTText :: { [COMPONENTText] }
ListCOMPONENTText : {- empty -} { [] }
                  | ListCOMPONENTText COMPONENTText { flip (:) $1 $2 }
ListArchitecture_identifierPar :: { [Architecture_identifierPar] }
ListArchitecture_identifierPar : {- empty -} { [] }
                               | ListArchitecture_identifierPar Architecture_identifierPar { flip (:) $1 $2 }
ListInstantiation_label :: { [Instantiation_label] }
ListInstantiation_label : Instantiation_label { (:[]) $1 }
                        | Instantiation_label ',' ListInstantiation_label { (:) $1 $3 }
ListConstantText :: { [ConstantText] }
ListConstantText : {- empty -} { [] }
                 | ListConstantText ConstantText { flip (:) $1 $2 }
ListInText :: { [InText] }
ListInText : {- empty -} { [] }
           | ListInText InText { flip (:) $1 $2 }
ListStatic_expressionAssign :: { [Static_expressionAssign] }
ListStatic_expressionAssign : {- empty -} { [] }
                            | ListStatic_expressionAssign Static_expressionAssign { flip (:) $1 $2 }
ListInterface_element :: { [Interface_element] }
ListInterface_element : Interface_element { (:[]) $1 }
                      | Interface_element ';' ListInterface_element { (:) $1 $3 }
                      | {- empty -} { [] }
                      | Interface_element { (:[]) $1 }
                      | Interface_element ';' ListInterface_element { (:) $1 $3 }
ListSIGNALText :: { [SIGNALText] }
ListSIGNALText : {- empty -} { [] }
               | ListSIGNALText SIGNALText { flip (:) $1 $2 }
ListBUSText :: { [BUSText] }
ListBUSText : {- empty -} { [] }
            | ListBUSText BUSText { flip (:) $1 $2 }
ListMode :: { [Mode] }
ListMode : {- empty -} { [] } | ListMode Mode { flip (:) $1 $2 }
ListLogical_name :: { [Logical_name] }
ListLogical_name : Logical_name { (:[]) $1 }
                 | Logical_name ',' ListLogical_name { (:) $1 $3 }
ListLoopLabelColon :: { [LoopLabelColon] }
ListLoopLabelColon : {- empty -} { [] }
                   | LoopLabelColon { (:[]) $1 }
                   | LoopLabelColon ':' ListLoopLabelColon { (:) $1 $3 }
ListIteration_scheme :: { [Iteration_scheme] }
ListIteration_scheme : {- empty -} { [] }
                     | ListIteration_scheme Iteration_scheme { flip (:) $1 $2 }
ListGUARDEDtext :: { [GUARDEDtext] }
ListGUARDEDtext : {- empty -} { [] }
                | ListGUARDEDtext GUARDEDtext { flip (:) $1 $2 }
ListDelay_mechanism :: { [Delay_mechanism] }
ListDelay_mechanism : {- empty -} { [] }
                    | ListDelay_mechanism Delay_mechanism { flip (:) $1 $2 }
ListPackageBodytext :: { [PackageBodytext] }
ListPackageBodytext : {- empty -} { [] }
                    | ListPackageBodytext PackageBodytext { flip (:) $1 $2 }
ListPackage_simple_name :: { [Package_simple_name] }
ListPackage_simple_name : {- empty -} { [] }
                        | ListPackage_simple_name Package_simple_name { flip (:) $1 $2 }
ListPackage_body_declarative_item :: { [Package_body_declarative_item] }
ListPackage_body_declarative_item : {- empty -} { [] }
                                  | ListPackage_body_declarative_item Package_body_declarative_item { flip (:) $1 $2 }
ListPackagetext :: { [Packagetext] }
ListPackagetext : {- empty -} { [] }
                | Packagetext ListPackagetext { (:) $1 $2 }
                | {- empty -} { [] }
                | Packagetext ListPackagetext { (:) $1 $2 }
ListAbstract_literal :: { [Abstract_literal] }
ListAbstract_literal : {- empty -} { [] }
                     | ListAbstract_literal Abstract_literal { flip (:) $1 $2 }
ListSecondary_unit_declaration :: { [Secondary_unit_declaration] }
ListSecondary_unit_declaration : {- empty -} { [] }
                               | ListSecondary_unit_declaration Secondary_unit_declaration { flip (:) $1 $2 }
ListPhysical_type_simple_name :: { [Physical_type_simple_name] }
ListPhysical_type_simple_name : {- empty -} { [] }
                              | ListPhysical_type_simple_name Physical_type_simple_name { flip (:) $1 $2 }
ListProcess_declarative_item :: { [Process_declarative_item] }
ListProcess_declarative_item : {- empty -} { [] }
                             | ListProcess_declarative_item Process_declarative_item { flip (:) $1 $2 }
ListSensitivity_list :: { [Sensitivity_list] }
ListSensitivity_list : {- empty -} { [] }
                     | Sensitivity_list ListSensitivity_list { (:) $1 $2 }
                     | {- empty -} { [] }
                     | Sensitivity_list ListSensitivity_list { (:) $1 $2 }
ListProcess_labelColon :: { [Process_labelColon] }
ListProcess_labelColon : {- empty -} { [] }
                       | ListProcess_labelColon Process_labelColon { flip (:) $1 $2 }
ListProcess_label :: { [Process_label] }
ListProcess_label : {- empty -} { [] }
                  | ListProcess_label Process_label { flip (:) $1 $2 }
ListElement_declaration :: { [Element_declaration] }
ListElement_declaration : Element_declaration { (:[]) $1 }
                        | Element_declaration ListElement_declaration { (:) $1 $2 }
ListReShift :: { [ReShift] }
ListReShift : {- empty -} { [] }
            | ListReShift ReShift { flip (:) $1 $2 }
ListWaveChoice :: { [WaveChoice] }
ListWaveChoice : WaveChoice { (:[]) $1 }
               | WaveChoice ',' ListWaveChoice { (:) $1 $3 }
ListSignal_name :: { [Signal_name] }
ListSignal_name : Signal_name { (:[]) $1 }
                | Signal_name ',' ListSignal_name { (:) $1 $3 }
ListSequence_of_statements :: { [Sequence_of_statements] }
ListSequence_of_statements : {- empty -} { [] }
                           | ListSequence_of_statements Sequence_of_statements { flip (:) $1 $2 }
ListShift_operatorSimple_expressionText :: { [Shift_operatorSimple_expressionText] }
ListShift_operatorSimple_expressionText : {- empty -} { [] }
                                        | ListShift_operatorSimple_expressionText Shift_operatorSimple_expressionText { flip (:) $1 $2 }
ListSignal_kind :: { [Signal_kind] }
ListSignal_kind : {- empty -} { [] }
                | ListSignal_kind Signal_kind { flip (:) $1 $2 }
ListVARIABLEText :: { [VARIABLEText] }
ListVARIABLEText : {- empty -} { [] }
                 | ListVARIABLEText VARIABLEText { flip (:) $1 $2 }
ListReturnType :: { [ReturnType] }
ListReturnType : {- empty -} { [] }
               | ListReturnType ReturnType { flip (:) $1 $2 }
ListType_mark :: { [Type_mark] }
ListType_mark : {- empty -} { [] }
              | Type_mark { (:[]) $1 }
              | Type_mark ';' ListType_mark { (:) $1 $3 }
ListTypeRe :: { [TypeRe] }
ListTypeRe : {- empty -} { [] }
           | ListTypeRe TypeRe { flip (:) $1 $2 }
ListPackage_declarative_item :: { [Package_declarative_item] }
ListPackage_declarative_item : {- empty -} { [] }
                             | ListPackage_declarative_item Package_declarative_item { flip (:) $1 $2 }
ListSensitivity_listPar :: { [Sensitivity_listPar] }
ListSensitivity_listPar : {- empty -} { [] }
                        | ListSensitivity_listPar Sensitivity_listPar { flip (:) $1 $2 }
ListSevExp :: { [SevExp] }
ListSevExp : {- empty -} { [] }
           | ListSevExp SevExp { flip (:) $1 $2 }
ListFileMatch :: { [FileMatch] }
ListFileMatch : {- empty -} { [] }
              | ListFileMatch FileMatch { flip (:) $1 $2 }
ListComponent_simple_name :: { [Component_simple_name] }
ListComponent_simple_name : {- empty -} { [] }
                          | ListComponent_simple_name Component_simple_name { flip (:) $1 $2 }
ListPort_clause_map :: { [Port_clause_map] }
ListPort_clause_map : {- empty -} { [] }
                    | ListPort_clause_map Port_clause_map { flip (:) $1 $2 }
ListIntAccuum :: { [IntAccuum] }
ListIntAccuum : {- empty -} { [] }
              | ListIntAccuum IntAccuum { flip (:) $1 $2 }
ListRecord_type_simple_name :: { [Record_type_simple_name] }
ListRecord_type_simple_name : {- empty -} { [] }
                            | ListRecord_type_simple_name Record_type_simple_name { flip (:) $1 $2 }
{

returnM :: a -> Err a
returnM = return

thenM :: Err a -> (a -> Err b) -> Err b
thenM = (>>=)

happyError :: [Token] -> Err a
happyError ts =
  Bad $ "syntax error at " ++ tokenPos ts ++ 
  case ts of
    [] -> []
    [Err _] -> " due to lexer error"
    _ -> " before " ++ unwords (map (id . prToken) (take 4 ts))

myLexer = tokens
}

