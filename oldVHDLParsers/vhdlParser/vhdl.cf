rules Abstract_literal ::= Decimal_literal | Based_literal ;

Access_type_definition . Access_type_definition ::= "ACCESS" Subtype_indication ;

rules Actual_designator ::= Expression
                          | Signal_name
                          | Variable_name
                          | File_name
                          | "OPEN" ;

Actual_parameter_part . Actual_parameter_part ::= Parameter_association_list ;

rules Actual_part ::= Actual_designator
                      | Function_name "(" Actual_designator ")"
                      | Type_mark "(" Actual_designator ")" ;

rules Adding_operator ::= "+" | "-"  | "&" ;


-- Was Aggregate
[Element_association] ::= ;
[Element_association] ::= Element_association "","" [Element_association] ;
Aggregate . Aggregate ::= "(" [Element_association] ")" ;


Alias_declaration . Alias_declaration ::= "ALIAS" Alias_designator [Subtype_indication] "IS" Name [ Signature ] ";" ;
seperator Subtype_indication ";" ; 
seperator Signature "" ; 


rules Alias_designator ::= Identifier | Character_literal | Operator_symbol ;

rules Allocator ::= "NEW" Subtype_indication | "NEW" Qualified_expression ;

Architecture_body . Architecture_body ::=
  "ARCHITECTURE" Identifier "OF" Entity_name "IS"
    Architecture_declarative_part
  "BEGIN"
    Architecture_statement_part
  "END" MaybeArch MaybeArchitecture_simple_name ";" ;
rules MaybeArch ::= "ARCHITECTURE" | ;
rules MaybeArchitecture_simple_name ::= Architecture_simple_name | ;

Architecture_declarative_part . Architecture_declarative_part ::= [Block_declarative_item ] ; 
[Block_declarative_item] ::= ;
[Block_declarative_item] ::= Block_declarative_item [Block_declarative_item] ;

Architecture_statement_part . Architecture_statement_part ::= [Concurrent_statement] ;
[Concurrent_statement] ::= ;
[Concurrent_statement] ::= Concurrent_statement [Concurrent_statement] ;


rules Array_type_definition ::= Unconstrained_array_definition  |   Constrained_array_definition ;

Assertion . Assertion ::=
  "ASSERT" Condition
    [MaybeREPORT]
    [MaybeSEVERITY] ;
rules MaybeREPORT = "REPORT" Expression | ;
seperator MaybeREPORT;
rules MaybeSEVERITY = "SEVERITY" Expression | ;
seperator MaybeSEVERITY;

Assertion_statement ::= [ label ] Assertion ;
seperator Label ":" ;

Association_element . Association_element ::= [Formal_part] Actual_part ;
seperator Formal_part "=>";

Association_list . Association_list ::= [Association_element]
terminator Association_element "," ;

Attribute_declaration . Attribute_declaration ::= "ATTRIBUTE" Identifier ":" Type_mark ";" ; 

Attribute_designator . Attribute_designator ::= Attribute_simple_name ;

Attribute_name . Attribute_name ::= Prefix [ Signature ] "'" Attribute_designator [ ExpressPar ] ; 
ExpressPar . ExpressPar ::= "(" Expression ")" ;
seperator ExpressPar "" ; 

Attribute_specification . Attribute_specification ::= "ATTRIBUTE" Attribute_designator "OF" Entity_specification "IS" Expression ";" ;

Base . Base ::= Integer ;

rules Base_specifier ::= "B" | "O" | "X" ;

Base_unit_declaration . Base_unit_declaration ::= Identifier ";" ;

Based_integer . Based_integer ::= [Extended_digit] ;
seperator Underline "" ;
terminator Extended_digit Underline ;

Based_literal . Based_literal ::= Base "#" [Based_integer] "#" [ Exponent ] ;
seperator Exponent "";
terminator Based_integer ".";

rules Basic_character ::= Basic_graphic_character | Format_effector ; 

rules Basic_graphic_character ::= Upper_case_letter | Digit | Special_character| Space_character ;

Basic_identifier . Basic_identifier ::= Ident ;
--was   Letter { [ Underline ] Letter_or_digit }

Binding_indication . Binding_indication ::=
  [ UseEntity ]
  [ Generic_map_aspect ]
  [ Port_map_aspect ] ;
UseEntity ::= "USE" Entity_aspect;
terminator UseEntity "";
terminator Generic_map_aspect "";
terminator Port_map_aspect "";


Bit_string_literal . Bit_string_literal ::= Base_specifier "\"" Bit_value "\"" ;

Bit_value . Bit_value ::= [Extended_digit] ;

Block_configuration . Block_configuration ::=
  "FOR" Block_specification
    [UseEntity]
    [Configuration_item]
  "END" "FOR" ";" ;
terminator UseEntity "";
terminator Configuration_item "";




rules Block_declarative_item ::=
  Subprogram_declaration
  | Subprogram_body
  | Type_declaration
  | Subtype_declaration
  | Constant_declaration
  | Signal_declaration
  | Shared_variable_declaration
  | File_declaration
  | Alias_declaration
  | Component_declaration
  | Attribute_declaration
  | Attribute_specification
  | Configuration_specification
  | Disconnection_specification
  | Use_clause
  | Group_template_declaration
  | Group_declaration ;

Block_declarative_part . Block_declarative_part ::= [Block_declarative_item];


Block_header . Block_header ::=
  [ Generic_clause_Map ]
  [ Port_clause_map] ;
Generic_clause_Map ::= Generic_clause [Generic_map_aspectSemi] ;
terminator  Generic_clause_Map "" ;
Generic_map_aspectSemi . Generic_map_aspectSemi = Generic_map_aspect ";"
terminator  Generic_map_aspectSemi "" ;
Port_clause_map ::= Port_clause [Port_map_aspectSemi] ;
terminator  Generic_clause_Map "" ;
Port_map_aspectSemi . Port_map_aspectSemi = Port_map_aspectSemi ";"
terminator  Port_map_aspectSemi "" ;

rules Block_specification ::=
  Architecture_name
  | Block_statement_label
  | Generate_statement_label Index_specificationPar
Index_specificationPar = "(" Index_specification ")" 
seperator Index_specificationPar "";

Block_statement . Block_statement ::=
  Block_label :
    "BLOCK" [Guard_expressionPar ] [ "IS" ]
      Block_header
      Block_declarative_part
    "BEGIN"
      Block_statement_part
    "END" "BLOCK" [ Block_label ] ";" ;
Guard_expressionPar = "(" Guard_expressionPar ")" ;
seperator Guard_expressionPar "";
IS . IS ::= "IS";
seperator IS "";
seperator Block_label "";


Block_statement_part . Block_statement_part ::= [Concurrent_statement] ;
seperator Concurrent_statement "" ;


Case_statement . Case_statement ::=
  [ Case_labelColon ]
    "CASE" Expression "IS"
      [Case_statement_alternative]
    "END" "CASE" [ Case_label ] ";"
Case_labelColon ::= Case_label ":" ;
seperator Case_label "" ;
seperator Case_labelColon "" ;
terminator Case_statement_alternative "" ;


Case_statement_alternative . Case_statement_alternative ::=
  "WHEN" Choices "=>"
    Sequence_of_statements ;

Character_literal . Character_literal ::= "'" Graphic_character "'" ;

rules Choice ::=
  Simple_expression
  | Discrete_range
  | Element_simple_name
  | "OTHERS" ;

Choices . Choices ::= [Choice] ;
seperator nonempty Choice "" ;

Component_configuration . Component_configuration ::=
  "FOR" Component_specification
    [ Binding_indication ]
    [ Block_configuration ]
  "END" "FOR" ";" ;
terminator Binding_indication ";" ;
terminator Block_configuration "" ;


Component_declaration . Component_declaration ::=
  "COMPONENT" Identifier [IS]
    [ Local_generic_clause ]
    [ Local_port_clause ]
  "END" "COMPONENT" [ Component_simple_name ] ";" ;
terminator Local_generic_clause "" ;
terminator Local_port_clause "" ;


Component_instantiation_statement . Component_instantiation_statement ::=
  Instantiation_label :
    Instantiated_unit
      [ Generic_map_aspect ]
      [ Port_map_aspect ] ";" ;

Component_specification . Component_specification ::=
  Instantiation_list ":" Component_name ;

rules Composite_type_definition ::=
  Array_type_definition
  | Record_type_definition ;

Concurrent_assertion_statement . Concurrent_assertion_statement ::=
  [ label ] [ MaybePOSTPONED ] Assertion ";"
MaybePOSTPONED . MaybePOSTPONED ::= "POSTPONED" ;
seperator MaybePOSTPONED "" ;

Concurrent_procedure_call_statement . Concurrent_procedure_call_statement ::=
  [ label ] [ MaybePOSTPONED ] Procedure_call ";" ;

rules Concurrent_signal_assignment_statement ::=
    [ label ] [ MaybePOSTPONED ] Conditional_signal_assignment
  | [ label ] [ MaybePOSTPONED ] Selected_signal_assignment ;

rules Concurrent_statement ::=
  Block_statement
  | Process_statement
  | Concurrent_procedure_call_statement
  | Concurrent_assertion_statement
  | Concurrent_signal_assignment_statement
  | Component_instantiation_statement
  | Generate_statement ;

Condition . Condition ::= Boolean_expression ;

Condition_clause . Condition_clause ::= "UNTIL" Condition ;

Conditional_signal_assignment . Conditional_signal_assignment ::=
  Target "<=" Options Conditional_waveforms ";" ;

Conditional_waveforms . Conditional_waveforms ::= [WaveformElse];
WaveformElse . WaveformElse = Waveform "WHEN" Condition "ELSE" ;
WaveformNoElse . WaveformElse = "Waveform" [WhenCondition] ;
WhenCondition . WhenCondition = "WHEN" Condition ;
terminator WhenCondition "";
terminator WaveformElse "";



Configuration_declaration . Configuration_declaration ::=
  "CONFIGURATION" Identifier "OF" Entity_name "IS"
    Configuration_declarative_part
    Block_configuration
  "END" [MaybeCONFIGURATION ] [ Configuration_simple_name ] ";" ;
MaybeCONFIGURATION . MaybeCONFIGURATION = "CONFIGURATION" ;
terminator MaybeCONFIGURATION "";
terminator WaveformElse "";
seperator Configuration_simple_name "" ;


rules Configuration_declarative_item ::=
  Use_clause
  | Attribute_specification
  | Group_declaration ; 

Configuration_declarative_part . Configuration_declarative_part ::= [Configuration_declarative_item] ;
terminator Configuration_declarative_item "";

rules Configuration_item ::=
  Block_configuration
  | Component_configuration ;

Configuration_specification . Configuration_specification ::=
  "FOR" Component_specification Binding_indication ";" ;

Constant_declaration . Constant_declaration ::=
  "CONSTANT" Identifier_list ":" Subtype_indication [ VarAssign ] ";" ;
VarAssign . VarAssign ::= ":=" Expression ;
seperator VarAssign "" ;


Constrained_array_definition . Constrained_array_definition ::=
  "ARRAY" Index_constraint "OF" Element_subtype_indication ;

rules Constraint ::=
  Range_constraint
  | Index_constraint ;

Context_clause . Context_clause ::= [ Context_item ] ;
terminator Context_item "";

rules Context_item ::=
  Library_clause
  | Use_clause ;

Decimal_literal . Decimal_literal ::= Integer [ DotInt ] [ Exponent ]
DotInt . DotInt ::= "." Integer  
seperator DotInt "" ;



rules Declaration ::=
  Type_declaration
  | Subtype_declaration
  | Object_declaration
  | Interface_declaration
  | Alias_declaration
  | Attribute_declaration
  | Component_declaration
  | Group_template_declaration
  | Group_declaration
  | Entity_declaration
  | Configuration_declaration
  | Subprogram_declaration
  | Package_declaration ; 

rules Delay_mechanism ::=
  "TRANSPORT"
  | [ MaybeRejectTime ] "INERTIAL" ; 
MaybeRejectTime . MaybeRejectTime ::= "REJECT" Time_expression ; 
terminator MaybeRejectTime "" ;


Design_file . Design_file ::= [Design_unit] ;
terminator nonempty  Design_unit "" ;

Design_unit . Design_unit ::= Context_clause Library_unit ;

rules Designator ::= Identifier | Operator_symbol ;

rules Direction ::= "TO" | "DOWNTO" ; 

Disconnection_specification . Disconnection_specification ::=
  "DISCONNECT" Guarded_signal_specification "AFTER" Time_expression ";" ;

Discrete_range . Discrete_range ::= Discrete_subtype_indication | Range ;
Discrete_subtype_indication . Discrete_subtype_indication ::= Subprogram_declarative_item  ;

Element_association . Element_association ::=
  [ ChoiceAssign ] Expression ;
ChoiceAssign . ChoiceAssign ::= Choices "=>" ;
seperator ChoiceAssign "" ;


Element_declaration . Element_declaration ::=
  Identifier_list ":" Element_subtype_definition ";" ; 

Element_subtype_definition . Element_subtype_definition ::= Subtype_indication ; 

rules Entity_aspect ::=
    "ENTITY" Entity_name [ ParArchitecture_identifier ]
  | "CONFIGURATION" Configuration_name
  | "OPEN" ;
ParArchitecture_identifier . ParArchitecture_identifier ::= "(" Architecture_identifier ")" ;
terminator nonempty  ParArchitecture_identifier "" ;


rules Entity_class ::=
  "ENTITY"       | "ARCHITECTURE"  | "CONFIGURATION"
  | "PROCEDURE"  | "FUNCTION"       | "PACKAGE"
  | "TYPE"       | "SUBTYPE"       | "CONSTANT"
  | "SIGNAL"     | "VARIABLE"       | "COMPONENT"
  | "LABEL"       | "LITERAL"       | "UNITS"
  | "GROUP"       | "FILE" ;

Entity_class_entry . Entity_class_entry ::= Entity_class [ ECArrows ] ; 
ECArrows . ECArrows ::= "<>" ;
seperator ECArrows "" ;

Entity_class_entry_list . Entity_class_entry_list ::= [ Entity_class_entry ] ;
seperator nonempty Entity_class_entry "," ;


Entity_declaration . Entity_declaration ::=
  "ENTITY" Identifier "IS"
    Entity_header
    Entity_declarative_part
      [ BEGINEntity_statement_part ]
  "END" [ ENTITYText ] [ Entity_simple_name ] ";" ;
seperator Entity_simple_name "" ;
BEGINEntity_statement_part . BEGINEntity_statement_part ::= "BEGIN" Entity_statement_part ;
seperator BEGINEntity_statement_part "" ;
ENTITYText . ENTITYText ::= "ENTITY" Entity_statement_part ;
seperator ENTITYText "" ;


rules Entity_declarative_item ::=
  Subprogram_declaration
  | Subprogram_body
  | Type_declaration
  | Subtype_declaration
  | Constant_declaration
  | Signal_declaration
  | Shared_variable_declaration
  | File_declaration
  | Alias_declaration
  | Attribute_declaration
  | Attribute_specification
  | Disconnection_specification
  | Use_clause
  | Group_template_declaration
  | Group_declaration ;

Entity_declarative_part . Entity_declarative_part ::= [ Entity_declarative_item ] ;
seperator Entity_declarative_item "";

Entity_designator . Entity_designator ::= Entity_tag [ Signature ] ;


Entity_header . Entity_header ::=
  [ Formal_generic_clause ]
  [ Formal_port_clause ] ;
seperator Formal_generic_clause "";
seperator Formal_port_clause "";


rules Entity_name_list ::= [ Entity_designator ] ;
  | "OTHERS"
  | "ALL" ;
seperator nonempty Entity_designator "";


Entity_specification . Entity_specification ::=
  Entity_name_list ":" Entity_class ;

rules Entity_statement ::=
  Concurrent_assertion_statement
  | Passive_concurrent_procedure_call_statement
  | Passive_process_statement ;

Entity_statement_part . Entity_statement_part ::= [Entity_statement] ;
seperator Entity_statement "";


rules Entity_tag ::=  Simple_name | Character_literal | Operator_symbol ;

rules Enumeration_literal ::= Identifier | Character_literal ;

Enumeration_type_definition . Enumeration_type_definition ::= "(" [Enumeration_literal] ")" ;
seperator nonempty Enumeration_literal ",";

Exit_statement . Exit_statement ::=
  [ label ] "EXIT" [ Loop_label ] [ WhenCondition ] ";" ;
seperator Loop_label ",";


rules Exponent ::= "E" PlusOp Integer | "E" "-" Integer ;
PlusOp . PlusOp ::= "+" ;
seperator PlusOp "" ;

rules Expression ::= Relation ExpOps Relation | Relation ;
rules ExpOps ::= "AND" |"OR"  |"XOR" |"NAND" |"NOR" |"XNOR" ;

rules Extended_digit ::= Digit | Letter ;

Extended_identifier . Extended_identifier ::= [Graphic_character] ;
seperator nonempty Graphic_character "";

rules Factor ::=
  [Primary]
  | "ABS" Primary
  | "NOT" Primary ;
seperator nonempty Primary "**";

File_declaration . File_declaration ::= [FileMatch] ";" ;
FileMatch . FileMatch ::= "FILE" Identifier_list ":" Subtype_indication File_open_information ;

File_logical_name . File_logical_name ::= String_expression ;

File_open_information . File_open_information ::=
  [ OPENFile ] "IS" File_logical_name ;
OPENFile . OPENFile ::= "OPEN" File_open_kind_expression ;
seperator OPENFile "";

File_type_definition . File_type_definition ::=
  "FILE"  "OF" Type_mark ;

Floating_type_definition . Floating_type_definition ::=  Range_constraint ;

rules Formal_designator ::=
  Generic_name
  | Port_name
  | Parameter_name ;

Formal_parameter_list . Formal_parameter_list ::= Parameter_interface_list ;

rules Formal_part ::=
  Formal_designator
  | Function_name "(" Formal_designator ")"
  | Type_mark "(" Formal_designator ")" ;

Full_type_declaration . Full_type_declaration ::=
  "TYPE" Identifier "IS" Type_definition ";" ;

Function_call . Function_call ::=
  Function_name [ Actual_parameter_partPar ] ;
Actual_parameter_partPar . Actual_parameter_partPar ::= "(" Actual_parameter_part ")" ;
seperator Actual_parameter_partPar "" ;


Generate_statement . Generate_statement ::=
  Generate_label ":"
    Generation_scheme "GENERATE"
      [ BEGINBlock_declarative_item ]
      [Concurrent_statement]
    "END" "GENERATE" [ Generate_label ] ";" ;
BEGINBlock_declarative_item ::= [Block_declarative_item ] "BEGIN" 
seperator BEGINBlock_declarative_item "" ;
seperator Generate_label "" ;


rules Generation_scheme ::=
  "FOR" Generate_parameter_specification
  | "IF" Condition ;
Generate_parameter_specification . Generate_parameter_specification ::= Parameter_specification ;
Generic_clause . Generic_clause ::=
  "GENERIC" "(" Generic_list ")" ";" ;

Generic_list . Generic_list ::= Generic_interface_list ;

Generic_map_aspect . Generic_map_aspect ::=
  "GENERIC" "MAP" "(" Generic_association_list ")" ;

rules Graphic_character ::=
  Basic_graphic_character | Lower_case_letter | Other_special_character ;

rules Group_constituent ::= Name | Character_literal ;

Group_constituent_list . Group_constituent_list ::= [Group_constituent] ;
seperator nonempty Group_constituent "," ;


Group_template_declaration . Group_template_declaration ::=
  "GROUP" Identifier "IS" "(" Entity_class_entry_list ")" ";" ;

Group_declaration . Group_declaration ::=
  "GROUP" Identifier ":" Group_template_name "(" Group_constituent_list ")" ";" ;

Guarded_signal_specification . Guarded_signal_specification ::=
  Guarded_signal_list ":" Type_mark ;

rules Identifier ::=
  Basic_identifier | Extended_identifier ;

Identifier_list . Identifier_list ::= [Identifier]
seperator nonempty Identifier "," ;

If_statement . If_statement ::=
  [ If_labelColon ]
    "IF" Condition "THEN"
      Sequence_of_statements
    [ELSEStatement]
    [ELSEIFStatement]
    "END" "IF" [ If_label ] ";";
seperator If_label "," ;
If_labelColon . If_labelColon ::= If_label ":" ;
seperator If_labelColon "," ;
ELSEIFStatement . ELSEIFStatement ::= "ELSIF" Condition "THEN" Sequence_of_statements ;
seperator ELSEIFStatement "" ;
ELSEStatement . ELSEStatement ::= "ELSE" Sequence_of_statements ;
seperator ELSEStatement "" ;
 


Incomplete_type_declaration . Incomplete_type_declaration ::=   "TYPE" Identifier ";" ;

Index_constraint . Index_constraint ::= "(" [Discrete_range] ")" ;
seperator nonempty Discrete_range "," ;

rules Index_specification ::=
  Discrete_range
  | Static_expression ;

Index_subtype_definition . Index_subtype_definition ::= Type_mark Range "<>" ;

Indexed_name . Indexed_name ::= Prefix "(" Expression { "," Expression } ")"
seperator nonEmpty Expression "," ;

rules Instantiated_unit ::=
  [ COMPONENTText ] Component_name
  | "ENTITY" Entity_name [ Architecture_identifierPar ]
  | "CONFIGURATION" Configuration_name ; 
COMPONENTText . COMPONENTText ::= "COMPONENT" ;
seperator COMPONENTText "";
Architecture_identifierPar . Architecture_identifierPar ::= "(" Architecture_identifier ")" ;
seperator Architecture_identifierPar "";



rules Instantiation_list ::=
  [Instantiation_label] 
  | "OTHERS"
  | "ALL" ;
seperator nonempty Instantiation_label ",";


Integer . Integer ::= [IntAccuum]
IntAccuum . IntAccuum ::= Digit IntAccuum | Digit Underline IntAccuum | Digit ;

Integer_type_definition . Integer_type_definition ::= Range_constraint ;

Interface_constant_declaration . Interface_constant_declaration ::=
  [ ConstantText ] Identifier_list ":" [ InText ] Subtype_indication [ Static_expressionAssign ]
ConstantText ::= "CONSTANT" ;
seperator ConstantText "";
InText ::= "IN" ;
seperator InText "";
Static_expressionAssign ::= ":=" Static_expression ;
seperator Static_expressionAssign "";

rules Interface_declaration ::=
  Interface_constant_declaration
  | Interface_signal_declaration
  | Interface_variable_declaration
  | Interface_file_declaration ;

Interface_element . Interface_element ::= Interface_declaration ;

Interface_file_declaration . Interface_file_declaration ::=
  "FILE" Identifier_list ":" Subtype_indication ;

Interface_list . Interface_list ::=
  Interface_element { ";" Interface_element }
seperator nonEmpty Interface_element ";" ;

Interface_signal_declaration . Interface_signal_declaration ::=
  [SIGNALText] Identifier_list ":" [ Mode ] Subtype_indication [BUSText ] [Static_expressionAssign];
SIGNALText ::= "SIGNAL" ;
seperator SIGNALText "";
BUSText ::= "BUS" ;
seperator BUSText "";
seperator Mode "";

Interface_variable_declaration . Interface_variable_declaration ::=
  [VARIABLEText] Identifier_list ":" [ Mode ] Subtype_indication [ Static_expressionAssign ]
VARIABLEText ::= "VARIABLE" ;
seperator VARIABLEText "";

Iteration_scheme . Iteration_scheme ::=
  "WHILE" Condition
  | "FOR" Loop_parameter_specification ;

Label . Label ::= Identifier ;

rules Letter ::= Upper_case_letter | Lower_case_letter ;

rules Letter_or_digit ::= Letter | Digit ; 

Library_clause . Library_clause ::= "LIBRARY" Logical_name_list ";" ;

rules Library_unit ::=
  Primary_unit
  | Secondary_unit ;

rules Literal ::=
  Numeric_literal
  | Enumeration_literal
  | String_literal
  | Bit_string_literal
  | "NULL" ;

Logical_name . Logical_name ::= Identifier;

Logical_name_list . Logical_name_list ::= [Logical_name] ;
seperator nonempty Logical_name ",";

rules Logical_operator ::= "AND" | "OR" | "NAND" | "NOR" | "XOR" | "XNOR" ;

Loop_statement . Loop_statement ::=
  [ Loop_label ":" ]
    [ Iteration_scheme ] "LOOP"
      Sequence_of_statements
    "END" "LOOP" [ Loop_label ] ";" ;

rules Miscellaneous_operator ::= "**" | "ABS" | "NOT"

rules Mode ::= "IN" | "OUT" | "INOUT" | "BUFFER" | "LINKAGE"

rules Multiplying_operator ::= "*" | "/" | "MOD" | "REM"

rules Name ::=
  Simple_name
  | Operator_symbol
  | Selected_name
  | Indexed_name
  | Slice_name
  | Attribute_name

Next_statement . Next_statement ::=
  [ label ] "NEXT" [ Loop_label ] [ "WHEN" Condition ] ";"

Null_statement . Null_statement ::= [ label ] "NULL" ";"

rules Numeric_literal ::=
  Abstract_literal
  | Physical_literal

rules Object_declaration ::=
  Constant_declaration
  | Signal_declaration
  | Variable_declaration
  | File_declaration

Operator_symbol . Operator_symbol ::= String_literal

Options . Options ::= [ "GUARDED" ] [ Delay_mechanism ]

Package_body . Package_body ::=
  "PACKAGE" Body Package_simple_name "IS"
    Package_body_declarative_part
  "END" [ "PACKAGE" "BODY" ] [ Package_simple_name ] ";"

rules Package_body_declarative_item ::=
  Subprogram_declaration
  | Subprogram_body
  | Type_declaration
  | Subtype_declaration
  | Constant_declaration
  | Shared_variable_declaration
  | File_declaration
  | Alias_declaration
  | Use_clause
  | Group_template_declaration
  | Group_declaration

Package_body_declarative_part . Package_body_declarative_part ::=
  { Package_body_declarative_item }

Package_declaration . Package_declaration ::=
  "PACKAGE" Identifier "IS"
    Package_declarative_part
  "END" [ "PACKAGE" ] [ Package_simple_name ] ";"

rules Package_declarative_item ::=
  Subprogram_declaration
  | Type_declaration
  | Subtype_declaration
  | Constant_declaration
  | Signal_declaration
  | Shared_variable_declaration
  | File_declaration
  | Alias_declaration
  | Component_declaration
  | Attribute_declaration
  | Attribute_specification
  | Disconnection_specification
  | Use_clause
  | Group_template_declaration
  | Group_declaration

Package_declarative_part . Package_declarative_part ::=
  { Package_declarative_item }

Parameter_specification . Parameter_specification ::=
  Identifier "IN" Discrete_range

Physical_literal . Physical_literal ::= [ Abstract_literal ] Unit_name

Physical_type_definition . Physical_type_definition ::=
  Range_constraint
    "UNITS"
      Base_unit_declaration
      { Secondary_unit_declaration }
    "END" "UNITS" [ Physical_type_simple_name ]

Port_clause . Port_clause ::=
  "PORT" "(" Port_list ")" ";"

Port_list . Port_list ::= Port_interface_list

Port_map_aspect . Port_map_aspect ::=
  "PORT" "MAP" "(" Port_association_list ")"

rules Prefix ::=
  Name
  | Function_call

rules Primary ::=
  Name
  | Literal
  | Aggregate
  | Function_call
  | Qualified_expression
  | Type_conversion
  | Allocator
  | "(" Expression ")"

rules Primary_unit ::=
  Entity_declaration
  | Configuration_declaration
  | Package_declaration

rules Procedure_call ::= Procedure_name [ "(" Actual_parameter_part ")" ]

Procedure_call_statement ::=
  [ label ] Procedure_call ";"

rules Process_declarative_item ::=
  Subprogram_declaration
  | Subprogram_body
  | Type_declaration
  | Subtype_declaration
  | Constant_declaration
  | Variable_declaration
  | File_declaration
  | Alias_declaration
  | Attribute_declaration
  | Attribute_specification
  | Use_clause
  | Group_template_declaration
  | Group_declaration

Process_declarative_part . Process_declarative_part ::=
  { Process_declarative_item }

Process_statement . Process_statement ::=
  [ Process_label ":" ]
    [ MaybePOSTPONED ] "PROCESS" [ "(" Sensitivity_list ")" ] [ "IS" ]
      Process_declarative_part
    "BEGIN"
      Process_statement_part
    "END" [ MaybePOSTPONED ] "PROCESS" [ Process_label ] ";"

Process_statement_part . Process_statement_part ::=
  { Sequential_statement }

rules Qualified_expression ::=
  Type_mark "'" "(" Expression ")"
  | Type_mark "'" Aggregate

rules Range ::=
  Range_attribute_name
  | Simple_expression Direction Simple_expression

Range_constraint . Range_constraint ::= Range Range

Record_type_definition . Record_type_definition ::=
  "RECORD"
    Element_declaration
    { Element_declaration }
  "END" "RECORD" [ Record_type_simple_name ]

Relation . Relation ::=
  Shift_expression [ Relational_operator Shift_expression ]

rules Relational_operator ::=    "="  |  /=  |  <  |  "<="   |  >  |  >=

Report_statement . Report_statement ::=
  [ label ]
    "REPORT" Expression
      [ "SEVERITY" Expression ] ";"

Return_statement . Return_statement ::=
  [ label ] "RETURN" [ Expression ] ";"

rules Scalar_type_definition ::=
  Enumeration_type_definition   | Integer_type_definition
  | Floating_type_definition    | Physical_type_definition

rules Secondary_unit ::=
  Architecture_body
  | Package_body

Secondary_unit_declaration . Secondary_unit_declaration ::=  Identifier "=" Physical_literal ";"

Selected_name . Selected_name ::= Prefix "." Suffix

Selected_signal_assignment . Selected_signal_assignment ::=
  "WITH" Expression "SELECT"
    Target  "<=" Options Selected_waveforms ";"

Selected_waveforms . Selected_waveforms ::=
  { Waveform "WHEN" Choices "," }
  Waveform "WHEN" Choices

Sensitivity_clause . Sensitivity_clause ::=  "ON" Sensitivity_list

Sensitivity_list . Sensitivity_list ::= Signal_name { "," Signal_name }

Sequence_of_statements . Sequence_of_statements ::=
  { Sequential_statement }

rules Sequential_statement ::=
  Wait_statement
  | Assertion_statement
  | Report_statement
  | Signal_assignment_statement
  | Variable_assignment_statement
  | Procedure_call_statement
  | If_statement
  | Case_statement
  | Loop_statement
  | Next_statement
  | Exit_statement
  | Return_statement
  | Null_statement

Shift_expression . Shift_expression ::=
  Simple_expression [ Shift_operator Simple_expression ]

rules Shift_operator ::= "SLL" | "SRL" | "SLA" | "SRA" | "ROL" | "ROR"

rules Sign ::= "+" | "-"

Signal_assignment_statement . Signal_assignment_statement ::=
  [ label ] Target "<=" [ Delay_mechanism ] Waveform ";"

Signal_declaration . Signal_declaration ::=
  Signal Identifier_list ":" Subtype_indication [ Signal_kind ] [ ":=" Expression ] ";"

rules Signal_kind ::=   "REGISTER"  |  "BUS"

rules Signal_list ::=
  Signal_name { "," Signal_name }
  | "OTHERS"
  | "ALL"

Signature . Signature ::= [ [ Type_mark { "," Type_mark } ] [ Return Type_mark ] ]

Simple_expression . Simple_expression ::=
  [ Sign ] Term { Adding_operator Term }

Simple_name . Simple_name ::=   Identifier

Slice_name . Slice_name ::=  Prefix "(" Discrete_range ")"

String_literal . String_literal ::= "\"" { Graphic_character }  "\""

Subprogram_body . Subprogram_body ::=
  Subprogram_specification "IS"
    Subprogram_declarative_part
  "BEGIN"
    Subprogram_statement_part
  "END" [ Subprogram_kind ] [ Designator ] ";"

Subprogram_declaration . Subprogram_declaration ::=
  Subprogram_specification ";"

rules Subprogram_declarative_item ::=
  Subprogram_declaration
  | Subprogram_body
  | Type_declaration
  | Subtype_declaration
  | Constant_declaration
  | Variable_declaration
  | File_declaration
  | Alias_declaration
  | Attribute_declaration
  | Attribute_specification
  | Use_clause
  | Group_template_declaration
  | Group_declaration

Subprogram_declarative_part . Subprogram_declarative_part ::=
  { Subprogram_declarative_item }

rules Subprogram_kind ::= "PROCEDURE" | "FUNCTION"

rules Subprogram_specification ::=
  "PROCEDURE" Designator [ "(" Formal_parameter_list ")" ]
  | [ "PURE" | "IMPURE" ]  "FUNCTION" Designator [ "(" Formal_parameter_list ")" ]
    "RETURN" Type_mark

Subprogram_statement_part . Subprogram_statement_part ::=
  { Sequential_statement }

Subtype_declaration . Subtype_declaration ::=
  "SUBTYPE" Identifier "IS" Subtype_indication ";"

Subtype_indication . Subtype_indication ::=
  [ Resolution_function_name ] Type_mark [ Constraint ]

rules Suffix ::=
  Simple_name
  | Character_literal
  | Operator_symbol
  | "ALL"

rules Target ::=
  Name
  | Aggregate

Term . Term ::=
  Factor { Multiplying_operator Factor }

Timeout_clause . Timeout_clause ::= "FOR" Time_expression

Type_conversion . Type_conversion ::= Type_mark "(" Expression ")"

rules Type_declaration ::=
  Full_type_declaration
  | Incomplete_type_declaration

rules Type_definition ::=
  Scalar_type_definition
  | Composite_type_definition
  | Access_type_definition
  | File_type_definition

rules Type_mark ::=
  Type_name
  | Subtype_name

Unconstrained_array_definition . Unconstrained_array_definition ::=
  "ARRAY" "(" Index_subtype_definition { "," Index_subtype_definition } ")"
    "OF" Element_subtype_indication

Use_clause . Use_clause ::=
  "USE" Selected_name { "," Selected_name } ";"

Variable_assignment_statement . Variable_assignment_statement ::=
  [ label ] Target  ":=" Expression ";"

Variable_declaration . Variable_declaration ::=
  [ "SHARED" ] "VARIABLE" Identifier_list ":" Subtype_indication [ ":=" Expression ] ";"

Wait_statement . Wait_statement ::=
  [ label ] "WAIT" [ Sensitivity_clause ] [ Condition_clause ] [ Timeout_clause ] ";"

rules Waveform ::=
  Waveform_element { "," Waveform_element }
  | "UNAFFECTED"

rules Waveform_element ::=
  Value_expression [ "AFTER" Time_expression ]
  | "NULL" [ "AFTER" Time_expression ]