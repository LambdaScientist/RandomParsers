{-# OPTIONS_GHC -fno-warn-incomplete-patterns #-}
module PrintVhdl where

-- pretty-printer generated by the BNF converter

import AbsVhdl
import Data.Char


-- the top-level printing method
printTree :: Print a => a -> String
printTree = render . prt 0

type Doc = [ShowS] -> [ShowS]

doc :: ShowS -> Doc
doc = (:)

render :: Doc -> String
render d = rend 0 (map ($ "") $ d []) "" where
  rend i ss = case ss of
    "["      :ts -> showChar '[' . rend i ts
    "("      :ts -> showChar '(' . rend i ts
    "{"      :ts -> showChar '{' . new (i+1) . rend (i+1) ts
    "}" : ";":ts -> new (i-1) . space "}" . showChar ';' . new (i-1) . rend (i-1) ts
    "}"      :ts -> new (i-1) . showChar '}' . new (i-1) . rend (i-1) ts
    ";"      :ts -> showChar ';' . new i . rend i ts
    t  : "," :ts -> showString t . space "," . rend i ts
    t  : ")" :ts -> showString t . showChar ')' . rend i ts
    t  : "]" :ts -> showString t . showChar ']' . rend i ts
    t        :ts -> space t . rend i ts
    _            -> id
  new i   = showChar '\n' . replicateS (2*i) (showChar ' ') . dropWhile isSpace
  space t = showString t . (\s -> if null s then "" else (' ':s))

parenth :: Doc -> Doc
parenth ss = doc (showChar '(') . ss . doc (showChar ')')

concatS :: [ShowS] -> ShowS
concatS = foldr (.) id

concatD :: [Doc] -> Doc
concatD = foldr (.) id

replicateS :: Int -> ShowS -> ShowS
replicateS n f = concatS (replicate n f)

-- the printer class does the job
class Print a where
  prt :: Int -> a -> Doc
  prtList :: Int -> [a] -> Doc
  prtList i = concatD . map (prt i)

instance Print a => Print [a] where
  prt = prtList

instance Print Char where
  prt _ s = doc (showChar '\'' . mkEsc '\'' s . showChar '\'')
  prtList _ s = doc (showChar '"' . concatS (map (mkEsc '"') s) . showChar '"')

mkEsc :: Char -> Char -> ShowS
mkEsc q s = case s of
  _ | s == q -> showChar '\\' . showChar s
  '\\'-> showString "\\\\"
  '\n' -> showString "\\n"
  '\t' -> showString "\\t"
  _ -> showChar s

prPrec :: Int -> Int -> Doc -> Doc
prPrec i j = if j<i then parenth else id


instance Print Integer where
  prt _ x = doc (shows x)


instance Print Double where
  prt _ x = doc (shows x)


instance Print Ident where
  prt _ (Ident i) = doc (showString ( i))


instance Print NumString where
  prt _ (NumString i) = doc (showString ( i))



instance Print IS where
  prt i e = case e of
    IS -> prPrec i 0 (concatD [doc (showString "IS")])
  prtList _ [] = (concatD [])
  prtList _ (x:xs) = (concatD [prt 0 x, prt 0 xs])
instance Print BUSText where
  prt i e = case e of
    BUSText -> prPrec i 0 (concatD [doc (showString "BUS")])
  prtList _ [] = (concatD [])
  prtList _ (x:xs) = (concatD [prt 0 x, prt 0 xs])
instance Print GUARDEDtext where
  prt i e = case e of
    GUARDEDtext -> prPrec i 0 (concatD [doc (showString "GUARDED")])
  prtList _ [] = (concatD [])
  prtList _ (x:xs) = (concatD [prt 0 x, prt 0 xs])
instance Print ConstantText where
  prt i e = case e of
    ConstantText -> prPrec i 0 (concatD [doc (showString "CONSTANT")])
  prtList _ [] = (concatD [])
  prtList _ (x:xs) = (concatD [prt 0 x, prt 0 xs])
instance Print InText where
  prt i e = case e of
    InText -> prPrec i 0 (concatD [doc (showString "IN")])
  prtList _ [] = (concatD [])
  prtList _ (x:xs) = (concatD [prt 0 x, prt 0 xs])
instance Print SIGNALText where
  prt i e = case e of
    SIGNALText -> prPrec i 0 (concatD [doc (showString "SIGNAL")])
  prtList _ [] = (concatD [])
  prtList _ (x:xs) = (concatD [prt 0 x, prt 0 xs])
instance Print VARIABLEText where
  prt i e = case e of
    VARIABLEText -> prPrec i 0 (concatD [doc (showString "VARIABLE")])
  prtList _ [] = (concatD [])
  prtList _ (x:xs) = (concatD [prt 0 x, prt 0 xs])
instance Print PackageBodytext where
  prt i e = case e of
    PackageBodytext -> prPrec i 0 (concatD [doc (showString "PACKAGE"), doc (showString "BODY")])
  prtList _ [] = (concatD [])
  prtList _ (x:xs) = (concatD [prt 0 x, prt 0 xs])
instance Print Abstract_literal where
  prt i e = case e of
    Abstract_literalDecimal_literal decimalliteral -> prPrec i 0 (concatD [prt 0 decimalliteral])
    Abstract_literalBased_literal basedliteral -> prPrec i 0 (concatD [prt 0 basedliteral])
  prtList _ [] = (concatD [])
  prtList _ (x:xs) = (concatD [prt 0 x, prt 0 xs])
instance Print Access_type_definition where
  prt i e = case e of
    Access_type_definition subtypeindication -> prPrec i 0 (concatD [doc (showString "ACCESS"), prt 0 subtypeindication])

instance Print Variable_name where
  prt i e = case e of
    Variable_name name -> prPrec i 0 (concatD [prt 0 name])

instance Print Actual_designator where
  prt i e = case e of
    Actual_designatorExpression expression -> prPrec i 0 (concatD [prt 0 expression])
    Actual_designatorSignal_name signalname -> prPrec i 0 (concatD [prt 0 signalname])
    Actual_designatorVariable_name variablename -> prPrec i 0 (concatD [prt 0 variablename])
    Actual_designatorFile_name filename -> prPrec i 0 (concatD [prt 0 filename])
    Actual_designator_OPEN -> prPrec i 0 (concatD [doc (showString "OPEN")])

instance Print File_name where
  prt i e = case e of
    File_name name -> prPrec i 0 (concatD [prt 0 name])

instance Print Actual_parameter_part where
  prt i e = case e of
    Actual_parameter_part parameterassociationlist -> prPrec i 0 (concatD [prt 0 parameterassociationlist])

instance Print Parameter_association_list where
  prt i e = case e of
    Parameter_association_list associationlist -> prPrec i 0 (concatD [prt 0 associationlist])

instance Print Actual_part where
  prt i e = case e of
    Actual_partActual_designator actualdesignator -> prPrec i 0 (concatD [prt 0 actualdesignator])
    Actual_part1 functionname actualdesignator -> prPrec i 0 (concatD [prt 0 functionname, doc (showString "("), prt 0 actualdesignator, doc (showString ")")])
    Actual_part2 typemark actualdesignator -> prPrec i 0 (concatD [prt 0 typemark, doc (showString "("), prt 0 actualdesignator, doc (showString ")")])

instance Print Adding_operator where
  prt i e = case e of
    Adding_operator1 -> prPrec i 0 (concatD [doc (showString "+")])
    Adding_operator2 -> prPrec i 0 (concatD [doc (showString "-")])
    Adding_operator3 -> prPrec i 0 (concatD [doc (showString "&")])

instance Print Aggregate where
  prt i e = case e of
    Aggregate elementassociations -> prPrec i 0 (concatD [doc (showString "("), prt 0 elementassociations, doc (showString ")")])

instance Print Alias_declaration where
  prt i e = case e of
    Alias_declaration aliasdesignator subtypeindications name signatures -> prPrec i 0 (concatD [doc (showString "ALIAS"), prt 0 aliasdesignator, prt 0 subtypeindications, doc (showString "IS"), prt 0 name, prt 0 signatures, doc (showString ";")])

instance Print Alias_designator where
  prt i e = case e of
    Alias_designatorIdentifier identifier -> prPrec i 0 (concatD [prt 0 identifier])
    Alias_designatorCharacter_literal characterliteral -> prPrec i 0 (concatD [prt 0 characterliteral])
    Alias_designatorOperator_symbol operatorsymbol -> prPrec i 0 (concatD [prt 0 operatorsymbol])

instance Print Allocator where
  prt i e = case e of
    Allocator1 subtypeindication -> prPrec i 0 (concatD [doc (showString "NEW"), prt 0 subtypeindication])
    Allocator2 qualifiedexpression -> prPrec i 0 (concatD [doc (showString "NEW"), prt 0 qualifiedexpression])

instance Print Qualified_expression where
  prt i e = case e of
    Qualified_expression expression -> prPrec i 0 (concatD [prt 0 expression])
    Qualified_expression1 typemark expression -> prPrec i 0 (concatD [prt 0 typemark, doc (showString "'"), doc (showString "("), prt 0 expression, doc (showString ")")])
    Qualified_expression2 typemark aggregate -> prPrec i 0 (concatD [prt 0 typemark, doc (showString "'"), prt 0 aggregate])

instance Print Architecture_body where
  prt i e = case e of
    Architecture_body identifier entityname architecturedeclarativepart architecturestatementpart maybearch maybearchitecturesimplename -> prPrec i 0 (concatD [doc (showString "ARCHITECTURE"), prt 0 identifier, doc (showString "OF"), prt 0 entityname, doc (showString "IS"), prt 0 architecturedeclarativepart, doc (showString "BEGIN"), prt 0 architecturestatementpart, doc (showString "END"), prt 0 maybearch, prt 0 maybearchitecturesimplename, doc (showString ";")])

instance Print MaybeArch where
  prt i e = case e of
    MaybeArch_ARCHITECTURE -> prPrec i 0 (concatD [doc (showString "ARCHITECTURE")])
    MaybeArch1 -> prPrec i 0 (concatD [])

instance Print MaybeArchitecture_simple_name where
  prt i e = case e of
    MaybeArchitecture_simple_nameArchitecture_simple_name architecturesimplename -> prPrec i 0 (concatD [prt 0 architecturesimplename])
    MaybeArchitecture_simple_name1 -> prPrec i 0 (concatD [])

instance Print Architecture_simple_name where
  prt i e = case e of
    Architecture_simple_name simplename -> prPrec i 0 (concatD [prt 0 simplename])

instance Print Array_type_definition where
  prt i e = case e of
    Array_type_definitionUnconstrained_array_definition unconstrainedarraydefinition -> prPrec i 0 (concatD [prt 0 unconstrainedarraydefinition])
    Array_type_definitionConstrained_array_definition constrainedarraydefinition -> prPrec i 0 (concatD [prt 0 constrainedarraydefinition])

instance Print Assertion where
  prt i e = case e of
    Assertion condition maybereports maybeseveritys -> prPrec i 0 (concatD [doc (showString "ASSERT"), prt 0 condition, prt 0 maybereports, prt 0 maybeseveritys])

instance Print Assertion_statement where
  prt i e = case e of
    Assertion_statement labels assertion -> prPrec i 0 (concatD [prt 0 labels, prt 0 assertion])

instance Print Association_element where
  prt i e = case e of
    Association_element formalparts actualpart -> prPrec i 0 (concatD [prt 0 formalparts, prt 0 actualpart])
  prtList _ [] = (concatD [])
  prtList _ (x:xs) = (concatD [prt 0 x, doc (showString ","), prt 0 xs])
instance Print Association_list where
  prt i e = case e of
    Association_list associationelements -> prPrec i 0 (concatD [prt 0 associationelements])

instance Print Generic_clause_Map where
  prt i e = case e of
    Generic_clause_Map genericclause genericmapaspectsemis -> prPrec i 0 (concatD [prt 0 genericclause, prt 0 genericmapaspectsemis])
  prtList _ [] = (concatD [])
  prtList _ [] = (concatD [])
  prtList _ (x:xs) = (concatD [prt 0 x, prt 0 xs])
  prtList _ (x:xs) = (concatD [prt 0 x, prt 0 xs])
instance Print Port_clause_map where
  prt i e = case e of
    Port_clause_map portclause portmapaspectsemis -> prPrec i 0 (concatD [prt 0 portclause, prt 0 portmapaspectsemis])
  prtList _ [] = (concatD [])
  prtList _ (x:xs) = (concatD [prt 0 x, prt 0 xs])
instance Print Port_map_aspectSemi where
  prt i e = case e of
    Port_map_aspectSemi portmapaspectsemi -> prPrec i 0 (concatD [prt 0 portmapaspectsemi, doc (showString ";")])
  prtList _ [] = (concatD [])
  prtList _ (x:xs) = (concatD [prt 0 x, prt 0 xs])
instance Print Index_specificationPar where
  prt i e = case e of
    Index_specificationPar indexspecification -> prPrec i 0 (concatD [doc (showString "("), prt 0 indexspecification, doc (showString ")")])
  prtList _ [] = (concatD [])
  prtList _ (x:xs) = (concatD [prt 0 x, prt 0 xs])
instance Print Guard_expressionPar where
  prt i e = case e of
    Guard_expressionPar guardexpressionpar -> prPrec i 0 (concatD [doc (showString "("), prt 0 guardexpressionpar, doc (showString ")")])
  prtList _ [] = (concatD [])
  prtList _ (x:xs) = (concatD [prt 0 x, prt 0 xs])
instance Print Case_labelColon where
  prt i e = case e of
    Case_labelColon caselabel -> prPrec i 0 (concatD [prt 0 caselabel, doc (showString ":")])
  prtList _ [] = (concatD [])
  prtList _ (x:xs) = (concatD [prt 0 x, prt 0 xs])
instance Print Case_label where
  prt i e = case e of
    Case_label label -> prPrec i 0 (concatD [prt 0 label])
  prtList _ [] = (concatD [])
  prtList _ (x:xs) = (concatD [prt 0 x, prt 0 xs])
instance Print WaveformElse where
  prt i e = case e of
    WaveformElse waveform condition -> prPrec i 0 (concatD [prt 0 waveform, doc (showString "WHEN"), prt 0 condition, doc (showString "ELSE")])
    WaveformNoElse whenconditions -> prPrec i 0 (concatD [doc (showString "Waveform"), prt 0 whenconditions])
  prtList _ [] = (concatD [])
  prtList _ [] = (concatD [])
  prtList _ (x:xs) = (concatD [prt 0 x, prt 0 xs])
  prtList _ (x:xs) = (concatD [prt 0 x, prt 0 xs])
instance Print WhenCondition where
  prt i e = case e of
    WhenCondition condition -> prPrec i 0 (concatD [doc (showString "WHEN"), prt 0 condition])
  prtList _ [] = (concatD [])
  prtList _ (x:xs) = (concatD [prt 0 x, prt 0 xs])
instance Print DotInt where
  prt i e = case e of
    DotInt vinteger -> prPrec i 0 (concatD [doc (showString "."), prt 0 vinteger])
  prtList _ [] = (concatD [])
  prtList _ (x:xs) = (concatD [prt 0 x, prt 0 xs])
instance Print Static_expressionAssign where
  prt i e = case e of
    Static_expressionAssign staticexpression -> prPrec i 0 (concatD [doc (showString ":="), prt 0 staticexpression])
  prtList _ [] = (concatD [])
  prtList _ (x:xs) = (concatD [prt 0 x, prt 0 xs])
instance Print LoopLabelColon where
  prt i e = case e of
    LoopLabelColon looplabel -> prPrec i 0 (concatD [prt 0 looplabel, doc (showString ":")])
  prtList _ [] = (concatD [])
  prtList _ [x] = (concatD [prt 0 x])
  prtList _ (x:xs) = (concatD [prt 0 x, doc (showString ":"), prt 0 xs])
instance Print Loop_label where
  prt i e = case e of
    Loop_label label -> prPrec i 0 (concatD [prt 0 label])
  prtList _ [] = (concatD [])
  prtList _ [x] = (concatD [prt 0 x])
  prtList _ (x:xs) = (concatD [prt 0 x, doc (showString ","), prt 0 xs])
instance Print Attribute_declaration where
  prt i e = case e of
    Attribute_declaration identifier typemark -> prPrec i 0 (concatD [doc (showString "ATTRIBUTE"), prt 0 identifier, doc (showString ":"), prt 0 typemark, doc (showString ";")])

instance Print Attribute_designator where
  prt i e = case e of
    Attribute_designator attributesimplename -> prPrec i 0 (concatD [prt 0 attributesimplename])

instance Print Attribute_simple_name where
  prt i e = case e of
    Attribute_simple_name simplename -> prPrec i 0 (concatD [prt 0 simplename])

instance Print Attribute_name where
  prt i e = case e of
    Attribute_name prefix signatures attributedesignator expresspars -> prPrec i 0 (concatD [prt 0 prefix, prt 0 signatures, doc (showString "'"), prt 0 attributedesignator, prt 0 expresspars])

instance Print ExpressPar where
  prt i e = case e of
    ExpressPar expression -> prPrec i 0 (concatD [doc (showString "("), prt 0 expression, doc (showString ")")])
  prtList _ [] = (concatD [])
  prtList _ (x:xs) = (concatD [prt 0 x, prt 0 xs])
instance Print Attribute_specification where
  prt i e = case e of
    Attribute_specification attributedesignator entityspecification expression -> prPrec i 0 (concatD [doc (showString "ATTRIBUTE"), prt 0 attributedesignator, doc (showString "OF"), prt 0 entityspecification, doc (showString "IS"), prt 0 expression, doc (showString ";")])

instance Print Base where
  prt i e = case e of
    Base vinteger -> prPrec i 0 (concatD [prt 0 vinteger])

instance Print Base_unit_declaration where
  prt i e = case e of
    Base_unit_declaration identifier -> prPrec i 0 (concatD [prt 0 identifier, doc (showString ";")])

instance Print Based_integer where
  prt i e = case e of
    Based_integer extendeddigits -> prPrec i 0 (concatD [prt 0 extendeddigits])
  prtList _ [] = (concatD [])
  prtList _ (x:xs) = (concatD [prt 0 x, doc (showString "."), prt 0 xs])
instance Print Digit where
  prt i e = case e of
    Digit_0 -> prPrec i 0 (concatD [doc (showString "0")])
    Digit_1 -> prPrec i 0 (concatD [doc (showString "1")])
    Digit_2 -> prPrec i 0 (concatD [doc (showString "2")])
    Digit_3 -> prPrec i 0 (concatD [doc (showString "3")])
    Digit_4 -> prPrec i 0 (concatD [doc (showString "4")])
    Digit_5 -> prPrec i 0 (concatD [doc (showString "5")])
    Digit_6 -> prPrec i 0 (concatD [doc (showString "6")])
    Digit_7 -> prPrec i 0 (concatD [doc (showString "7")])
    Digit_8 -> prPrec i 0 (concatD [doc (showString "8")])
    Digit_9 -> prPrec i 0 (concatD [doc (showString "9")])

instance Print Based_literal where
  prt i e = case e of
    Based_literal base basedintegers exponents -> prPrec i 0 (concatD [prt 0 base, doc (showString "#"), prt 0 basedintegers, doc (showString "#"), prt 0 exponents])

instance Print Basic_identifier where
  prt i e = case e of
    Basic_identifier id -> prPrec i 0 (concatD [prt 0 id])

instance Print Binding_indication where
  prt i e = case e of
    Binding_indication useentitys genericmapaspects portmapaspects -> prPrec i 0 (concatD [prt 0 useentitys, prt 0 genericmapaspects, prt 0 portmapaspects])
  prtList _ [] = (concatD [])
  prtList _ (x:xs) = (concatD [prt 0 x, doc (showString ";"), prt 0 xs])
instance Print Bit_string_literal where
  prt i e = case e of
    Bit_string_literal basespecifier bitvalue -> prPrec i 0 (concatD [prt 0 basespecifier, doc (showString "\""), prt 0 bitvalue, doc (showString "\"")])

instance Print Bit_value where
  prt i e = case e of
    Bit_value extendeddigits -> prPrec i 0 (concatD [prt 0 extendeddigits])

instance Print Block_configuration where
  prt i e = case e of
    Block_configuration blockspecification useentitys configurationitems -> prPrec i 0 (concatD [doc (showString "FOR"), prt 0 blockspecification, prt 0 useentitys, prt 0 configurationitems, doc (showString "END"), doc (showString "FOR"), doc (showString ";")])
  prtList _ [] = (concatD [])
  prtList _ (x:xs) = (concatD [prt 0 x, prt 0 xs])
instance Print Block_declarative_item where
  prt i e = case e of
    Block_declarative_itemSubprogram_declaration subprogramdeclaration -> prPrec i 0 (concatD [prt 0 subprogramdeclaration])
    Block_declarative_itemSubprogram_body subprogrambody -> prPrec i 0 (concatD [prt 0 subprogrambody])
    Block_declarative_itemType_declaration typedeclaration -> prPrec i 0 (concatD [prt 0 typedeclaration])
    Block_declarative_itemSubtype_declaration subtypedeclaration -> prPrec i 0 (concatD [prt 0 subtypedeclaration])
    Block_declarative_itemConstant_declaration constantdeclaration -> prPrec i 0 (concatD [prt 0 constantdeclaration])
    Block_declarative_itemSignal_declaration signaldeclaration -> prPrec i 0 (concatD [prt 0 signaldeclaration])
    Block_declarative_itemShared_variable_declaration sharedvariabledeclaration -> prPrec i 0 (concatD [prt 0 sharedvariabledeclaration])
    Block_declarative_itemFile_declaration filedeclaration -> prPrec i 0 (concatD [prt 0 filedeclaration])
    Block_declarative_itemAlias_declaration aliasdeclaration -> prPrec i 0 (concatD [prt 0 aliasdeclaration])
    Block_declarative_itemComponent_declaration componentdeclaration -> prPrec i 0 (concatD [prt 0 componentdeclaration])
    Block_declarative_itemAttribute_declaration attributedeclaration -> prPrec i 0 (concatD [prt 0 attributedeclaration])
    Block_declarative_itemAttribute_specification attributespecification -> prPrec i 0 (concatD [prt 0 attributespecification])
    Block_declarative_itemConfiguration_specification configurationspecification -> prPrec i 0 (concatD [prt 0 configurationspecification])
    Block_declarative_itemDisconnection_specification disconnectionspecification -> prPrec i 0 (concatD [prt 0 disconnectionspecification])
    Block_declarative_itemUse_clause useclause -> prPrec i 0 (concatD [prt 0 useclause])
    Block_declarative_itemGroup_template_declaration grouptemplatedeclaration -> prPrec i 0 (concatD [prt 0 grouptemplatedeclaration])
    Block_declarative_itemGroup_declaration groupdeclaration -> prPrec i 0 (concatD [prt 0 groupdeclaration])
  prtList _ [] = (concatD [])
  prtList _ (x:xs) = (concatD [prt 0 x, prt 0 xs])
instance Print Shared_variable_declaration where
  prt i e = case e of
    Shared_variable_declaration variabledeclaration -> prPrec i 0 (concatD [prt 0 variabledeclaration])

instance Print Block_declarative_part where
  prt i e = case e of
    Block_declarative_part blockdeclarativeitems -> prPrec i 0 (concatD [prt 0 blockdeclarativeitems])

instance Print Block_header where
  prt i e = case e of
    Block_header genericclausemaps portclausemaps -> prPrec i 0 (concatD [prt 0 genericclausemaps, prt 0 portclausemaps])

instance Print Architecture_name where
  prt i e = case e of
    Architecture_name name -> prPrec i 0 (concatD [prt 0 name])

instance Print Generate_statement_label where
  prt i e = case e of
    Generate_statement_label name -> prPrec i 0 (concatD [prt 0 name])

instance Print Block_specification where
  prt i e = case e of
    Block_specificationArchitecture_name architecturename -> prPrec i 0 (concatD [prt 0 architecturename])
    Block_specificationBlock_statement_label blockstatementlabel -> prPrec i 0 (concatD [prt 0 blockstatementlabel])
    Block_specification1 generatestatementlabel indexspecificationpar -> prPrec i 0 (concatD [prt 0 generatestatementlabel, prt 0 indexspecificationpar])

instance Print Block_statement_label where
  prt i e = case e of
    Block_statement_label label -> prPrec i 0 (concatD [prt 0 label])

instance Print Block_statement where
  prt i e = case e of
    Block_statement blocklabel guardexpressionpars iss blockheader blockdeclarativepart blockstatementpart blocklabels -> prPrec i 0 (concatD [prt 0 blocklabel, doc (showString ":"), doc (showString "BLOCK"), prt 0 guardexpressionpars, prt 0 iss, prt 0 blockheader, prt 0 blockdeclarativepart, doc (showString "BEGIN"), prt 0 blockstatementpart, doc (showString "END"), doc (showString "BLOCK"), prt 0 blocklabels, doc (showString ";")])

instance Print Block_label where
  prt i e = case e of
    Block_label label -> prPrec i 0 (concatD [prt 0 label])
  prtList _ [] = (concatD [])
  prtList _ (x:xs) = (concatD [prt 0 x, prt 0 xs])
instance Print Block_statement_part where
  prt i e = case e of
    Block_statement_part concurrentstatements -> prPrec i 0 (concatD [prt 0 concurrentstatements])

instance Print Case_statement where
  prt i e = case e of
    Case_statement caselabelcolons expression casestatementalternatives caselabels -> prPrec i 0 (concatD [prt 0 caselabelcolons, doc (showString "CASE"), prt 0 expression, doc (showString "IS"), prt 0 casestatementalternatives, doc (showString "END"), doc (showString "CASE"), prt 0 caselabels, doc (showString ";")])

instance Print Choice where
  prt i e = case e of
    ChoiceSimple_expression simpleexpression -> prPrec i 0 (concatD [prt 0 simpleexpression])
    ChoiceDiscrete_range discreterange -> prPrec i 0 (concatD [prt 0 discreterange])
    ChoiceElement_simple_name elementsimplename -> prPrec i 0 (concatD [prt 0 elementsimplename])
    Choice_OTHERS -> prPrec i 0 (concatD [doc (showString "OTHERS")])
  prtList _ [x] = (concatD [prt 0 x])
  prtList _ (x:xs) = (concatD [prt 0 x, prt 0 xs])
instance Print Element_simple_name where
  prt i e = case e of
    Element_simple_name simplename -> prPrec i 0 (concatD [prt 0 simplename])

instance Print Choices where
  prt i e = case e of
    Choices choices -> prPrec i 0 (concatD [prt 0 choices])

instance Print Case_statement_alternative where
  prt i e = case e of
    Case_statement_alternative choices sequenceofstatements -> prPrec i 0 (concatD [doc (showString "WHEN"), prt 0 choices, doc (showString "=>"), prt 0 sequenceofstatements])
  prtList _ [] = (concatD [])
  prtList _ (x:xs) = (concatD [prt 0 x, prt 0 xs])
instance Print Character_literal where
  prt i e = case e of
    Character_literal graphiccharacter -> prPrec i 0 (concatD [doc (showString "'"), prt 0 graphiccharacter, doc (showString "'")])

instance Print Component_configuration where
  prt i e = case e of
    Component_configuration componentspecification bindingindications blockconfigurations -> prPrec i 0 (concatD [doc (showString "FOR"), prt 0 componentspecification, prt 0 bindingindications, prt 0 blockconfigurations, doc (showString "END"), doc (showString "FOR"), doc (showString ";")])

instance Print Component_declaration where
  prt i e = case e of
    Component_declaration identifier iss localgenericclauses localportclauses componentsimplenames -> prPrec i 0 (concatD [doc (showString "COMPONENT"), prt 0 identifier, prt 0 iss, prt 0 localgenericclauses, prt 0 localportclauses, doc (showString "END"), doc (showString "COMPONENT"), prt 0 componentsimplenames, doc (showString ";")])

instance Print Component_simple_name where
  prt i e = case e of
    Component_simple_name simplename -> prPrec i 0 (concatD [prt 0 simplename])
  prtList _ [] = (concatD [])
  prtList _ (x:xs) = (concatD [prt 0 x, prt 0 xs])
instance Print Local_port_clause where
  prt i e = case e of
    Local_port_clause portclause -> prPrec i 0 (concatD [prt 0 portclause])
  prtList _ [] = (concatD [])
  prtList _ (x:xs) = (concatD [prt 0 x, prt 0 xs])
instance Print Component_instantiation_statement where
  prt i e = case e of
    Component_instantiation_statement instantiationlabel instantiatedunit genericmapaspects portmapaspects -> prPrec i 0 (concatD [prt 0 instantiationlabel, doc (showString ":"), prt 0 instantiatedunit, prt 0 genericmapaspects, prt 0 portmapaspects, doc (showString ";")])

instance Print Instantiation_label where
  prt i e = case e of
    Instantiation_label label -> prPrec i 0 (concatD [prt 0 label])
  prtList _ [x] = (concatD [prt 0 x])
  prtList _ (x:xs) = (concatD [prt 0 x, doc (showString ","), prt 0 xs])
instance Print Component_specification where
  prt i e = case e of
    Component_specification instantiationlist componentname -> prPrec i 0 (concatD [prt 0 instantiationlist, doc (showString ":"), prt 0 componentname])

instance Print Component_name where
  prt i e = case e of
    Component_name name -> prPrec i 0 (concatD [prt 0 name])

instance Print Composite_type_definition where
  prt i e = case e of
    Composite_type_definitionArray_type_definition arraytypedefinition -> prPrec i 0 (concatD [prt 0 arraytypedefinition])
    Composite_type_definitionRecord_type_definition recordtypedefinition -> prPrec i 0 (concatD [prt 0 recordtypedefinition])

instance Print Concurrent_assertion_statement where
  prt i e = case e of
    Concurrent_assertion_statement labels maybepostponeds assertion -> prPrec i 0 (concatD [prt 0 labels, prt 0 maybepostponeds, prt 0 assertion, doc (showString ";")])

instance Print MaybePOSTPONED where
  prt i e = case e of
    MaybePOSTPONED -> prPrec i 0 (concatD [doc (showString "POSTPONED")])
  prtList _ [] = (concatD [])
  prtList _ (x:xs) = (concatD [prt 0 x, prt 0 xs])
instance Print Concurrent_procedure_call_statement where
  prt i e = case e of
    Concurrent_procedure_call_statement labels maybepostponeds procedurecall -> prPrec i 0 (concatD [prt 0 labels, prt 0 maybepostponeds, prt 0 procedurecall, doc (showString ";")])

instance Print Concurrent_signal_assignment_statement where
  prt i e = case e of
    Concurrent_signal_assignment_statement1 labels maybepostponeds conditionalsignalassignment -> prPrec i 0 (concatD [prt 0 labels, prt 0 maybepostponeds, prt 0 conditionalsignalassignment])
    Concurrent_signal_assignment_statement2 labels maybepostponeds selectedsignalassignment -> prPrec i 0 (concatD [prt 0 labels, prt 0 maybepostponeds, prt 0 selectedsignalassignment])

instance Print Concurrent_statement where
  prt i e = case e of
    Concurrent_statementBlock_statement blockstatement -> prPrec i 0 (concatD [prt 0 blockstatement])
    Concurrent_statementProcess_statement processstatement -> prPrec i 0 (concatD [prt 0 processstatement])
    Concurrent_statementConcurrent_procedure_call_statement concurrentprocedurecallstatement -> prPrec i 0 (concatD [prt 0 concurrentprocedurecallstatement])
    Concurrent_statementConcurrent_assertion_statement concurrentassertionstatement -> prPrec i 0 (concatD [prt 0 concurrentassertionstatement])
    Concurrent_statementConcurrent_signal_assignment_statement concurrentsignalassignmentstatement -> prPrec i 0 (concatD [prt 0 concurrentsignalassignmentstatement])
    Concurrent_statementComponent_instantiation_statement componentinstantiationstatement -> prPrec i 0 (concatD [prt 0 componentinstantiationstatement])
    Concurrent_statementGenerate_statement generatestatement -> prPrec i 0 (concatD [prt 0 generatestatement])
  prtList _ [] = (concatD [])
  prtList _ [] = (concatD [])
  prtList _ (x:xs) = (concatD [prt 0 x, prt 0 xs])
  prtList _ (x:xs) = (concatD [prt 0 x, prt 0 xs])
instance Print Condition where
  prt i e = case e of
    Condition booleanexpression -> prPrec i 0 (concatD [prt 0 booleanexpression])

instance Print Boolean_expression where
  prt i e = case e of
    Boolean_expression expression -> prPrec i 0 (concatD [prt 0 expression])

instance Print Condition_clause where
  prt i e = case e of
    Condition_clause condition -> prPrec i 0 (concatD [doc (showString "UNTIL"), prt 0 condition])
  prtList _ [] = (concatD [])
  prtList _ (x:xs) = (concatD [prt 0 x, prt 0 xs])
instance Print Conditional_signal_assignment where
  prt i e = case e of
    Conditional_signal_assignment target options conditionalwaveforms -> prPrec i 0 (concatD [prt 0 target, doc (showString "<="), prt 0 options, prt 0 conditionalwaveforms, doc (showString ";")])

instance Print Conditional_waveforms where
  prt i e = case e of
    Conditional_waveforms waveformelses -> prPrec i 0 (concatD [prt 0 waveformelses])

instance Print MaybeCONFIGURATION where
  prt i e = case e of
    MaybeCONFIGURATION -> prPrec i 0 (concatD [doc (showString "CONFIGURATION")])
  prtList _ [] = (concatD [])
  prtList _ (x:xs) = (concatD [prt 0 x, prt 0 xs])
instance Print Configuration_declaration where
  prt i e = case e of
    Configuration_declaration identifier entityname configurationdeclarativepart blockconfiguration maybeconfigurations configurationsimplenames -> prPrec i 0 (concatD [doc (showString "CONFIGURATION"), prt 0 identifier, doc (showString "OF"), prt 0 entityname, doc (showString "IS"), prt 0 configurationdeclarativepart, prt 0 blockconfiguration, doc (showString "END"), prt 0 maybeconfigurations, prt 0 configurationsimplenames, doc (showString ";")])

instance Print Configuration_simple_name where
  prt i e = case e of
    Configuration_simple_name simplename -> prPrec i 0 (concatD [prt 0 simplename])
  prtList _ [] = (concatD [])
  prtList _ (x:xs) = (concatD [prt 0 x, prt 0 xs])
instance Print Configuration_declarative_item where
  prt i e = case e of
    Configuration_declarative_itemUse_clause useclause -> prPrec i 0 (concatD [prt 0 useclause])
    Configuration_declarative_itemAttribute_specification attributespecification -> prPrec i 0 (concatD [prt 0 attributespecification])
    Configuration_declarative_itemGroup_declaration groupdeclaration -> prPrec i 0 (concatD [prt 0 groupdeclaration])
  prtList _ [] = (concatD [])
  prtList _ (x:xs) = (concatD [prt 0 x, prt 0 xs])
instance Print Configuration_declarative_part where
  prt i e = case e of
    Configuration_declarative_part configurationdeclarativeitems -> prPrec i 0 (concatD [prt 0 configurationdeclarativeitems])

instance Print Configuration_item where
  prt i e = case e of
    Configuration_itemBlock_configuration blockconfiguration -> prPrec i 0 (concatD [prt 0 blockconfiguration])
    Configuration_itemComponent_configuration componentconfiguration -> prPrec i 0 (concatD [prt 0 componentconfiguration])
  prtList _ [] = (concatD [])
  prtList _ (x:xs) = (concatD [prt 0 x, prt 0 xs])
instance Print Configuration_specification where
  prt i e = case e of
    Configuration_specification componentspecification bindingindication -> prPrec i 0 (concatD [doc (showString "FOR"), prt 0 componentspecification, prt 0 bindingindication, doc (showString ";")])

instance Print Constant_declaration where
  prt i e = case e of
    Constant_declaration identifierlist subtypeindication varassigns -> prPrec i 0 (concatD [doc (showString "CONSTANT"), prt 0 identifierlist, doc (showString ":"), prt 0 subtypeindication, prt 0 varassigns, doc (showString ";")])

instance Print VarAssign where
  prt i e = case e of
    VarAssign expression -> prPrec i 0 (concatD [doc (showString ":="), prt 0 expression])
  prtList _ [] = (concatD [])
  prtList _ (x:xs) = (concatD [prt 0 x, prt 0 xs])
instance Print Constrained_array_definition where
  prt i e = case e of
    Constrained_array_definition indexconstraint elementsubtypeindication -> prPrec i 0 (concatD [doc (showString "ARRAY"), prt 0 indexconstraint, doc (showString "OF"), prt 0 elementsubtypeindication])

instance Print Constraint where
  prt i e = case e of
    ConstraintRange_constraint rangeconstraint -> prPrec i 0 (concatD [prt 0 rangeconstraint])
    ConstraintIndex_constraint indexconstraint -> prPrec i 0 (concatD [prt 0 indexconstraint])
  prtList _ [] = (concatD [])
  prtList _ (x:xs) = (concatD [prt 0 x, prt 0 xs])
instance Print Context_clause where
  prt i e = case e of
    Context_clause contextitems -> prPrec i 0 (concatD [prt 0 contextitems])

instance Print Context_item where
  prt i e = case e of
    Context_itemLibrary_clause libraryclause -> prPrec i 0 (concatD [prt 0 libraryclause])
    Context_itemUse_clause useclause -> prPrec i 0 (concatD [prt 0 useclause])
  prtList _ [] = (concatD [])
  prtList _ (x:xs) = (concatD [prt 0 x, prt 0 xs])
instance Print Decimal_literal where
  prt i e = case e of
    Decimal_literal vinteger dotints exponents -> prPrec i 0 (concatD [prt 0 vinteger, prt 0 dotints, prt 0 exponents])

instance Print Declaration where
  prt i e = case e of
    DeclarationType_declaration typedeclaration -> prPrec i 0 (concatD [prt 0 typedeclaration])
    DeclarationSubtype_declaration subtypedeclaration -> prPrec i 0 (concatD [prt 0 subtypedeclaration])
    DeclarationObject_declaration objectdeclaration -> prPrec i 0 (concatD [prt 0 objectdeclaration])
    DeclarationInterface_declaration interfacedeclaration -> prPrec i 0 (concatD [prt 0 interfacedeclaration])
    DeclarationAlias_declaration aliasdeclaration -> prPrec i 0 (concatD [prt 0 aliasdeclaration])
    DeclarationAttribute_declaration attributedeclaration -> prPrec i 0 (concatD [prt 0 attributedeclaration])
    DeclarationComponent_declaration componentdeclaration -> prPrec i 0 (concatD [prt 0 componentdeclaration])
    DeclarationGroup_template_declaration grouptemplatedeclaration -> prPrec i 0 (concatD [prt 0 grouptemplatedeclaration])
    DeclarationGroup_declaration groupdeclaration -> prPrec i 0 (concatD [prt 0 groupdeclaration])
    DeclarationEntity_declaration entitydeclaration -> prPrec i 0 (concatD [prt 0 entitydeclaration])
    DeclarationConfiguration_declaration configurationdeclaration -> prPrec i 0 (concatD [prt 0 configurationdeclaration])
    DeclarationSubprogram_declaration subprogramdeclaration -> prPrec i 0 (concatD [prt 0 subprogramdeclaration])
    DeclarationPackage_declaration packagedeclaration -> prPrec i 0 (concatD [prt 0 packagedeclaration])

instance Print Delay_mechanism where
  prt i e = case e of
    Delay_mechanism_TRANSPORT -> prPrec i 0 (concatD [doc (showString "TRANSPORT")])
    Delay_mechanism1 mayberejecttimes -> prPrec i 0 (concatD [prt 0 mayberejecttimes, doc (showString "INERTIAL")])
  prtList _ [] = (concatD [])
  prtList _ (x:xs) = (concatD [prt 0 x, prt 0 xs])
instance Print MaybeRejectTime where
  prt i e = case e of
    MaybeRejectTime timeexpression -> prPrec i 0 (concatD [doc (showString "REJECT"), prt 0 timeexpression])
  prtList _ [] = (concatD [])
  prtList _ (x:xs) = (concatD [prt 0 x, prt 0 xs])
instance Print Design_file where
  prt i e = case e of
    Design_file designunits -> prPrec i 0 (concatD [prt 0 designunits])

instance Print Design_unit where
  prt i e = case e of
    Design_unit contextclause libraryunit -> prPrec i 0 (concatD [prt 0 contextclause, prt 0 libraryunit])
  prtList _ [x] = (concatD [prt 0 x])
  prtList _ (x:xs) = (concatD [prt 0 x, prt 0 xs])
instance Print Designator where
  prt i e = case e of
    DesignatorIdentifier identifier -> prPrec i 0 (concatD [prt 0 identifier])
    DesignatorOperator_symbol operatorsymbol -> prPrec i 0 (concatD [prt 0 operatorsymbol])
  prtList _ [] = (concatD [])
  prtList _ (x:xs) = (concatD [prt 0 x, prt 0 xs])
instance Print Direction where
  prt i e = case e of
    Direction_TO -> prPrec i 0 (concatD [doc (showString "TO")])
    Direction_DOWNTO -> prPrec i 0 (concatD [doc (showString "DOWNTO")])

instance Print Disconnection_specification where
  prt i e = case e of
    Disconnection_specification guardedsignalspecification timeexpression -> prPrec i 0 (concatD [doc (showString "DISCONNECT"), prt 0 guardedsignalspecification, doc (showString "AFTER"), prt 0 timeexpression, doc (showString ";")])

instance Print Discrete_range where
  prt i e = case e of
    Discrete_rangeDiscrete_subtype_indication discretesubtypeindication -> prPrec i 0 (concatD [prt 0 discretesubtypeindication])
    Discrete_rangeRange range -> prPrec i 0 (concatD [prt 0 range])
  prtList _ [x] = (concatD [prt 0 x])
  prtList _ (x:xs) = (concatD [prt 0 x, doc (showString ","), prt 0 xs])
instance Print Discrete_subtype_indication where
  prt i e = case e of
    Discrete_subtype_indication subprogramdeclarativeitem -> prPrec i 0 (concatD [prt 0 subprogramdeclarativeitem])

instance Print Element_declaration where
  prt i e = case e of
    Element_declaration identifierlist elementsubtypedefinition -> prPrec i 0 (concatD [prt 0 identifierlist, doc (showString ":"), prt 0 elementsubtypedefinition, doc (showString ";")])
  prtList _ [x] = (concatD [prt 0 x])
  prtList _ (x:xs) = (concatD [prt 0 x, prt 0 xs])
instance Print ChoiceAssign where
  prt i e = case e of
    ChoiceAssign choices -> prPrec i 0 (concatD [prt 0 choices, doc (showString "=>")])
  prtList _ [] = (concatD [])
  prtList _ (x:xs) = (concatD [prt 0 x, prt 0 xs])
instance Print Element_association where
  prt i e = case e of
    Element_association choiceassigns expression -> prPrec i 0 (concatD [prt 0 choiceassigns, prt 0 expression])
  prtList _ [] = (concatD [])
  prtList _ [x] = (concatD [prt 0 x])
  prtList _ (x:xs) = (concatD [prt 0 x, doc (showString ","), prt 0 xs])
instance Print Element_subtype_definition where
  prt i e = case e of
    Element_subtype_definition subtypeindication -> prPrec i 0 (concatD [prt 0 subtypeindication])

instance Print Entity_aspect where
  prt i e = case e of
    Entity_aspect1 entityname pararchitectureidentifiers -> prPrec i 0 (concatD [doc (showString "ENTITY"), prt 0 entityname, prt 0 pararchitectureidentifiers])
    Entity_aspect2 configurationname -> prPrec i 0 (concatD [doc (showString "CONFIGURATION"), prt 0 configurationname])
    Entity_aspect_OPEN -> prPrec i 0 (concatD [doc (showString "OPEN")])

instance Print Configuration_name where
  prt i e = case e of
    Configuration_name name -> prPrec i 0 (concatD [prt 0 name])

instance Print ParArchitecture_identifier where
  prt i e = case e of
    ParArchitecture_identifier architectureidentifier -> prPrec i 0 (concatD [doc (showString "("), prt 0 architectureidentifier, doc (showString ")")])
  prtList _ [x] = (concatD [prt 0 x])
  prtList _ (x:xs) = (concatD [prt 0 x, prt 0 xs])
instance Print UseEntity where
  prt i e = case e of
    UseEntity entityaspect -> prPrec i 0 (concatD [doc (showString "USE"), prt 0 entityaspect])
  prtList _ [] = (concatD [])
  prtList _ [] = (concatD [])
  prtList _ [] = (concatD [])
  prtList _ (x:xs) = (concatD [prt 0 x, prt 0 xs])
  prtList _ (x:xs) = (concatD [prt 0 x, prt 0 xs])
  prtList _ (x:xs) = (concatD [prt 0 x, prt 0 xs])
instance Print Entity_class where
  prt i e = case e of
    Entity_class_ENTITY -> prPrec i 0 (concatD [doc (showString "ENTITY")])
    Entity_class_ARCHITECTURE -> prPrec i 0 (concatD [doc (showString "ARCHITECTURE")])
    Entity_class_CONFIGURATION -> prPrec i 0 (concatD [doc (showString "CONFIGURATION")])
    Entity_class_PROCEDURE -> prPrec i 0 (concatD [doc (showString "PROCEDURE")])
    Entity_class_FUNCTION -> prPrec i 0 (concatD [doc (showString "FUNCTION")])
    Entity_class_PACKAGE -> prPrec i 0 (concatD [doc (showString "PACKAGE")])
    Entity_class_TYPE -> prPrec i 0 (concatD [doc (showString "TYPE")])
    Entity_class_SUBTYPE -> prPrec i 0 (concatD [doc (showString "SUBTYPE")])
    Entity_class_CONSTANT -> prPrec i 0 (concatD [doc (showString "CONSTANT")])
    Entity_class_SIGNAL -> prPrec i 0 (concatD [doc (showString "SIGNAL")])
    Entity_class_VARIABLE -> prPrec i 0 (concatD [doc (showString "VARIABLE")])
    Entity_class_COMPONENT -> prPrec i 0 (concatD [doc (showString "COMPONENT")])
    Entity_class_LABEL -> prPrec i 0 (concatD [doc (showString "LABEL")])
    Entity_class_LITERAL -> prPrec i 0 (concatD [doc (showString "LITERAL")])
    Entity_class_UNITS -> prPrec i 0 (concatD [doc (showString "UNITS")])
    Entity_class_GROUP -> prPrec i 0 (concatD [doc (showString "GROUP")])
    Entity_class_FILE -> prPrec i 0 (concatD [doc (showString "FILE")])

instance Print ECArrows where
  prt i e = case e of
    ECArrows -> prPrec i 0 (concatD [doc (showString "<>")])
  prtList _ [] = (concatD [])
  prtList _ (x:xs) = (concatD [prt 0 x, prt 0 xs])
instance Print Entity_class_entry where
  prt i e = case e of
    Entity_class_entry entityclass ecarrowss -> prPrec i 0 (concatD [prt 0 entityclass, prt 0 ecarrowss])
  prtList _ [x] = (concatD [prt 0 x])
  prtList _ (x:xs) = (concatD [prt 0 x, doc (showString ","), prt 0 xs])
instance Print Entity_class_entry_list where
  prt i e = case e of
    Entity_class_entry_list entityclassentrys -> prPrec i 0 (concatD [prt 0 entityclassentrys])

instance Print Entity_declaration where
  prt i e = case e of
    Entity_declaration identifier entityheader entitydeclarativepart beginentitystatementparts entitytexts entitysimplenames -> prPrec i 0 (concatD [doc (showString "ENTITY"), prt 0 identifier, doc (showString "IS"), prt 0 entityheader, prt 0 entitydeclarativepart, prt 0 beginentitystatementparts, doc (showString "END"), prt 0 entitytexts, prt 0 entitysimplenames, doc (showString ";")])

instance Print BEGINEntity_statement_part where
  prt i e = case e of
    BEGINEntity_statement_part entitystatementpart -> prPrec i 0 (concatD [doc (showString "BEGIN"), prt 0 entitystatementpart])
  prtList _ [] = (concatD [])
  prtList _ (x:xs) = (concatD [prt 0 x, prt 0 xs])
instance Print ENTITYText where
  prt i e = case e of
    ENTITYText entitystatementpart -> prPrec i 0 (concatD [doc (showString "ENTITY"), prt 0 entitystatementpart])
  prtList _ [] = (concatD [])
  prtList _ (x:xs) = (concatD [prt 0 x, prt 0 xs])
instance Print Entity_simple_name where
  prt i e = case e of
    Entity_simple_name simplename -> prPrec i 0 (concatD [prt 0 simplename])
  prtList _ [] = (concatD [])
  prtList _ (x:xs) = (concatD [prt 0 x, prt 0 xs])
instance Print Entity_declarative_item where
  prt i e = case e of
    Entity_declarative_itemSubprogram_declaration subprogramdeclaration -> prPrec i 0 (concatD [prt 0 subprogramdeclaration])
    Entity_declarative_itemSubprogram_body subprogrambody -> prPrec i 0 (concatD [prt 0 subprogrambody])
    Entity_declarative_itemType_declaration typedeclaration -> prPrec i 0 (concatD [prt 0 typedeclaration])
    Entity_declarative_itemSubtype_declaration subtypedeclaration -> prPrec i 0 (concatD [prt 0 subtypedeclaration])
    Entity_declarative_itemConstant_declaration constantdeclaration -> prPrec i 0 (concatD [prt 0 constantdeclaration])
    Entity_declarative_itemSignal_declaration signaldeclaration -> prPrec i 0 (concatD [prt 0 signaldeclaration])
    Entity_declarative_itemShared_variable_declaration sharedvariabledeclaration -> prPrec i 0 (concatD [prt 0 sharedvariabledeclaration])
    Entity_declarative_itemFile_declaration filedeclaration -> prPrec i 0 (concatD [prt 0 filedeclaration])
    Entity_declarative_itemAlias_declaration aliasdeclaration -> prPrec i 0 (concatD [prt 0 aliasdeclaration])
    Entity_declarative_itemAttribute_declaration attributedeclaration -> prPrec i 0 (concatD [prt 0 attributedeclaration])
    Entity_declarative_itemAttribute_specification attributespecification -> prPrec i 0 (concatD [prt 0 attributespecification])
    Entity_declarative_itemDisconnection_specification disconnectionspecification -> prPrec i 0 (concatD [prt 0 disconnectionspecification])
    Entity_declarative_itemUse_clause useclause -> prPrec i 0 (concatD [prt 0 useclause])
    Entity_declarative_itemGroup_template_declaration grouptemplatedeclaration -> prPrec i 0 (concatD [prt 0 grouptemplatedeclaration])
    Entity_declarative_itemGroup_declaration groupdeclaration -> prPrec i 0 (concatD [prt 0 groupdeclaration])
  prtList _ [] = (concatD [])
  prtList _ (x:xs) = (concatD [prt 0 x, prt 0 xs])
instance Print Entity_declarative_part where
  prt i e = case e of
    Entity_declarative_part entitydeclarativeitems -> prPrec i 0 (concatD [prt 0 entitydeclarativeitems])

instance Print Entity_designator where
  prt i e = case e of
    Entity_designator entitytag signatures -> prPrec i 0 (concatD [prt 0 entitytag, prt 0 signatures])
  prtList _ [x] = (concatD [prt 0 x])
  prtList _ (x:xs) = (concatD [prt 0 x, prt 0 xs])
instance Print Entity_header where
  prt i e = case e of
    Entity_header formalgenericclauses formalportclauses -> prPrec i 0 (concatD [prt 0 formalgenericclauses, prt 0 formalportclauses])

instance Print Formal_generic_clause where
  prt i e = case e of
    Formal_generic_clause genericclause -> prPrec i 0 (concatD [prt 0 genericclause])
  prtList _ [] = (concatD [])
  prtList _ (x:xs) = (concatD [prt 0 x, prt 0 xs])
instance Print Formal_port_clause where
  prt i e = case e of
    Formal_port_clause portclause -> prPrec i 0 (concatD [prt 0 portclause])
  prtList _ [] = (concatD [])
  prtList _ (x:xs) = (concatD [prt 0 x, prt 0 xs])
instance Print Entity_name_list where
  prt i e = case e of
    Entity_name_list1 entitydesignators -> prPrec i 0 (concatD [prt 0 entitydesignators])
    Entity_name_list_OTHERS -> prPrec i 0 (concatD [doc (showString "OTHERS")])
    Entity_name_list_ALL -> prPrec i 0 (concatD [doc (showString "ALL")])

instance Print Entity_specification where
  prt i e = case e of
    Entity_specification entitynamelist entityclass -> prPrec i 0 (concatD [prt 0 entitynamelist, doc (showString ":"), prt 0 entityclass])

instance Print Entity_statement where
  prt i e = case e of
    Entity_statementConcurrent_assertion_statement concurrentassertionstatement -> prPrec i 0 (concatD [prt 0 concurrentassertionstatement])
    Entity_statementPassive_concurrent_procedure_call_statement passiveconcurrentprocedurecallstatement -> prPrec i 0 (concatD [prt 0 passiveconcurrentprocedurecallstatement])
    Entity_statementPassive_process_statement passiveprocessstatement -> prPrec i 0 (concatD [prt 0 passiveprocessstatement])
  prtList _ [] = (concatD [])
  prtList _ (x:xs) = (concatD [prt 0 x, prt 0 xs])
instance Print Passive_process_statement where
  prt i e = case e of
    Passive_process_statement processstatement -> prPrec i 0 (concatD [prt 0 processstatement])

instance Print Passive_concurrent_procedure_call_statement where
  prt i e = case e of
    Passive_concurrent_procedure_call_statement concurrentprocedurecallstatement -> prPrec i 0 (concatD [prt 0 concurrentprocedurecallstatement])

instance Print Entity_statement_part where
  prt i e = case e of
    Entity_statement_part entitystatements -> prPrec i 0 (concatD [prt 0 entitystatements])

instance Print Entity_tag where
  prt i e = case e of
    Entity_tagSimple_name simplename -> prPrec i 0 (concatD [prt 0 simplename])
    Entity_tagCharacter_literal characterliteral -> prPrec i 0 (concatD [prt 0 characterliteral])
    Entity_tagOperator_symbol operatorsymbol -> prPrec i 0 (concatD [prt 0 operatorsymbol])

instance Print Enumeration_literal where
  prt i e = case e of
    Enumeration_literalIdentifier identifier -> prPrec i 0 (concatD [prt 0 identifier])
    Enumeration_literalCharacter_literal characterliteral -> prPrec i 0 (concatD [prt 0 characterliteral])
  prtList _ [x] = (concatD [prt 0 x])
  prtList _ (x:xs) = (concatD [prt 0 x, doc (showString ","), prt 0 xs])
instance Print Enumeration_type_definition where
  prt i e = case e of
    Enumeration_type_definition enumerationliterals -> prPrec i 0 (concatD [doc (showString "("), prt 0 enumerationliterals, doc (showString ")")])

instance Print Exit_statement where
  prt i e = case e of
    Exit_statement labels looplabels whenconditions -> prPrec i 0 (concatD [prt 0 labels, doc (showString "EXIT"), prt 0 looplabels, prt 0 whenconditions, doc (showString ";")])

instance Print Exponent where
  prt i e = case e of
    Exponent1 plusop vinteger -> prPrec i 0 (concatD [doc (showString "E"), prt 0 plusop, prt 0 vinteger])
    Exponent2 vinteger -> prPrec i 0 (concatD [doc (showString "E"), doc (showString "-"), prt 0 vinteger])
  prtList _ [] = (concatD [])
  prtList _ (x:xs) = (concatD [prt 0 x, prt 0 xs])
instance Print PlusOp where
  prt i e = case e of
    PlusOp -> prPrec i 0 (concatD [doc (showString "+")])
  prtList _ [] = (concatD [])
  prtList _ (x:xs) = (concatD [prt 0 x, prt 0 xs])
instance Print Expression where
  prt i e = case e of
    Expression1 relation1 expops relation2 -> prPrec i 0 (concatD [prt 0 relation1, prt 0 expops, prt 0 relation2])
    ExpressionRelation relation -> prPrec i 0 (concatD [prt 0 relation])
  prtList _ [] = (concatD [])
  prtList _ [x] = (concatD [prt 0 x])
  prtList _ (x:xs) = (concatD [prt 0 x, doc (showString ","), prt 0 xs])
  prtList _ (x:xs) = (concatD [prt 0 x, prt 0 xs])
instance Print ExpOps where
  prt i e = case e of
    ExpOps_AND -> prPrec i 0 (concatD [doc (showString "AND")])
    ExpOps_OR -> prPrec i 0 (concatD [doc (showString "OR")])
    ExpOps_XOR -> prPrec i 0 (concatD [doc (showString "XOR")])
    ExpOps_NAND -> prPrec i 0 (concatD [doc (showString "NAND")])
    ExpOps_NOR -> prPrec i 0 (concatD [doc (showString "NOR")])
    ExpOps_XNOR -> prPrec i 0 (concatD [doc (showString "XNOR")])

instance Print Extended_digit where
  prt i e = case e of
    Extended_digitDigit digit -> prPrec i 0 (concatD [prt 0 digit])
    Extended_digitLetter letter -> prPrec i 0 (concatD [prt 0 letter])
  prtList _ [] = (concatD [])
  prtList _ [x] = (concatD [prt 0 x])
  prtList _ (x:xs) = (concatD [prt 0 x, doc (showString "_"), prt 0 xs])
instance Print Extended_identifier where
  prt i e = case e of
    Extended_identifier graphiccharacters -> prPrec i 0 (concatD [prt 0 graphiccharacters])

instance Print Factor where
  prt i e = case e of
    Factor1 primarys -> prPrec i 0 (concatD [prt 0 primarys])
    Factor2 primary -> prPrec i 0 (concatD [doc (showString "ABS"), prt 0 primary])
    Factor3 primary -> prPrec i 0 (concatD [doc (showString "NOT"), prt 0 primary])

instance Print File_declaration where
  prt i e = case e of
    File_declaration filematchs -> prPrec i 0 (concatD [prt 0 filematchs, doc (showString ";")])

instance Print FileMatch where
  prt i e = case e of
    FileMatch identifierlist subtypeindication fileopeninformation -> prPrec i 0 (concatD [doc (showString "FILE"), prt 0 identifierlist, doc (showString ":"), prt 0 subtypeindication, prt 0 fileopeninformation])
  prtList _ [] = (concatD [])
  prtList _ (x:xs) = (concatD [prt 0 x, prt 0 xs])
instance Print File_logical_name where
  prt i e = case e of
    File_logical_name stringexpression -> prPrec i 0 (concatD [prt 0 stringexpression])

instance Print String_expression where
  prt i e = case e of
    String_expression expression -> prPrec i 0 (concatD [prt 0 expression])

instance Print File_open_information where
  prt i e = case e of
    File_open_information openfiles filelogicalname -> prPrec i 0 (concatD [prt 0 openfiles, doc (showString "IS"), prt 0 filelogicalname])

instance Print OPENFile where
  prt i e = case e of
    OPENFile fileopenkindexpression -> prPrec i 0 (concatD [doc (showString "OPEN"), prt 0 fileopenkindexpression])
  prtList _ [] = (concatD [])
  prtList _ (x:xs) = (concatD [prt 0 x, prt 0 xs])
instance Print File_open_kind_expression where
  prt i e = case e of
    File_open_kind_expression expression -> prPrec i 0 (concatD [prt 0 expression])

instance Print File_type_definition where
  prt i e = case e of
    File_type_definition typemark -> prPrec i 0 (concatD [doc (showString "FILE"), doc (showString "OF"), prt 0 typemark])

instance Print Floating_type_definition where
  prt i e = case e of
    Floating_type_definition rangeconstraint -> prPrec i 0 (concatD [prt 0 rangeconstraint])

instance Print Formal_designator where
  prt i e = case e of
    Formal_designatorGeneric_name genericname -> prPrec i 0 (concatD [prt 0 genericname])
    Formal_designatorPort_name portname -> prPrec i 0 (concatD [prt 0 portname])
    Formal_designatorParameter_name parametername -> prPrec i 0 (concatD [prt 0 parametername])

instance Print Generic_name where
  prt i e = case e of
    Generic_name name -> prPrec i 0 (concatD [prt 0 name])

instance Print Port_name where
  prt i e = case e of
    Port_name name -> prPrec i 0 (concatD [prt 0 name])

instance Print Parameter_name where
  prt i e = case e of
    Parameter_name name -> prPrec i 0 (concatD [prt 0 name])

instance Print Formal_parameter_list where
  prt i e = case e of
    Formal_parameter_list parameterinterfacelist -> prPrec i 0 (concatD [prt 0 parameterinterfacelist])

instance Print Parameter_interface_list where
  prt i e = case e of
    Parameter_interface_list interfacelist -> prPrec i 0 (concatD [prt 0 interfacelist])

instance Print Formal_part where
  prt i e = case e of
    Formal_partFormal_designator formaldesignator -> prPrec i 0 (concatD [prt 0 formaldesignator])
    Formal_part1 functionname formaldesignator -> prPrec i 0 (concatD [prt 0 functionname, doc (showString "("), prt 0 formaldesignator, doc (showString ")")])
    Formal_part2 typemark formaldesignator -> prPrec i 0 (concatD [prt 0 typemark, doc (showString "("), prt 0 formaldesignator, doc (showString ")")])
  prtList _ [] = (concatD [])
  prtList _ [x] = (concatD [prt 0 x])
  prtList _ (x:xs) = (concatD [prt 0 x, doc (showString "=>"), prt 0 xs])
instance Print Function_name where
  prt i e = case e of
    Function_name name -> prPrec i 0 (concatD [prt 0 name])

instance Print Full_type_declaration where
  prt i e = case e of
    Full_type_declaration identifier typedefinition -> prPrec i 0 (concatD [doc (showString "TYPE"), prt 0 identifier, doc (showString "IS"), prt 0 typedefinition, doc (showString ";")])

instance Print Function_call where
  prt i e = case e of
    Function_call functionname actualparameterpartpars -> prPrec i 0 (concatD [prt 0 functionname, prt 0 actualparameterpartpars])

instance Print Actual_parameter_partPar where
  prt i e = case e of
    Actual_parameter_partPar actualparameterpart -> prPrec i 0 (concatD [doc (showString "("), prt 0 actualparameterpart, doc (showString ")")])
  prtList _ [] = (concatD [])
  prtList _ (x:xs) = (concatD [prt 0 x, prt 0 xs])
instance Print BEGINBlock_declarative_item where
  prt i e = case e of
    BEGINBlock_declarative_item blockdeclarativeitems -> prPrec i 0 (concatD [prt 0 blockdeclarativeitems, doc (showString "BEGIN")])
  prtList _ [] = (concatD [])
  prtList _ (x:xs) = (concatD [prt 0 x, prt 0 xs])
instance Print Generate_statement where
  prt i e = case e of
    Generate_statement generatelabel generationscheme beginblockdeclarativeitems concurrentstatements generatelabels -> prPrec i 0 (concatD [prt 0 generatelabel, doc (showString ":"), prt 0 generationscheme, doc (showString "GENERATE"), prt 0 beginblockdeclarativeitems, prt 0 concurrentstatements, doc (showString "END"), doc (showString "GENERATE"), prt 0 generatelabels, doc (showString ";")])

instance Print Generate_label where
  prt i e = case e of
    Generate_label label -> prPrec i 0 (concatD [prt 0 label])
  prtList _ [] = (concatD [])
  prtList _ (x:xs) = (concatD [prt 0 x, prt 0 xs])
instance Print Generation_scheme where
  prt i e = case e of
    Generation_scheme1 generateparameterspecification -> prPrec i 0 (concatD [doc (showString "FOR"), prt 0 generateparameterspecification])
    Generation_scheme2 condition -> prPrec i 0 (concatD [doc (showString "IF"), prt 0 condition])

instance Print Generate_parameter_specification where
  prt i e = case e of
    Generate_parameter_specification parameterspecification -> prPrec i 0 (concatD [prt 0 parameterspecification])

instance Print Generic_clause where
  prt i e = case e of
    Generic_clause genericlist -> prPrec i 0 (concatD [doc (showString "GENERIC"), doc (showString "("), prt 0 genericlist, doc (showString ")"), doc (showString ";")])

instance Print Generic_list where
  prt i e = case e of
    Generic_list genericinterfacelist -> prPrec i 0 (concatD [prt 0 genericinterfacelist])

instance Print Generic_interface_list where
  prt i e = case e of
    Generic_interface_list interfacelist -> prPrec i 0 (concatD [prt 0 interfacelist])

instance Print Generic_map_aspect where
  prt i e = case e of
    Generic_map_aspect genericassociationlist -> prPrec i 0 (concatD [doc (showString "GENERIC"), doc (showString "MAP"), doc (showString "("), prt 0 genericassociationlist, doc (showString ")")])
  prtList _ [] = (concatD [])
  prtList _ (x:xs) = (concatD [prt 0 x, prt 0 xs])
instance Print Generic_association_list where
  prt i e = case e of
    Generic_association_list associationlist -> prPrec i 0 (concatD [prt 0 associationlist])

instance Print Generic_map_aspectSemi where
  prt i e = case e of
    Generic_map_aspectSemi genericmapaspect -> prPrec i 0 (concatD [prt 0 genericmapaspect, doc (showString ";")])
  prtList _ [] = (concatD [])
  prtList _ (x:xs) = (concatD [prt 0 x, prt 0 xs])
instance Print Graphic_character where
  prt i e = case e of
    Graphic_characterBasic_graphic_character basicgraphiccharacter -> prPrec i 0 (concatD [prt 0 basicgraphiccharacter])
    Graphic_characterLower_case_letter lowercaseletter -> prPrec i 0 (concatD [prt 0 lowercaseletter])
    Graphic_characterOther_special_character otherspecialcharacter -> prPrec i 0 (concatD [prt 0 otherspecialcharacter])
  prtList _ [] = (concatD [])
  prtList _ [x] = (concatD [prt 0 x])
  prtList _ (x:xs) = (concatD [prt 0 x, prt 0 xs])
  prtList _ (x:xs) = (concatD [prt 0 x, prt 0 xs])
instance Print Other_special_character where
  prt i e = case e of
    Other_special_character -> prPrec i 0 (concatD [doc (showString "I DONT KOW WHAT GOES HERE")])

instance Print Group_constituent where
  prt i e = case e of
    Group_constituentName name -> prPrec i 0 (concatD [prt 0 name])
    Group_constituentCharacter_literal characterliteral -> prPrec i 0 (concatD [prt 0 characterliteral])
  prtList _ [x] = (concatD [prt 0 x])
  prtList _ (x:xs) = (concatD [prt 0 x, doc (showString ","), prt 0 xs])
instance Print Group_constituent_list where
  prt i e = case e of
    Group_constituent_list groupconstituents -> prPrec i 0 (concatD [prt 0 groupconstituents])

instance Print Group_template_declaration where
  prt i e = case e of
    Group_template_declaration identifier entityclassentrylist -> prPrec i 0 (concatD [doc (showString "GROUP"), prt 0 identifier, doc (showString "IS"), doc (showString "("), prt 0 entityclassentrylist, doc (showString ")"), doc (showString ";")])

instance Print Group_declaration where
  prt i e = case e of
    Group_declaration identifier grouptemplatename groupconstituentlist -> prPrec i 0 (concatD [doc (showString "GROUP"), prt 0 identifier, doc (showString ":"), prt 0 grouptemplatename, doc (showString "("), prt 0 groupconstituentlist, doc (showString ")"), doc (showString ";")])

instance Print Group_template_name where
  prt i e = case e of
    Group_template_name name -> prPrec i 0 (concatD [prt 0 name])

instance Print Guarded_signal_specification where
  prt i e = case e of
    Guarded_signal_specification guardedsignallist typemark -> prPrec i 0 (concatD [prt 0 guardedsignallist, doc (showString ":"), prt 0 typemark])

instance Print Guarded_signal_list where
  prt i e = case e of
    Guarded_signal_list signallist -> prPrec i 0 (concatD [prt 0 signallist])

instance Print Identifier where
  prt i e = case e of
    IdentifierBasic_identifier basicidentifier -> prPrec i 0 (concatD [prt 0 basicidentifier])
    IdentifierExtended_identifier extendedidentifier -> prPrec i 0 (concatD [prt 0 extendedidentifier])
  prtList _ [x] = (concatD [prt 0 x])
  prtList _ (x:xs) = (concatD [prt 0 x, doc (showString ","), prt 0 xs])
instance Print Identifier_list where
  prt i e = case e of
    Identifier_list identifiers -> prPrec i 0 (concatD [prt 0 identifiers])

instance Print If_statement where
  prt i e = case e of
    If_statement iflabelcolons condition sequenceofstatements elsestatements elseifstatements iflabels -> prPrec i 0 (concatD [prt 0 iflabelcolons, doc (showString "IF"), prt 0 condition, doc (showString "THEN"), prt 0 sequenceofstatements, prt 0 elsestatements, prt 0 elseifstatements, doc (showString "END"), doc (showString "IF"), prt 0 iflabels, doc (showString ";")])

instance Print If_labelColon where
  prt i e = case e of
    If_labelColon iflabel -> prPrec i 0 (concatD [prt 0 iflabel, doc (showString ":")])
  prtList _ [] = (concatD [])
  prtList _ [x] = (concatD [prt 0 x])
  prtList _ (x:xs) = (concatD [prt 0 x, doc (showString ","), prt 0 xs])
instance Print ELSEIFStatement where
  prt i e = case e of
    ELSEIFStatement condition sequenceofstatements -> prPrec i 0 (concatD [doc (showString "ELSIF"), prt 0 condition, doc (showString "THEN"), prt 0 sequenceofstatements])
  prtList _ [] = (concatD [])
  prtList _ (x:xs) = (concatD [prt 0 x, prt 0 xs])
instance Print ELSEStatement where
  prt i e = case e of
    ELSEStatement sequenceofstatements -> prPrec i 0 (concatD [doc (showString "ELSE"), prt 0 sequenceofstatements])
  prtList _ [] = (concatD [])
  prtList _ (x:xs) = (concatD [prt 0 x, prt 0 xs])
instance Print If_label where
  prt i e = case e of
    If_label label -> prPrec i 0 (concatD [prt 0 label])
  prtList _ [] = (concatD [])
  prtList _ [x] = (concatD [prt 0 x])
  prtList _ (x:xs) = (concatD [prt 0 x, doc (showString ","), prt 0 xs])
instance Print Incomplete_type_declaration where
  prt i e = case e of
    Incomplete_type_declaration identifier -> prPrec i 0 (concatD [doc (showString "TYPE"), prt 0 identifier, doc (showString ";")])

instance Print Index_constraint where
  prt i e = case e of
    Index_constraint discreteranges -> prPrec i 0 (concatD [doc (showString "("), prt 0 discreteranges, doc (showString ")")])

instance Print Index_specification where
  prt i e = case e of
    Index_specificationDiscrete_range discreterange -> prPrec i 0 (concatD [prt 0 discreterange])
    Index_specificationStatic_expression staticexpression -> prPrec i 0 (concatD [prt 0 staticexpression])

instance Print Static_expression where
  prt i e = case e of
    Static_expression expression -> prPrec i 0 (concatD [prt 0 expression])

instance Print Index_subtype_definition where
  prt i e = case e of
    Index_subtype_definition typemark range -> prPrec i 0 (concatD [prt 0 typemark, prt 0 range, doc (showString "<>")])
  prtList _ [] = (concatD [])
  prtList _ [x] = (concatD [prt 0 x])
  prtList _ (x:xs) = (concatD [prt 0 x, doc (showString ","), prt 0 xs])
instance Print Indexed_name where
  prt i e = case e of
    Indexed_name prefix expressions -> prPrec i 0 (concatD [prt 0 prefix, doc (showString "("), prt 0 expressions, doc (showString ")")])

instance Print Instantiated_unit where
  prt i e = case e of
    Instantiated_unit1 componenttexts componentname -> prPrec i 0 (concatD [prt 0 componenttexts, prt 0 componentname])
    Instantiated_unit2 entityname architectureidentifierpars -> prPrec i 0 (concatD [doc (showString "ENTITY"), prt 0 entityname, prt 0 architectureidentifierpars])
    Instantiated_unit3 configurationname -> prPrec i 0 (concatD [doc (showString "CONFIGURATION"), prt 0 configurationname])

instance Print COMPONENTText where
  prt i e = case e of
    COMPONENTText -> prPrec i 0 (concatD [doc (showString "COMPONENT")])
  prtList _ [] = (concatD [])
  prtList _ (x:xs) = (concatD [prt 0 x, prt 0 xs])
instance Print Architecture_identifierPar where
  prt i e = case e of
    Architecture_identifierPar architectureidentifier -> prPrec i 0 (concatD [doc (showString "("), prt 0 architectureidentifier, doc (showString ")")])
  prtList _ [] = (concatD [])
  prtList _ (x:xs) = (concatD [prt 0 x, prt 0 xs])
instance Print Entity_name where
  prt i e = case e of
    Entity_name name -> prPrec i 0 (concatD [prt 0 name])

instance Print Architecture_identifier where
  prt i e = case e of
    Architecture_identifier identifier -> prPrec i 0 (concatD [prt 0 identifier])

instance Print Instantiation_list where
  prt i e = case e of
    Instantiation_list1 instantiationlabels -> prPrec i 0 (concatD [prt 0 instantiationlabels])
    Instantiation_list_OTHERS -> prPrec i 0 (concatD [doc (showString "OTHERS")])
    Instantiation_list_ALL -> prPrec i 0 (concatD [doc (showString "ALL")])

instance Print VInteger where
  prt i e = case e of
    VInteger numstring -> prPrec i 0 (concatD [prt 0 numstring])

instance Print IntAccuum where
  prt i e = case e of
    IntAccuum1 digit intaccuum -> prPrec i 0 (concatD [prt 0 digit, prt 0 intaccuum])
    IntAccuum2 digit underline intaccuum -> prPrec i 0 (concatD [prt 0 digit, prt 0 underline, prt 0 intaccuum])
    IntAccuumDigit digit -> prPrec i 0 (concatD [prt 0 digit])
  prtList _ [] = (concatD [])
  prtList _ (x:xs) = (concatD [prt 0 x, prt 0 xs])
instance Print Underline where
  prt i e = case e of
    Underline -> prPrec i 0 (concatD [doc (showString "_")])
  prtList _ [] = (concatD [])
  prtList _ (x:xs) = (concatD [prt 0 x, prt 0 xs])
instance Print Integer_type_definition where
  prt i e = case e of
    Integer_type_definition rangeconstraint -> prPrec i 0 (concatD [prt 0 rangeconstraint])

instance Print Interface_constant_declaration where
  prt i e = case e of
    Interface_constant_declaration constanttexts identifierlist intexts subtypeindication staticexpressionassigns -> prPrec i 0 (concatD [prt 0 constanttexts, prt 0 identifierlist, doc (showString ":"), prt 0 intexts, prt 0 subtypeindication, prt 0 staticexpressionassigns])

instance Print Interface_declaration where
  prt i e = case e of
    Interface_declarationInterface_constant_declaration interfaceconstantdeclaration -> prPrec i 0 (concatD [prt 0 interfaceconstantdeclaration])
    Interface_declarationInterface_signal_declaration interfacesignaldeclaration -> prPrec i 0 (concatD [prt 0 interfacesignaldeclaration])
    Interface_declarationInterface_variable_declaration interfacevariabledeclaration -> prPrec i 0 (concatD [prt 0 interfacevariabledeclaration])
    Interface_declarationInterface_file_declaration interfacefiledeclaration -> prPrec i 0 (concatD [prt 0 interfacefiledeclaration])

instance Print Interface_element where
  prt i e = case e of
    Interface_element interfacedeclaration -> prPrec i 0 (concatD [prt 0 interfacedeclaration])
  prtList _ [] = (concatD [])
  prtList _ [x] = (concatD [prt 0 x])
  prtList _ [x] = (concatD [prt 0 x])
  prtList _ (x:xs) = (concatD [prt 0 x, doc (showString ";"), prt 0 xs])
  prtList _ (x:xs) = (concatD [prt 0 x, doc (showString ";"), prt 0 xs])
instance Print Interface_file_declaration where
  prt i e = case e of
    Interface_file_declaration identifierlist subtypeindication -> prPrec i 0 (concatD [doc (showString "FILE"), prt 0 identifierlist, doc (showString ":"), prt 0 subtypeindication])

instance Print Interface_list where
  prt i e = case e of
    Interface_list interfaceelements -> prPrec i 0 (concatD [prt 0 interfaceelements])

instance Print Interface_signal_declaration where
  prt i e = case e of
    Interface_signal_declaration signaltexts identifierlist modes subtypeindication bustexts staticexpressionassigns -> prPrec i 0 (concatD [prt 0 signaltexts, prt 0 identifierlist, doc (showString ":"), prt 0 modes, prt 0 subtypeindication, prt 0 bustexts, prt 0 staticexpressionassigns])

instance Print Interface_variable_declaration where
  prt i e = case e of
    Interface_variable_declaration variabletexts identifierlist modes subtypeindication staticexpressionassigns -> prPrec i 0 (concatD [prt 0 variabletexts, prt 0 identifierlist, doc (showString ":"), prt 0 modes, prt 0 subtypeindication, prt 0 staticexpressionassigns])

instance Print Iteration_scheme where
  prt i e = case e of
    Iteration_scheme1 condition -> prPrec i 0 (concatD [doc (showString "WHILE"), prt 0 condition])
    Iteration_scheme2 loopparameterspecification -> prPrec i 0 (concatD [doc (showString "FOR"), prt 0 loopparameterspecification])
  prtList _ [] = (concatD [])
  prtList _ (x:xs) = (concatD [prt 0 x, prt 0 xs])
instance Print Loop_parameter_specification where
  prt i e = case e of
    Loop_parameter_specification parameterspecification -> prPrec i 0 (concatD [prt 0 parameterspecification])

instance Print Label where
  prt i e = case e of
    Label identifier -> prPrec i 0 (concatD [prt 0 identifier])
  prtList _ [] = (concatD [])
  prtList _ [x] = (concatD [prt 0 x])
  prtList _ (x:xs) = (concatD [prt 0 x, doc (showString ":"), prt 0 xs])
instance Print Letter where
  prt i e = case e of
    LetterUpper_case_letter uppercaseletter -> prPrec i 0 (concatD [prt 0 uppercaseletter])
    LetterLower_case_letter lowercaseletter -> prPrec i 0 (concatD [prt 0 lowercaseletter])

instance Print Upper_case_letter where
  prt i e = case e of
    Upper_case_letter_A -> prPrec i 0 (concatD [doc (showString "A")])
    Upper_case_letter_B -> prPrec i 0 (concatD [doc (showString "B")])
    Upper_case_letter_C -> prPrec i 0 (concatD [doc (showString "C")])
    Upper_case_letter_D -> prPrec i 0 (concatD [doc (showString "D")])
    Upper_case_letter_E -> prPrec i 0 (concatD [doc (showString "E")])
    Upper_case_letter_F -> prPrec i 0 (concatD [doc (showString "F")])
    Upper_case_letter_G -> prPrec i 0 (concatD [doc (showString "G")])
    Upper_case_letter_H -> prPrec i 0 (concatD [doc (showString "H")])
    Upper_case_letter_I -> prPrec i 0 (concatD [doc (showString "I")])
    Upper_case_letter_J -> prPrec i 0 (concatD [doc (showString "J")])
    Upper_case_letter_K -> prPrec i 0 (concatD [doc (showString "K")])
    Upper_case_letter_L -> prPrec i 0 (concatD [doc (showString "L")])
    Upper_case_letter_M -> prPrec i 0 (concatD [doc (showString "M")])
    Upper_case_letter_N -> prPrec i 0 (concatD [doc (showString "N")])
    Upper_case_letter_O -> prPrec i 0 (concatD [doc (showString "O")])
    Upper_case_letter_P -> prPrec i 0 (concatD [doc (showString "P")])
    Upper_case_letter_Q -> prPrec i 0 (concatD [doc (showString "Q")])
    Upper_case_letter_R -> prPrec i 0 (concatD [doc (showString "R")])
    Upper_case_letter_S -> prPrec i 0 (concatD [doc (showString "S")])
    Upper_case_letter_T -> prPrec i 0 (concatD [doc (showString "T")])
    Upper_case_letter_U -> prPrec i 0 (concatD [doc (showString "U")])
    Upper_case_letter_V -> prPrec i 0 (concatD [doc (showString "V")])
    Upper_case_letter_W -> prPrec i 0 (concatD [doc (showString "W")])
    Upper_case_letter_X -> prPrec i 0 (concatD [doc (showString "X")])
    Upper_case_letter_Y -> prPrec i 0 (concatD [doc (showString "Y")])
    Upper_case_letter_Z -> prPrec i 0 (concatD [doc (showString "Z")])

instance Print Lower_case_letter where
  prt i e = case e of
    Lower_case_letter_a -> prPrec i 0 (concatD [doc (showString "a")])
    Lower_case_letter_b -> prPrec i 0 (concatD [doc (showString "b")])
    Lower_case_letter_c -> prPrec i 0 (concatD [doc (showString "c")])
    Lower_case_letter_d -> prPrec i 0 (concatD [doc (showString "d")])
    Lower_case_letter_e -> prPrec i 0 (concatD [doc (showString "e")])
    Lower_case_letter_f -> prPrec i 0 (concatD [doc (showString "f")])
    Lower_case_letter_g -> prPrec i 0 (concatD [doc (showString "g")])
    Lower_case_letter_h -> prPrec i 0 (concatD [doc (showString "h")])
    Lower_case_letter_i -> prPrec i 0 (concatD [doc (showString "i")])
    Lower_case_letter_j -> prPrec i 0 (concatD [doc (showString "j")])
    Lower_case_letter_k -> prPrec i 0 (concatD [doc (showString "k")])
    Lower_case_letter_l -> prPrec i 0 (concatD [doc (showString "l")])
    Lower_case_letter_m -> prPrec i 0 (concatD [doc (showString "m")])
    Lower_case_letter_n -> prPrec i 0 (concatD [doc (showString "n")])
    Lower_case_letter_o -> prPrec i 0 (concatD [doc (showString "o")])
    Lower_case_letter_p -> prPrec i 0 (concatD [doc (showString "p")])
    Lower_case_letter_q -> prPrec i 0 (concatD [doc (showString "q")])
    Lower_case_letter_r -> prPrec i 0 (concatD [doc (showString "r")])
    Lower_case_letter_s -> prPrec i 0 (concatD [doc (showString "s")])
    Lower_case_letter_t -> prPrec i 0 (concatD [doc (showString "t")])
    Lower_case_letter_u -> prPrec i 0 (concatD [doc (showString "u")])
    Lower_case_letter_v -> prPrec i 0 (concatD [doc (showString "v")])
    Lower_case_letter_w -> prPrec i 0 (concatD [doc (showString "w")])
    Lower_case_letter_x -> prPrec i 0 (concatD [doc (showString "x")])
    Lower_case_letter_y -> prPrec i 0 (concatD [doc (showString "y")])
    Lower_case_letter_z -> prPrec i 0 (concatD [doc (showString "z")])

instance Print Letter_or_digit where
  prt i e = case e of
    Letter_or_digitLetter letter -> prPrec i 0 (concatD [prt 0 letter])
    Letter_or_digitDigit digit -> prPrec i 0 (concatD [prt 0 digit])

instance Print Library_clause where
  prt i e = case e of
    Library_clause logicalnamelist -> prPrec i 0 (concatD [doc (showString "LIBRARY"), prt 0 logicalnamelist, doc (showString ";")])

instance Print Library_unit where
  prt i e = case e of
    Library_unitPrimary_unit primaryunit -> prPrec i 0 (concatD [prt 0 primaryunit])
    Library_unitSecondary_unit secondaryunit -> prPrec i 0 (concatD [prt 0 secondaryunit])

instance Print Literal where
  prt i e = case e of
    LiteralNumeric_literal numericliteral -> prPrec i 0 (concatD [prt 0 numericliteral])
    LiteralEnumeration_literal enumerationliteral -> prPrec i 0 (concatD [prt 0 enumerationliteral])
    LiteralString_literal stringliteral -> prPrec i 0 (concatD [prt 0 stringliteral])
    LiteralBit_string_literal bitstringliteral -> prPrec i 0 (concatD [prt 0 bitstringliteral])
    Literal_NULL -> prPrec i 0 (concatD [doc (showString "NULL")])

instance Print Logical_name where
  prt i e = case e of
    Logical_name identifier -> prPrec i 0 (concatD [prt 0 identifier])
  prtList _ [x] = (concatD [prt 0 x])
  prtList _ (x:xs) = (concatD [prt 0 x, doc (showString ","), prt 0 xs])
instance Print Logical_name_list where
  prt i e = case e of
    Logical_name_list logicalnames -> prPrec i 0 (concatD [prt 0 logicalnames])

instance Print Logical_operator where
  prt i e = case e of
    Logical_operator_AND -> prPrec i 0 (concatD [doc (showString "AND")])
    Logical_operator_OR -> prPrec i 0 (concatD [doc (showString "OR")])
    Logical_operator_NAND -> prPrec i 0 (concatD [doc (showString "NAND")])
    Logical_operator_NOR -> prPrec i 0 (concatD [doc (showString "NOR")])
    Logical_operator_XOR -> prPrec i 0 (concatD [doc (showString "XOR")])
    Logical_operator_XNOR -> prPrec i 0 (concatD [doc (showString "XNOR")])

instance Print Loop_statement where
  prt i e = case e of
    Loop_statement looplabelcolons iterationschemes sequenceofstatements looplabels -> prPrec i 0 (concatD [prt 0 looplabelcolons, prt 0 iterationschemes, doc (showString "LOOP"), prt 0 sequenceofstatements, doc (showString "END"), doc (showString "LOOP"), prt 0 looplabels, doc (showString ";")])

instance Print Miscellaneous_operator where
  prt i e = case e of
    Miscellaneous_operator1 -> prPrec i 0 (concatD [doc (showString "**")])
    Miscellaneous_operator_ABS -> prPrec i 0 (concatD [doc (showString "ABS")])
    Miscellaneous_operator_NOT -> prPrec i 0 (concatD [doc (showString "NOT")])

instance Print Mode where
  prt i e = case e of
    Mode_IN -> prPrec i 0 (concatD [doc (showString "IN")])
    Mode_OUT -> prPrec i 0 (concatD [doc (showString "OUT")])
    Mode_INOUT -> prPrec i 0 (concatD [doc (showString "INOUT")])
    Mode_BUFFER -> prPrec i 0 (concatD [doc (showString "BUFFER")])
    Mode_LINKAGE -> prPrec i 0 (concatD [doc (showString "LINKAGE")])
  prtList _ [] = (concatD [])
  prtList _ (x:xs) = (concatD [prt 0 x, prt 0 xs])
instance Print Multiplying_operator where
  prt i e = case e of
    Multiplying_operator1 -> prPrec i 0 (concatD [doc (showString "*")])
    Multiplying_operator2 -> prPrec i 0 (concatD [doc (showString "/")])
    Multiplying_operator_MOD -> prPrec i 0 (concatD [doc (showString "MOD")])
    Multiplying_operator_REM -> prPrec i 0 (concatD [doc (showString "REM")])

instance Print Name where
  prt i e = case e of
    NameSimple_name simplename -> prPrec i 0 (concatD [prt 0 simplename])
    NameOperator_symbol operatorsymbol -> prPrec i 0 (concatD [prt 0 operatorsymbol])
    NameSelected_name selectedname -> prPrec i 0 (concatD [prt 0 selectedname])
    NameIndexed_name indexedname -> prPrec i 0 (concatD [prt 0 indexedname])
    NameSlice_name slicename -> prPrec i 0 (concatD [prt 0 slicename])
    NameAttribute_name attributename -> prPrec i 0 (concatD [prt 0 attributename])

instance Print Next_statement where
  prt i e = case e of
    Next_statement labels looplabels whenconditions -> prPrec i 0 (concatD [prt 0 labels, doc (showString "NEXT"), prt 0 looplabels, prt 0 whenconditions, doc (showString ";")])

instance Print Null_statement where
  prt i e = case e of
    Null_statement labels -> prPrec i 0 (concatD [prt 0 labels, doc (showString "NULL"), doc (showString ";")])

instance Print Numeric_literal where
  prt i e = case e of
    Numeric_literalAbstract_literal abstractliteral -> prPrec i 0 (concatD [prt 0 abstractliteral])
    Numeric_literalPhysical_literal physicalliteral -> prPrec i 0 (concatD [prt 0 physicalliteral])

instance Print Object_declaration where
  prt i e = case e of
    Object_declarationConstant_declaration constantdeclaration -> prPrec i 0 (concatD [prt 0 constantdeclaration])
    Object_declarationSignal_declaration signaldeclaration -> prPrec i 0 (concatD [prt 0 signaldeclaration])
    Object_declarationVariable_declaration variabledeclaration -> prPrec i 0 (concatD [prt 0 variabledeclaration])
    Object_declarationFile_declaration filedeclaration -> prPrec i 0 (concatD [prt 0 filedeclaration])

instance Print Operator_symbol where
  prt i e = case e of
    Operator_symbol stringliteral -> prPrec i 0 (concatD [prt 0 stringliteral])

instance Print Options where
  prt i e = case e of
    Options guardedtexts delaymechanisms -> prPrec i 0 (concatD [prt 0 guardedtexts, prt 0 delaymechanisms])

instance Print Package_body where
  prt i e = case e of
    Package_body packagesimplename packagebodydeclarativepart packagebodytexts1 packagebodytexts2 -> prPrec i 0 (concatD [doc (showString "PACKAGE"), doc (showString "body"), prt 0 packagesimplename, doc (showString "IS"), prt 0 packagebodydeclarativepart, doc (showString "END"), prt 0 packagebodytexts1, prt 0 packagebodytexts2, doc (showString ";")])

instance Print Package_simple_name where
  prt i e = case e of
    Package_simple_name simplename -> prPrec i 0 (concatD [prt 0 simplename])
  prtList _ [] = (concatD [])
  prtList _ (x:xs) = (concatD [prt 0 x, prt 0 xs])
instance Print Package_body_declarative_item where
  prt i e = case e of
    Package_body_declarative_itemSubprogram_declaration subprogramdeclaration -> prPrec i 0 (concatD [prt 0 subprogramdeclaration])
    Package_body_declarative_itemSubprogram_body subprogrambody -> prPrec i 0 (concatD [prt 0 subprogrambody])
    Package_body_declarative_itemType_declaration typedeclaration -> prPrec i 0 (concatD [prt 0 typedeclaration])
    Package_body_declarative_itemSubtype_declaration subtypedeclaration -> prPrec i 0 (concatD [prt 0 subtypedeclaration])
    Package_body_declarative_itemConstant_declaration constantdeclaration -> prPrec i 0 (concatD [prt 0 constantdeclaration])
    Package_body_declarative_itemShared_variable_declaration sharedvariabledeclaration -> prPrec i 0 (concatD [prt 0 sharedvariabledeclaration])
    Package_body_declarative_itemFile_declaration filedeclaration -> prPrec i 0 (concatD [prt 0 filedeclaration])
    Package_body_declarative_itemAlias_declaration aliasdeclaration -> prPrec i 0 (concatD [prt 0 aliasdeclaration])
    Package_body_declarative_itemUse_clause useclause -> prPrec i 0 (concatD [prt 0 useclause])
    Package_body_declarative_itemGroup_template_declaration grouptemplatedeclaration -> prPrec i 0 (concatD [prt 0 grouptemplatedeclaration])
    Package_body_declarative_itemGroup_declaration groupdeclaration -> prPrec i 0 (concatD [prt 0 groupdeclaration])
  prtList _ [] = (concatD [])
  prtList _ (x:xs) = (concatD [prt 0 x, prt 0 xs])
instance Print Package_body_declarative_part where
  prt i e = case e of
    Package_body_declarative_part packagebodydeclarativeitems -> prPrec i 0 (concatD [prt 0 packagebodydeclarativeitems])

instance Print Package_declaration where
  prt i e = case e of
    Package_declaration identifier packagedeclarativepart packagetexts packagesimplenames -> prPrec i 0 (concatD [doc (showString "PACKAGE"), prt 0 identifier, doc (showString "IS"), prt 0 packagedeclarativepart, doc (showString "END"), prt 0 packagetexts, prt 0 packagesimplenames, doc (showString ";")])

instance Print Packagetext where
  prt i e = case e of
    Packagetext -> prPrec i 0 (concatD [doc (showString "PACKAGE")])
  prtList _ [] = (concatD [])
  prtList _ [] = (concatD [])
  prtList _ (x:xs) = (concatD [prt 0 x, prt 0 xs])
  prtList _ (x:xs) = (concatD [prt 0 x, prt 0 xs])
instance Print Package_declarative_item where
  prt i e = case e of
    Package_declarative_itemSubprogram_declaration subprogramdeclaration -> prPrec i 0 (concatD [prt 0 subprogramdeclaration])
    Package_declarative_itemType_declaration typedeclaration -> prPrec i 0 (concatD [prt 0 typedeclaration])
    Package_declarative_itemSubtype_declaration subtypedeclaration -> prPrec i 0 (concatD [prt 0 subtypedeclaration])
    Package_declarative_itemConstant_declaration constantdeclaration -> prPrec i 0 (concatD [prt 0 constantdeclaration])
    Package_declarative_itemSignal_declaration signaldeclaration -> prPrec i 0 (concatD [prt 0 signaldeclaration])
    Package_declarative_itemShared_variable_declaration sharedvariabledeclaration -> prPrec i 0 (concatD [prt 0 sharedvariabledeclaration])
    Package_declarative_itemFile_declaration filedeclaration -> prPrec i 0 (concatD [prt 0 filedeclaration])
    Package_declarative_itemAlias_declaration aliasdeclaration -> prPrec i 0 (concatD [prt 0 aliasdeclaration])
    Package_declarative_itemComponent_declaration componentdeclaration -> prPrec i 0 (concatD [prt 0 componentdeclaration])
    Package_declarative_itemAttribute_declaration attributedeclaration -> prPrec i 0 (concatD [prt 0 attributedeclaration])
    Package_declarative_itemAttribute_specification attributespecification -> prPrec i 0 (concatD [prt 0 attributespecification])
    Package_declarative_itemDisconnection_specification disconnectionspecification -> prPrec i 0 (concatD [prt 0 disconnectionspecification])
    Package_declarative_itemUse_clause useclause -> prPrec i 0 (concatD [prt 0 useclause])
    Package_declarative_itemGroup_template_declaration grouptemplatedeclaration -> prPrec i 0 (concatD [prt 0 grouptemplatedeclaration])
    Package_declarative_itemGroup_declaration groupdeclaration -> prPrec i 0 (concatD [prt 0 groupdeclaration])
  prtList _ [] = (concatD [])
  prtList _ (x:xs) = (concatD [prt 0 x, prt 0 xs])
instance Print Package_declarative_part where
  prt i e = case e of
    Package_declarative_part packagedeclarativeitems -> prPrec i 0 (concatD [prt 0 packagedeclarativeitems])

instance Print Parameter_specification where
  prt i e = case e of
    Parameter_specification identifier discreterange -> prPrec i 0 (concatD [prt 0 identifier, doc (showString "IN"), prt 0 discreterange])

instance Print Physical_literal where
  prt i e = case e of
    Physical_literal abstractliterals unitname -> prPrec i 0 (concatD [prt 0 abstractliterals, prt 0 unitname])

instance Print Unit_name where
  prt i e = case e of
    Unit_name name -> prPrec i 0 (concatD [prt 0 name])

instance Print Physical_type_definition where
  prt i e = case e of
    Physical_type_definition rangeconstraint baseunitdeclaration secondaryunitdeclarations physicaltypesimplenames -> prPrec i 0 (concatD [prt 0 rangeconstraint, doc (showString "UNITS"), prt 0 baseunitdeclaration, prt 0 secondaryunitdeclarations, doc (showString "END"), doc (showString "UNITS"), prt 0 physicaltypesimplenames])

instance Print Physical_type_simple_name where
  prt i e = case e of
    Physical_type_simple_name simplename -> prPrec i 0 (concatD [prt 0 simplename])
  prtList _ [] = (concatD [])
  prtList _ (x:xs) = (concatD [prt 0 x, prt 0 xs])
instance Print Port_clause where
  prt i e = case e of
    Port_clause portlist -> prPrec i 0 (concatD [doc (showString "PORT"), doc (showString "("), prt 0 portlist, doc (showString ")"), doc (showString ";")])

instance Print Port_list where
  prt i e = case e of
    Port_list portinterfacelist -> prPrec i 0 (concatD [prt 0 portinterfacelist])

instance Print Port_interface_list where
  prt i e = case e of
    Port_interface_list interfacelist -> prPrec i 0 (concatD [prt 0 interfacelist])

instance Print Port_map_aspect where
  prt i e = case e of
    Port_map_aspect portassociationlist -> prPrec i 0 (concatD [doc (showString "PORT"), doc (showString "MAP"), doc (showString "("), prt 0 portassociationlist, doc (showString ")")])
  prtList _ [] = (concatD [])
  prtList _ (x:xs) = (concatD [prt 0 x, prt 0 xs])
instance Print Port_association_list where
  prt i e = case e of
    Port_association_list associationlist -> prPrec i 0 (concatD [prt 0 associationlist])

instance Print Procedure_name where
  prt i e = case e of
    Procedure_name name -> prPrec i 0 (concatD [prt 0 name])

instance Print Prefix where
  prt i e = case e of
    PrefixName name -> prPrec i 0 (concatD [prt 0 name])
    PrefixFunction_call functioncall -> prPrec i 0 (concatD [prt 0 functioncall])

instance Print Primary where
  prt i e = case e of
    PrimaryName name -> prPrec i 0 (concatD [prt 0 name])
    PrimaryLiteral literal -> prPrec i 0 (concatD [prt 0 literal])
    PrimaryAggregate aggregate -> prPrec i 0 (concatD [prt 0 aggregate])
    PrimaryFunction_call functioncall -> prPrec i 0 (concatD [prt 0 functioncall])
    PrimaryQualified_expression qualifiedexpression -> prPrec i 0 (concatD [prt 0 qualifiedexpression])
    PrimaryType_conversion typeconversion -> prPrec i 0 (concatD [prt 0 typeconversion])
    PrimaryAllocator allocator -> prPrec i 0 (concatD [prt 0 allocator])
    Primary1 expression -> prPrec i 0 (concatD [doc (showString "("), prt 0 expression, doc (showString ")")])
  prtList _ [x] = (concatD [prt 0 x])
  prtList _ (x:xs) = (concatD [prt 0 x, doc (showString "**"), prt 0 xs])
instance Print Primary_unit where
  prt i e = case e of
    Primary_unitEntity_declaration entitydeclaration -> prPrec i 0 (concatD [prt 0 entitydeclaration])
    Primary_unitConfiguration_declaration configurationdeclaration -> prPrec i 0 (concatD [prt 0 configurationdeclaration])
    Primary_unitPackage_declaration packagedeclaration -> prPrec i 0 (concatD [prt 0 packagedeclaration])

instance Print Procedure_call where
  prt i e = case e of
    Procedure_call1 procedurename actualparameterpartpars -> prPrec i 0 (concatD [prt 0 procedurename, prt 0 actualparameterpartpars])

instance Print Procedure_call_statement where
  prt i e = case e of
    Procedure_call_statement labels procedurecall -> prPrec i 0 (concatD [prt 0 labels, prt 0 procedurecall, doc (showString ";")])

instance Print Process_declarative_item where
  prt i e = case e of
    Process_declarative_itemSubprogram_declaration subprogramdeclaration -> prPrec i 0 (concatD [prt 0 subprogramdeclaration])
    Process_declarative_itemSubprogram_body subprogrambody -> prPrec i 0 (concatD [prt 0 subprogrambody])
    Process_declarative_itemType_declaration typedeclaration -> prPrec i 0 (concatD [prt 0 typedeclaration])
    Process_declarative_itemSubtype_declaration subtypedeclaration -> prPrec i 0 (concatD [prt 0 subtypedeclaration])
    Process_declarative_itemConstant_declaration constantdeclaration -> prPrec i 0 (concatD [prt 0 constantdeclaration])
    Process_declarative_itemVariable_declaration variabledeclaration -> prPrec i 0 (concatD [prt 0 variabledeclaration])
    Process_declarative_itemFile_declaration filedeclaration -> prPrec i 0 (concatD [prt 0 filedeclaration])
    Process_declarative_itemAlias_declaration aliasdeclaration -> prPrec i 0 (concatD [prt 0 aliasdeclaration])
    Process_declarative_itemAttribute_declaration attributedeclaration -> prPrec i 0 (concatD [prt 0 attributedeclaration])
    Process_declarative_itemAttribute_specification attributespecification -> prPrec i 0 (concatD [prt 0 attributespecification])
    Process_declarative_itemUse_clause useclause -> prPrec i 0 (concatD [prt 0 useclause])
    Process_declarative_itemGroup_template_declaration grouptemplatedeclaration -> prPrec i 0 (concatD [prt 0 grouptemplatedeclaration])
    Process_declarative_itemGroup_declaration groupdeclaration -> prPrec i 0 (concatD [prt 0 groupdeclaration])
  prtList _ [] = (concatD [])
  prtList _ (x:xs) = (concatD [prt 0 x, prt 0 xs])
instance Print Process_declarative_part where
  prt i e = case e of
    Process_declarative_part processdeclarativeitems -> prPrec i 0 (concatD [prt 0 processdeclarativeitems])

instance Print Process_statement where
  prt i e = case e of
    Process_statement processlabelcolons maybepostponeds1 sensitivitylistpars iss processdeclarativepart processstatementpart maybepostponeds2 processlabels -> prPrec i 0 (concatD [prt 0 processlabelcolons, prt 0 maybepostponeds1, doc (showString "PROCESS"), prt 0 sensitivitylistpars, prt 0 iss, prt 0 processdeclarativepart, doc (showString "BEGIN"), prt 0 processstatementpart, doc (showString "END"), prt 0 maybepostponeds2, doc (showString "PROCESS"), prt 0 processlabels, doc (showString ";")])

instance Print Process_labelColon where
  prt i e = case e of
    Process_labelColon -> prPrec i 0 (concatD [doc (showString ":")])
  prtList _ [] = (concatD [])
  prtList _ (x:xs) = (concatD [prt 0 x, prt 0 xs])
instance Print Sensitivity_listPar where
  prt i e = case e of
    Sensitivity_listPar sensitivitylist -> prPrec i 0 (concatD [doc (showString "("), prt 0 sensitivitylist, doc (showString ")")])
  prtList _ [] = (concatD [])
  prtList _ (x:xs) = (concatD [prt 0 x, prt 0 xs])
instance Print Process_label where
  prt i e = case e of
    Process_label label -> prPrec i 0 (concatD [prt 0 label])
  prtList _ [] = (concatD [])
  prtList _ (x:xs) = (concatD [prt 0 x, prt 0 xs])
instance Print Process_statement_part where
  prt i e = case e of
    Process_statement_part sensitivitylists -> prPrec i 0 (concatD [prt 0 sensitivitylists])

instance Print Range where
  prt i e = case e of
    RangeRange_attribute_name rangeattributename -> prPrec i 0 (concatD [prt 0 rangeattributename])
    Range1 simpleexpression1 direction simpleexpression2 -> prPrec i 0 (concatD [prt 0 simpleexpression1, prt 0 direction, prt 0 simpleexpression2])

instance Print Range_attribute_name where
  prt i e = case e of
    Range_attribute_name attributename -> prPrec i 0 (concatD [prt 0 attributename])

instance Print Range_constraint where
  prt i e = case e of
    Range_constraint range1 range2 -> prPrec i 0 (concatD [prt 0 range1, prt 0 range2])

instance Print Record_type_definition where
  prt i e = case e of
    Record_type_definition elementdeclarations recordtypesimplenames -> prPrec i 0 (concatD [doc (showString "RECORD"), prt 0 elementdeclarations, doc (showString "END"), doc (showString "RECORD"), prt 0 recordtypesimplenames])

instance Print Record_type_simple_name where
  prt i e = case e of
    Record_type_simple_name simplename -> prPrec i 0 (concatD [prt 0 simplename])
  prtList _ [] = (concatD [])
  prtList _ (x:xs) = (concatD [prt 0 x, prt 0 xs])
instance Print Relation where
  prt i e = case e of
    Relation shiftexpression reshifts -> prPrec i 0 (concatD [prt 0 shiftexpression, prt 0 reshifts])

instance Print ReShift where
  prt i e = case e of
    ReShift relationaloperator shiftexpression -> prPrec i 0 (concatD [prt 0 relationaloperator, prt 0 shiftexpression])
  prtList _ [] = (concatD [])
  prtList _ (x:xs) = (concatD [prt 0 x, prt 0 xs])
instance Print Relational_operator where
  prt i e = case e of
    Relational_operator1 -> prPrec i 0 (concatD [doc (showString "=")])
    Relational_operator2 -> prPrec i 0 (concatD [doc (showString "/=")])
    Relational_operator3 -> prPrec i 0 (concatD [doc (showString "<")])
    Relational_operator4 -> prPrec i 0 (concatD [doc (showString "<=")])
    Relational_operator5 -> prPrec i 0 (concatD [doc (showString ">")])
    Relational_operator6 -> prPrec i 0 (concatD [doc (showString ">=")])

instance Print Report_statement where
  prt i e = case e of
    Report_statement labels expression sevexps -> prPrec i 0 (concatD [prt 0 labels, doc (showString "REPORT"), prt 0 expression, prt 0 sevexps, doc (showString ";")])

instance Print SevExp where
  prt i e = case e of
    SevExp expression -> prPrec i 0 (concatD [doc (showString "SEVERITY"), prt 0 expression])
  prtList _ [] = (concatD [])
  prtList _ (x:xs) = (concatD [prt 0 x, prt 0 xs])
instance Print Return_statement where
  prt i e = case e of
    Return_statement labels expressions -> prPrec i 0 (concatD [prt 0 labels, doc (showString "RETURN"), prt 0 expressions, doc (showString ";")])

instance Print Scalar_type_definition where
  prt i e = case e of
    Scalar_type_definitionEnumeration_type_definition enumerationtypedefinition -> prPrec i 0 (concatD [prt 0 enumerationtypedefinition])
    Scalar_type_definitionInteger_type_definition integertypedefinition -> prPrec i 0 (concatD [prt 0 integertypedefinition])
    Scalar_type_definitionFloating_type_definition floatingtypedefinition -> prPrec i 0 (concatD [prt 0 floatingtypedefinition])
    Scalar_type_definitionPhysical_type_definition physicaltypedefinition -> prPrec i 0 (concatD [prt 0 physicaltypedefinition])

instance Print Secondary_unit where
  prt i e = case e of
    Secondary_unitArchitecture_body architecturebody -> prPrec i 0 (concatD [prt 0 architecturebody])
    Secondary_unitPackage_body packagebody -> prPrec i 0 (concatD [prt 0 packagebody])

instance Print Secondary_unit_declaration where
  prt i e = case e of
    Secondary_unit_declaration identifier physicalliteral -> prPrec i 0 (concatD [prt 0 identifier, doc (showString "="), prt 0 physicalliteral, doc (showString ";")])
  prtList _ [] = (concatD [])
  prtList _ (x:xs) = (concatD [prt 0 x, prt 0 xs])
instance Print Selected_name where
  prt i e = case e of
    Selected_name prefix suffix -> prPrec i 0 (concatD [prt 0 prefix, doc (showString "."), prt 0 suffix])
  prtList _ [x] = (concatD [prt 0 x])
  prtList _ (x:xs) = (concatD [prt 0 x, doc (showString ","), prt 0 xs])
instance Print Selected_signal_assignment where
  prt i e = case e of
    Selected_signal_assignment expression target options selectedwaveforms -> prPrec i 0 (concatD [doc (showString "WITH"), prt 0 expression, doc (showString "SELECT"), prt 0 target, doc (showString "<="), prt 0 options, prt 0 selectedwaveforms, doc (showString ";")])

instance Print Selected_waveforms where
  prt i e = case e of
    Selected_waveforms wavechoices -> prPrec i 0 (concatD [prt 0 wavechoices])

instance Print WaveChoice where
  prt i e = case e of
    WaveChoice waveform choices -> prPrec i 0 (concatD [prt 0 waveform, doc (showString "WHEN"), prt 0 choices])
  prtList _ [x] = (concatD [prt 0 x])
  prtList _ (x:xs) = (concatD [prt 0 x, doc (showString ","), prt 0 xs])
instance Print Sensitivity_clause where
  prt i e = case e of
    Sensitivity_clause sensitivitylist -> prPrec i 0 (concatD [doc (showString "ON"), prt 0 sensitivitylist])
  prtList _ [] = (concatD [])
  prtList _ (x:xs) = (concatD [prt 0 x, prt 0 xs])
instance Print Sensitivity_list where
  prt i e = case e of
    Sensitivity_list signalnames -> prPrec i 0 (concatD [prt 0 signalnames])
  prtList _ [] = (concatD [])
  prtList _ [] = (concatD [])
  prtList _ (x:xs) = (concatD [prt 0 x, prt 0 xs])
  prtList _ (x:xs) = (concatD [prt 0 x, prt 0 xs])
instance Print Signal_name where
  prt i e = case e of
    Signal_name name -> prPrec i 0 (concatD [prt 0 name])
  prtList _ [x] = (concatD [prt 0 x])
  prtList _ (x:xs) = (concatD [prt 0 x, doc (showString ","), prt 0 xs])
instance Print Sequence_of_statements where
  prt i e = case e of
    Sequence_of_statements sequenceofstatementss -> prPrec i 0 (concatD [prt 0 sequenceofstatementss])
  prtList _ [] = (concatD [])
  prtList _ (x:xs) = (concatD [prt 0 x, prt 0 xs])
instance Print Sequential_statement where
  prt i e = case e of
    Sequential_statementWait_statement waitstatement -> prPrec i 0 (concatD [prt 0 waitstatement])
    Sequential_statementAssertion_statement assertionstatement -> prPrec i 0 (concatD [prt 0 assertionstatement])
    Sequential_statementReport_statement reportstatement -> prPrec i 0 (concatD [prt 0 reportstatement])
    Sequential_statementSignal_assignment_statement signalassignmentstatement -> prPrec i 0 (concatD [prt 0 signalassignmentstatement])
    Sequential_statementVariable_assignment_statement variableassignmentstatement -> prPrec i 0 (concatD [prt 0 variableassignmentstatement])
    Sequential_statementProcedure_call_statement procedurecallstatement -> prPrec i 0 (concatD [prt 0 procedurecallstatement])
    Sequential_statementIf_statement ifstatement -> prPrec i 0 (concatD [prt 0 ifstatement])
    Sequential_statementCase_statement casestatement -> prPrec i 0 (concatD [prt 0 casestatement])
    Sequential_statementLoop_statement loopstatement -> prPrec i 0 (concatD [prt 0 loopstatement])
    Sequential_statementNext_statement nextstatement -> prPrec i 0 (concatD [prt 0 nextstatement])
    Sequential_statementExit_statement exitstatement -> prPrec i 0 (concatD [prt 0 exitstatement])
    Sequential_statementReturn_statement returnstatement -> prPrec i 0 (concatD [prt 0 returnstatement])
    Sequential_statementNull_statement nullstatement -> prPrec i 0 (concatD [prt 0 nullstatement])
  prtList _ [] = (concatD [])
  prtList _ (x:xs) = (concatD [prt 0 x, prt 0 xs])
instance Print Shift_expression where
  prt i e = case e of
    Shift_expression simpleexpression shiftoperatorsimpleexpressiontexts -> prPrec i 0 (concatD [prt 0 simpleexpression, prt 0 shiftoperatorsimpleexpressiontexts])

instance Print Shift_operatorSimple_expressionText where
  prt i e = case e of
    Shift_operatorSimple_expressionText shiftoperator simpleexpression -> prPrec i 0 (concatD [prt 0 shiftoperator, prt 0 simpleexpression])
  prtList _ [] = (concatD [])
  prtList _ (x:xs) = (concatD [prt 0 x, prt 0 xs])
instance Print Shift_operator where
  prt i e = case e of
    Shift_operator_SLL -> prPrec i 0 (concatD [doc (showString "SLL")])
    Shift_operator_SRL -> prPrec i 0 (concatD [doc (showString "SRL")])
    Shift_operator_SLA -> prPrec i 0 (concatD [doc (showString "SLA")])
    Shift_operator_SRA -> prPrec i 0 (concatD [doc (showString "SRA")])
    Shift_operator_ROL -> prPrec i 0 (concatD [doc (showString "ROL")])
    Shift_operator_ROR -> prPrec i 0 (concatD [doc (showString "ROR")])

instance Print Sign where
  prt i e = case e of
    Sign1 -> prPrec i 0 (concatD [doc (showString "+")])
    Sign2 -> prPrec i 0 (concatD [doc (showString "-")])
  prtList _ [] = (concatD [])
  prtList _ (x:xs) = (concatD [prt 0 x, prt 0 xs])
instance Print Signal_assignment_statement where
  prt i e = case e of
    Signal_assignment_statement labels target delaymechanisms waveform -> prPrec i 0 (concatD [prt 0 labels, prt 0 target, doc (showString "<="), prt 0 delaymechanisms, prt 0 waveform, doc (showString ";")])

instance Print Signal_declaration where
  prt i e = case e of
    Signal_declaration signal identifierlist subtypeindication signalkinds varassigns -> prPrec i 0 (concatD [prt 0 signal, prt 0 identifierlist, doc (showString ":"), prt 0 subtypeindication, prt 0 signalkinds, prt 0 varassigns, doc (showString ";")])

instance Print Signal where
  prt i e = case e of
    Signal -> prPrec i 0 (concatD [doc (showString "signal")])

instance Print Signal_kind where
  prt i e = case e of
    Signal_kind_REGISTER -> prPrec i 0 (concatD [doc (showString "REGISTER")])
    Signal_kind_BUS -> prPrec i 0 (concatD [doc (showString "BUS")])
  prtList _ [] = (concatD [])
  prtList _ (x:xs) = (concatD [prt 0 x, prt 0 xs])
instance Print Signal_list where
  prt i e = case e of
    Signal_list1 signalnames -> prPrec i 0 (concatD [prt 0 signalnames])
    Signal_list_OTHERS -> prPrec i 0 (concatD [doc (showString "OTHERS")])
    Signal_list_ALL -> prPrec i 0 (concatD [doc (showString "ALL")])

instance Print Signature where
  prt i e = case e of
    Signature typeres -> prPrec i 0 (concatD [prt 0 typeres])
  prtList _ [] = (concatD [])
  prtList _ (x:xs) = (concatD [prt 0 x, prt 0 xs])
instance Print ReturnType where
  prt i e = case e of
    ReturnType typemark -> prPrec i 0 (concatD [doc (showString "return"), prt 0 typemark])
  prtList _ [] = (concatD [])
  prtList _ (x:xs) = (concatD [prt 0 x, prt 0 xs])
instance Print TypeRe where
  prt i e = case e of
    TypeRe typemarks returntypes -> prPrec i 0 (concatD [prt 0 typemarks, prt 0 returntypes])
  prtList _ [] = (concatD [])
  prtList _ (x:xs) = (concatD [prt 0 x, prt 0 xs])
instance Print Simple_expression where
  prt i e = case e of
    Simple_expression signs term addoptems -> prPrec i 0 (concatD [prt 0 signs, prt 0 term, prt 0 addoptems])

instance Print AddOpTem where
  prt i e = case e of
    AddOpTem addingoperator term -> prPrec i 0 (concatD [prt 0 addingoperator, prt 0 term])
  prtList _ [] = (concatD [])
  prtList _ (x:xs) = (concatD [prt 0 x, prt 0 xs])
instance Print Simple_name where
  prt i e = case e of
    Simple_name id -> prPrec i 0 (concatD [prt 0 id])

instance Print Slice_name where
  prt i e = case e of
    Slice_name prefix discreterange -> prPrec i 0 (concatD [prt 0 prefix, doc (showString "("), prt 0 discreterange, doc (showString ")")])

instance Print String_literal where
  prt i e = case e of
    String_literal graphiccharacters -> prPrec i 0 (concatD [doc (showString "\""), prt 0 graphiccharacters, doc (showString "\"")])

instance Print Subprogram_body where
  prt i e = case e of
    Subprogram_body subprogramspecification subprogramdeclarativepart subprogramstatementpart subprogramkinds designators -> prPrec i 0 (concatD [prt 0 subprogramspecification, doc (showString "IS"), prt 0 subprogramdeclarativepart, doc (showString "BEGIN"), prt 0 subprogramstatementpart, doc (showString "END"), prt 0 subprogramkinds, prt 0 designators, doc (showString ";")])

instance Print Subprogram_declaration where
  prt i e = case e of
    Subprogram_declaration subprogramspecification -> prPrec i 0 (concatD [prt 0 subprogramspecification, doc (showString ";")])

instance Print Subprogram_declarative_item where
  prt i e = case e of
    Subprogram_declarative_itemSubprogram_declaration subprogramdeclaration -> prPrec i 0 (concatD [prt 0 subprogramdeclaration])
    Subprogram_declarative_itemSubprogram_body subprogrambody -> prPrec i 0 (concatD [prt 0 subprogrambody])
    Subprogram_declarative_itemType_declaration typedeclaration -> prPrec i 0 (concatD [prt 0 typedeclaration])
    Subprogram_declarative_itemSubtype_declaration subtypedeclaration -> prPrec i 0 (concatD [prt 0 subtypedeclaration])
    Subprogram_declarative_itemConstant_declaration constantdeclaration -> prPrec i 0 (concatD [prt 0 constantdeclaration])
    Subprogram_declarative_itemVariable_declaration variabledeclaration -> prPrec i 0 (concatD [prt 0 variabledeclaration])
    Subprogram_declarative_itemFile_declaration filedeclaration -> prPrec i 0 (concatD [prt 0 filedeclaration])
    Subprogram_declarative_itemAlias_declaration aliasdeclaration -> prPrec i 0 (concatD [prt 0 aliasdeclaration])
    Subprogram_declarative_itemAttribute_declaration attributedeclaration -> prPrec i 0 (concatD [prt 0 attributedeclaration])
    Subprogram_declarative_itemAttribute_specification attributespecification -> prPrec i 0 (concatD [prt 0 attributespecification])
    Subprogram_declarative_itemUse_clause useclause -> prPrec i 0 (concatD [prt 0 useclause])
    Subprogram_declarative_itemGroup_template_declaration grouptemplatedeclaration -> prPrec i 0 (concatD [prt 0 grouptemplatedeclaration])
    Subprogram_declarative_itemGroup_declaration groupdeclaration -> prPrec i 0 (concatD [prt 0 groupdeclaration])
  prtList _ [] = (concatD [])
  prtList _ (x:xs) = (concatD [prt 0 x, prt 0 xs])
instance Print Subprogram_declarative_part where
  prt i e = case e of
    Subprogram_declarative_part subprogramdeclarativeitems -> prPrec i 0 (concatD [prt 0 subprogramdeclarativeitems])

instance Print Subprogram_kind where
  prt i e = case e of
    Subprogram_kind_PROCEDURE -> prPrec i 0 (concatD [doc (showString "PROCEDURE")])
    Subprogram_kind_FUNCTION -> prPrec i 0 (concatD [doc (showString "FUNCTION")])
  prtList _ [] = (concatD [])
  prtList _ (x:xs) = (concatD [prt 0 x, prt 0 xs])
instance Print Subprogram_specification where
  prt i e = case e of
    Subprogram_specification1 designator formalparameterlistpars -> prPrec i 0 (concatD [doc (showString "PROCEDURE"), prt 0 designator, prt 0 formalparameterlistpars])
    Subprogram_specification2 pureimpures designator formalparameterlistpars typemark -> prPrec i 0 (concatD [prt 0 pureimpures, doc (showString "FUNCTION"), prt 0 designator, prt 0 formalparameterlistpars, doc (showString "RETURN"), prt 0 typemark])

instance Print Formal_parameter_listPar where
  prt i e = case e of
    Formal_parameter_listPar formalparameterlist -> prPrec i 0 (concatD [doc (showString "("), prt 0 formalparameterlist, doc (showString ")")])
  prtList _ [] = (concatD [])
  prtList _ (x:xs) = (concatD [prt 0 x, prt 0 xs])
instance Print PureImpure where
  prt i e = case e of
    PureImpure_PURE -> prPrec i 0 (concatD [doc (showString "PURE")])
    PureImpure_IMPURE -> prPrec i 0 (concatD [doc (showString "IMPURE")])
  prtList _ [] = (concatD [])
  prtList _ (x:xs) = (concatD [prt 0 x, prt 0 xs])
instance Print Subprogram_statement_part where
  prt i e = case e of
    Subprogram_statement_part sequentialstatements -> prPrec i 0 (concatD [prt 0 sequentialstatements])

instance Print Subtype_declaration where
  prt i e = case e of
    Subtype_declaration identifier subtypeindication -> prPrec i 0 (concatD [doc (showString "SUBTYPE"), prt 0 identifier, doc (showString "IS"), prt 0 subtypeindication, doc (showString ";")])

instance Print Subtype_indication where
  prt i e = case e of
    Subtype_indication resolutionfunctionnames typemark constraints -> prPrec i 0 (concatD [prt 0 resolutionfunctionnames, prt 0 typemark, prt 0 constraints])
  prtList _ [] = (concatD [])
  prtList _ [x] = (concatD [prt 0 x])
  prtList _ (x:xs) = (concatD [prt 0 x, doc (showString ";"), prt 0 xs])
instance Print Resolution_function_name where
  prt i e = case e of
    Resolution_function_name id -> prPrec i 0 (concatD [prt 0 id])
  prtList _ [] = (concatD [])
  prtList _ (x:xs) = (concatD [prt 0 x, prt 0 xs])
instance Print Suffix where
  prt i e = case e of
    SuffixSimple_name simplename -> prPrec i 0 (concatD [prt 0 simplename])
    SuffixCharacter_literal characterliteral -> prPrec i 0 (concatD [prt 0 characterliteral])
    SuffixOperator_symbol operatorsymbol -> prPrec i 0 (concatD [prt 0 operatorsymbol])
    Suffix_ALL -> prPrec i 0 (concatD [doc (showString "ALL")])

instance Print Target where
  prt i e = case e of
    TargetName name -> prPrec i 0 (concatD [prt 0 name])
    TargetAggregate aggregate -> prPrec i 0 (concatD [prt 0 aggregate])

instance Print Term where
  prt i e = case e of
    Term factor facmulfacs -> prPrec i 0 (concatD [prt 0 factor, prt 0 facmulfacs])

instance Print FacMulFac where
  prt i e = case e of
    FacMulFac multiplyingoperator factor -> prPrec i 0 (concatD [prt 0 multiplyingoperator, prt 0 factor])
  prtList _ [] = (concatD [])
  prtList _ (x:xs) = (concatD [prt 0 x, prt 0 xs])
instance Print Timeout_clause where
  prt i e = case e of
    Timeout_clause timeexpression -> prPrec i 0 (concatD [doc (showString "FOR"), prt 0 timeexpression])
  prtList _ [] = (concatD [])
  prtList _ (x:xs) = (concatD [prt 0 x, prt 0 xs])
instance Print Time_expression where
  prt i e = case e of
    Time_expression expression -> prPrec i 0 (concatD [prt 0 expression])

instance Print Type_conversion where
  prt i e = case e of
    Type_conversion typemark expression -> prPrec i 0 (concatD [prt 0 typemark, doc (showString "("), prt 0 expression, doc (showString ")")])

instance Print Type_declaration where
  prt i e = case e of
    Type_declarationFull_type_declaration fulltypedeclaration -> prPrec i 0 (concatD [prt 0 fulltypedeclaration])
    Type_declarationIncomplete_type_declaration incompletetypedeclaration -> prPrec i 0 (concatD [prt 0 incompletetypedeclaration])

instance Print Type_definition where
  prt i e = case e of
    Type_definitionScalar_type_definition scalartypedefinition -> prPrec i 0 (concatD [prt 0 scalartypedefinition])
    Type_definitionComposite_type_definition compositetypedefinition -> prPrec i 0 (concatD [prt 0 compositetypedefinition])
    Type_definitionAccess_type_definition accesstypedefinition -> prPrec i 0 (concatD [prt 0 accesstypedefinition])
    Type_definitionFile_type_definition filetypedefinition -> prPrec i 0 (concatD [prt 0 filetypedefinition])

instance Print Type_mark where
  prt i e = case e of
    Type_markType_name typename -> prPrec i 0 (concatD [prt 0 typename])
    Type_markSubtype_name subtypename -> prPrec i 0 (concatD [prt 0 subtypename])
  prtList _ [] = (concatD [])
  prtList _ [x] = (concatD [prt 0 x])
  prtList _ (x:xs) = (concatD [prt 0 x, doc (showString ";"), prt 0 xs])
instance Print Type_name where
  prt i e = case e of
    Type_name id -> prPrec i 0 (concatD [prt 0 id])

instance Print Unconstrained_array_definition where
  prt i e = case e of
    Unconstrained_array_definition indexsubtypedefinitions elementsubtypeindication -> prPrec i 0 (concatD [doc (showString "ARRAY"), doc (showString "("), prt 0 indexsubtypedefinitions, doc (showString ")"), doc (showString "OF"), prt 0 elementsubtypeindication])

instance Print Element_subtype_indication where
  prt i e = case e of
    Element_subtype_indication subtypeindication -> prPrec i 0 (concatD [prt 0 subtypeindication])

instance Print Subtype_name where
  prt i e = case e of
    Subtype_name id -> prPrec i 0 (concatD [prt 0 id])

instance Print Use_clause where
  prt i e = case e of
    Use_clause selectednames -> prPrec i 0 (concatD [doc (showString "USE"), prt 0 selectednames, doc (showString ";")])

instance Print Variable_assignment_statement where
  prt i e = case e of
    Variable_assignment_statement labels target expression -> prPrec i 0 (concatD [prt 0 labels, prt 0 target, doc (showString ":="), prt 0 expression, doc (showString ";")])

instance Print Variable_declaration where
  prt i e = case e of
    Variable_declaration sharedtexts identifierlist subtypeindication varassigns -> prPrec i 0 (concatD [prt 0 sharedtexts, doc (showString "VARIABLE"), prt 0 identifierlist, doc (showString ":"), prt 0 subtypeindication, prt 0 varassigns, doc (showString ";")])

instance Print SharedText where
  prt i e = case e of
    ShareText -> prPrec i 0 (concatD [doc (showString "SHARED")])
  prtList _ [] = (concatD [])
  prtList _ (x:xs) = (concatD [prt 0 x, prt 0 xs])
instance Print Value_expression where
  prt i e = case e of
    Value_expression expression -> prPrec i 0 (concatD [prt 0 expression])

instance Print Wait_statement where
  prt i e = case e of
    Wait_statement labels sensitivityclauses conditionclauses timeoutclauses -> prPrec i 0 (concatD [prt 0 labels, doc (showString "WAIT"), prt 0 sensitivityclauses, prt 0 conditionclauses, prt 0 timeoutclauses, doc (showString ";")])

instance Print Waveform where
  prt i e = case e of
    Waveform1 waveformelements -> prPrec i 0 (concatD [prt 0 waveformelements])
    Waveform_UNAFFECTED -> prPrec i 0 (concatD [doc (showString "UNAFFECTED")])

instance Print Waveform_element where
  prt i e = case e of
    Waveform_element1 valueexpression aftertimes -> prPrec i 0 (concatD [prt 0 valueexpression, prt 0 aftertimes])
    Waveform_element2 aftertimes -> prPrec i 0 (concatD [doc (showString "NULL"), prt 0 aftertimes])
  prtList _ [x] = (concatD [prt 0 x])
  prtList _ (x:xs) = (concatD [prt 0 x, doc (showString ","), prt 0 xs])
instance Print AfterTime where
  prt i e = case e of
    AfterTime timeexpression -> prPrec i 0 (concatD [doc (showString "AFTER"), prt 0 timeexpression])
  prtList _ [] = (concatD [])
  prtList _ [x] = (concatD [prt 0 x])
  prtList _ (x:xs) = (concatD [prt 0 x, doc (showString ","), prt 0 xs])
instance Print Architecture_declarative_part where
  prt i e = case e of
    Architecture_declarative_part blockdeclarativeitems -> prPrec i 0 (concatD [prt 0 blockdeclarativeitems])

instance Print Architecture_statement_part where
  prt i e = case e of
    Architecture_statement_part concurrentstatements -> prPrec i 0 (concatD [prt 0 concurrentstatements])

instance Print MaybeREPORT where
  prt i e = case e of
    MaybeREPORT1 expression -> prPrec i 0 (concatD [doc (showString "REPORT"), prt 0 expression])
    MaybeREPORT2 -> prPrec i 0 (concatD [])
  prtList _ [] = (concatD [])
  prtList _ (x:xs) = (concatD [prt 0 x, prt 0 xs])
instance Print MaybeSEVERITY where
  prt i e = case e of
    MaybeSEVERITY1 expression -> prPrec i 0 (concatD [doc (showString "SEVERITY"), prt 0 expression])
    MaybeSEVERITY2 -> prPrec i 0 (concatD [])
  prtList _ [] = (concatD [])
  prtList _ (x:xs) = (concatD [prt 0 x, prt 0 xs])
instance Print Base_specifier where
  prt i e = case e of
    Base_specifier_B -> prPrec i 0 (concatD [doc (showString "B")])
    Base_specifier_O -> prPrec i 0 (concatD [doc (showString "O")])
    Base_specifier_X -> prPrec i 0 (concatD [doc (showString "X")])

instance Print Basic_character where
  prt i e = case e of
    Basic_characterBasic_graphic_character basicgraphiccharacter -> prPrec i 0 (concatD [prt 0 basicgraphiccharacter])
    Basic_characterFormat_effector formateffector -> prPrec i 0 (concatD [prt 0 formateffector])

instance Print Format_effector where
  prt i e = case e of
    Format_effector -> prPrec i 0 (concatD [doc (showString "Format_effector")])

instance Print Basic_graphic_character where
  prt i e = case e of
    Basic_graphic_characterUpper_case_letter uppercaseletter -> prPrec i 0 (concatD [prt 0 uppercaseletter])
    Basic_graphic_characterDigit digit -> prPrec i 0 (concatD [prt 0 digit])
    Basic_graphic_characterSpecial_character specialcharacter -> prPrec i 0 (concatD [prt 0 specialcharacter])
    Basic_graphic_characterSpace_character spacecharacter -> prPrec i 0 (concatD [prt 0 spacecharacter])

instance Print Local_generic_clause where
  prt i e = case e of
    Local_generic_clause genericclause -> prPrec i 0 (concatD [prt 0 genericclause])
  prtList _ [] = (concatD [])
  prtList _ (x:xs) = (concatD [prt 0 x, prt 0 xs])
instance Print Special_character where
  prt i e = case e of
    Special_character -> prPrec i 0 (concatD [doc (showString "$")])

instance Print Space_character where
  prt i e = case e of
    Space_character -> prPrec i 0 (concatD [doc (showString " ")])


