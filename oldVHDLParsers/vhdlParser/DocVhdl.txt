The Language vhdl2
BNF Converter


%This txt2tags file is machine-generated by the BNF-converter
%Process by txt2tags to generate html or latex



This document was automatically generated by the //BNF-Converter//. It was generated together with the lexer, the parser, and the abstract syntax module, which guarantees that the document matches with the implementation of the language (provided no hand-hacking has taken place).

==The lexical structure of vhdl2==
===Identifiers===
Identifiers //Ident// are unquoted strings beginning with a letter,
followed by any combination of letters, digits, and the characters ``_ '``
reserved words excluded.


===Literals===



NumString literals are recognized by the regular expression
`````(digit | '_')*`````


===Reserved words and symbols===
The set of reserved words is the set of terminals appearing in the grammar. Those reserved words that consist of non-letter characters are called symbols, and they are treated in a different way from those that are similar to identifiers. The lexer follows rules familiar from languages like Haskell, C, and Java, including longest match and spacing conventions.

The reserved words used in vhdl2 are the following:
  | ``A`` | ``ABS`` | ``ACCESS`` | ``AFTER``
  | ``ALIAS`` | ``ALL`` | ``AND`` | ``ARCHITECTURE``
  | ``ARRAY`` | ``ASSERT`` | ``ATTRIBUTE`` | ``B``
  | ``BEGIN`` | ``BLOCK`` | ``BODY`` | ``BUFFER``
  | ``BUS`` | ``C`` | ``CASE`` | ``COMPONENT``
  | ``CONFIGURATION`` | ``CONSTANT`` | ``D`` | ``DISCONNECT``
  | ``DOWNTO`` | ``E`` | ``ELSE`` | ``ELSIF``
  | ``END`` | ``ENTITY`` | ``EXIT`` | ``F``
  | ``FILE`` | ``FOR`` | ``FUNCTION`` | ``Format_effector``
  | ``G`` | ``GENERATE`` | ``GENERIC`` | ``GROUP``
  | ``GUARDED`` | ``H`` | ``I`` | ``IF``
  | ``IMPURE`` | ``IN`` | ``INERTIAL`` | ``INOUT``
  | ``IS`` | ``J`` | ``K`` | ``L``
  | ``LABEL`` | ``LIBRARY`` | ``LINKAGE`` | ``LITERAL``
  | ``LOOP`` | ``M`` | ``MAP`` | ``MOD``
  | ``N`` | ``NAND`` | ``NEW`` | ``NEXT``
  | ``NOR`` | ``NOT`` | ``NULL`` | ``O``
  | ``OF`` | ``ON`` | ``OPEN`` | ``OR``
  | ``OTHERS`` | ``OUT`` | ``P`` | ``PACKAGE``
  | ``PORT`` | ``POSTPONED`` | ``PROCEDURE`` | ``PROCESS``
  | ``PURE`` | ``Q`` | ``R`` | ``RECORD``
  | ``REGISTER`` | ``REJECT`` | ``REM`` | ``REPORT``
  | ``RETURN`` | ``ROL`` | ``ROR`` | ``S``
  | ``SELECT`` | ``SEVERITY`` | ``SHARED`` | ``SIGNAL``
  | ``SLA`` | ``SLL`` | ``SRA`` | ``SRL``
  | ``SUBTYPE`` | ``T`` | ``THEN`` | ``TO``
  | ``TRANSPORT`` | ``TYPE`` | ``U`` | ``UNAFFECTED``
  | ``UNITS`` | ``UNTIL`` | ``USE`` | ``V``
  | ``VARIABLE`` | ``W`` | ``WAIT`` | ``WHEN``
  | ``WHILE`` | ``WITH`` | ``Waveform`` | ``X``
  | ``XNOR`` | ``XOR`` | ``Y`` | ``Z``
  | ``a`` | ``b`` | ``body`` | ``c``
  | ``d`` | ``e`` | ``f`` | ``g``
  | ``h`` | ``i`` | ``j`` | ``k``
  | ``l`` | ``m`` | ``n`` | ``o``
  | ``p`` | ``q`` | ``r`` | ``return``
  | ``s`` | ``signal`` | ``t`` | ``u``
  | ``v`` | ``w`` | ``x`` | ``y``
  | ``z`` |  |  | 

The symbols used in vhdl2 are the following:
  | ( | ) | + | -
  | & | , | ; | :
  | . | := | ' | 0
  | 1 | 2 | 3 | 4
  | 5 | 6 | 7 | 8
  | 9 | # | " | =>
  | <= | <> | I DONT KOW WHAT GOES HERE | _
  | ** | * | / | =
  | /= | < | > | >=
  | $ |   |  | 

===Comments===
Single-line comments begin with --.There are no multiple-line comments in the grammar.

==The syntactic structure of vhdl2==
Non-terminals are enclosed between < and >. 
The symbols -> (production),  **|**  (union) 
and **eps** (empty rule) belong to the BNF notation. 
All other symbols are terminals.

  | //IS// | -> | ``IS`` 
  | //BUSText// | -> | ``BUS`` 
  | //GUARDEDtext// | -> | ``GUARDED`` 
  | //ConstantText// | -> | ``CONSTANT`` 
  | //InText// | -> | ``IN`` 
  | //SIGNALText// | -> | ``SIGNAL`` 
  | //VARIABLEText// | -> | ``VARIABLE`` 
  | //PackageBodytext// | -> | ``PACKAGE`` ``BODY`` 
  | //Abstract_literal// | -> | //Decimal_literal// 
  |  |  **|**  | //Based_literal// 
  | //Access_type_definition// | -> | ``ACCESS`` //Subtype_indication// 
  | //Variable_name// | -> | //Name// 
  | //Actual_designator// | -> | //Expression// 
  |  |  **|**  | //Signal_name// 
  |  |  **|**  | //Variable_name// 
  |  |  **|**  | //File_name// 
  |  |  **|**  | ``OPEN`` 
  | //File_name// | -> | //Name// 
  | //Actual_parameter_part// | -> | //Parameter_association_list// 
  | //Parameter_association_list// | -> | //Association_list// 
  | //Actual_part// | -> | //Actual_designator// 
  |  |  **|**  | //Function_name// ``(`` //Actual_designator// ``)`` 
  |  |  **|**  | //Type_mark// ``(`` //Actual_designator// ``)`` 
  | //Adding_operator// | -> | ``+`` 
  |  |  **|**  | ``-`` 
  |  |  **|**  | ``&`` 
  | //[Element_association]// | -> | **eps**
  |  |  **|**  | //Element_association// 
  |  |  **|**  | //Element_association// ``,`` //[Element_association]// 
  | //Aggregate// | -> | ``(`` //[Element_association]// ``)`` 
  | //Alias_declaration// | -> | ``ALIAS`` //Alias_designator// //[Subtype_indication]// ``IS`` //Name// //[Signature]// ``;`` 
  | //Alias_designator// | -> | //Identifier// 
  |  |  **|**  | //Character_literal// 
  |  |  **|**  | //Operator_symbol// 
  | //Allocator// | -> | ``NEW`` //Subtype_indication// 
  |  |  **|**  | ``NEW`` //Qualified_expression// 
  | //Qualified_expression// | -> | //Expression// 
  |  |  **|**  | //Expression// 
  |  |  **|**  | //Type_mark// ``'`` ``(`` //Expression// ``)`` 
  |  |  **|**  | //Type_mark// ``'`` //Aggregate// 
  | //Architecture_body// | -> | ``ARCHITECTURE`` //Identifier// ``OF`` //Entity_name// ``IS`` //Architecture_declarative_part// ``BEGIN`` //Architecture_statement_part// ``END`` //MaybeArch// //MaybeArchitecture_simple_name// ``;`` 
  | //MaybeArch// | -> | ``ARCHITECTURE`` 
  |  |  **|**  | **eps**
  | //MaybeArchitecture_simple_name// | -> | //Architecture_simple_name// 
  |  |  **|**  | **eps**
  | //Architecture_simple_name// | -> | //Simple_name// 
  | //Array_type_definition// | -> | //Unconstrained_array_definition// 
  |  |  **|**  | //Constrained_array_definition// 
  | //Assertion// | -> | ``ASSERT`` //Condition// //[MaybeREPORT]// //[MaybeSEVERITY]// 
  | //Assertion_statement// | -> | //[Label]// //Assertion// 
  | //Association_element// | -> | //[Formal_part]// //Actual_part// 
  | //Association_list// | -> | //[Association_element]// 
  | //Generic_clause_Map// | -> | //Generic_clause// //[Generic_map_aspectSemi]// 
  | //Port_clause_map// | -> | //Port_clause// //[Port_map_aspectSemi]// 
  | //Port_map_aspectSemi// | -> | //Port_map_aspectSemi// ``;`` 
  | //Index_specificationPar// | -> | ``(`` //Index_specification// ``)`` 
  | //Guard_expressionPar// | -> | ``(`` //Guard_expressionPar// ``)`` 
  | //Case_labelColon// | -> | //Case_label// ``:`` 
  | //Case_label// | -> | //Label// 
  |  |  **|**  | //Label// 
  | //WaveformElse// | -> | //Waveform// ``WHEN`` //Condition// ``ELSE`` 
  |  |  **|**  | ``Waveform`` //[WhenCondition]// 
  | //WhenCondition// | -> | ``WHEN`` //Condition// 
  | //DotInt// | -> | ``.`` //VInteger// 
  | //Static_expressionAssign// | -> | ``:=`` //Static_expression// 
  | //LoopLabelColon// | -> | //Loop_label// ``:`` 
  | //Loop_label// | -> | //Label// 
  |  |  **|**  | //Label// 
  | //Attribute_declaration// | -> | ``ATTRIBUTE`` //Identifier// ``:`` //Type_mark// ``;`` 
  | //Attribute_designator// | -> | //Attribute_simple_name// 
  | //Attribute_simple_name// | -> | //Simple_name// 
  | //Attribute_name// | -> | //Prefix// //[Signature]// ``'`` //Attribute_designator// //[ExpressPar]// 
  | //ExpressPar// | -> | ``(`` //Expression// ``)`` 
  | //Attribute_specification// | -> | ``ATTRIBUTE`` //Attribute_designator// ``OF`` //Entity_specification// ``IS`` //Expression// ``;`` 
  | //Base// | -> | //VInteger// 
  | //Base_unit_declaration// | -> | //Identifier// ``;`` 
  | //Based_integer// | -> | //[Extended_digit]// 
  | //Digit// | -> | ``0`` 
  |  |  **|**  | ``1`` 
  |  |  **|**  | ``2`` 
  |  |  **|**  | ``3`` 
  |  |  **|**  | ``4`` 
  |  |  **|**  | ``5`` 
  |  |  **|**  | ``6`` 
  |  |  **|**  | ``7`` 
  |  |  **|**  | ``8`` 
  |  |  **|**  | ``9`` 
  | //Based_literal// | -> | //Base// ``#`` //[Based_integer]// ``#`` //[Exponent]// 
  | //Basic_identifier// | -> | //Ident// 
  | //Binding_indication// | -> | //[UseEntity]// //[Generic_map_aspect]// //[Port_map_aspect]// 
  | //[UseEntity]// | -> | **eps**
  |  |  **|**  | //UseEntity// //[UseEntity]// 
  |  |  **|**  | **eps**
  |  |  **|**  | //UseEntity// //[UseEntity]// 
  |  |  **|**  | **eps**
  |  |  **|**  | //UseEntity// //[UseEntity]// 
  | //Bit_string_literal// | -> | //Base_specifier// ``"`` //Bit_value// ``"`` 
  | //Bit_value// | -> | //[Extended_digit]// 
  | //Block_configuration// | -> | ``FOR`` //Block_specification// //[UseEntity]// //[Configuration_item]// ``END`` ``FOR`` ``;`` 
  | //Block_declarative_item// | -> | //Subprogram_declaration// 
  |  |  **|**  | //Subprogram_body// 
  |  |  **|**  | //Type_declaration// 
  |  |  **|**  | //Subtype_declaration// 
  |  |  **|**  | //Constant_declaration// 
  |  |  **|**  | //Signal_declaration// 
  |  |  **|**  | //Shared_variable_declaration// 
  |  |  **|**  | //File_declaration// 
  |  |  **|**  | //Alias_declaration// 
  |  |  **|**  | //Component_declaration// 
  |  |  **|**  | //Attribute_declaration// 
  |  |  **|**  | //Attribute_specification// 
  |  |  **|**  | //Configuration_specification// 
  |  |  **|**  | //Disconnection_specification// 
  |  |  **|**  | //Use_clause// 
  |  |  **|**  | //Group_template_declaration// 
  |  |  **|**  | //Group_declaration// 
  | //Shared_variable_declaration// | -> | //Variable_declaration// 
  | //Block_declarative_part// | -> | //[Block_declarative_item]// 
  | //Block_header// | -> | //[Generic_clause_Map]// //[Port_clause_map]// 
  | //Architecture_name// | -> | //Name// 
  | //Generate_statement_label// | -> | //Name// 
  | //Block_specification// | -> | //Architecture_name// 
  |  |  **|**  | //Block_statement_label// 
  |  |  **|**  | //Generate_statement_label// //Index_specificationPar// 
  | //Block_statement_label// | -> | //Label// 
  | //Block_statement// | -> | //Block_label// ``:`` ``BLOCK`` //[Guard_expressionPar]// //[IS]// //Block_header// //Block_declarative_part// ``BEGIN`` //Block_statement_part// ``END`` ``BLOCK`` //[Block_label]// ``;`` 
  | //Block_label// | -> | //Label// 
  | //Block_statement_part// | -> | //[Concurrent_statement]// 
  | //Case_statement// | -> | //[Case_labelColon]// ``CASE`` //Expression// ``IS`` //[Case_statement_alternative]// ``END`` ``CASE`` //[Case_label]// ``;`` 
  | //Choice// | -> | //Simple_expression// 
  |  |  **|**  | //Discrete_range// 
  |  |  **|**  | //Element_simple_name// 
  |  |  **|**  | ``OTHERS`` 
  | //Element_simple_name// | -> | //Simple_name// 
  | //Choices// | -> | //[Choice]// 
  | //Case_statement_alternative// | -> | ``WHEN`` //Choices// ``=>`` //Sequence_of_statements// 
  | //Character_literal// | -> | ``'`` //Graphic_character// ``'`` 
  | //Component_configuration// | -> | ``FOR`` //Component_specification// //[Binding_indication]// //[Block_configuration]// ``END`` ``FOR`` ``;`` 
  | //Component_declaration// | -> | ``COMPONENT`` //Identifier// //[IS]// //[Local_generic_clause]// //[Local_port_clause]// ``END`` ``COMPONENT`` //[Component_simple_name]// ``;`` 
  | //Component_simple_name// | -> | //Simple_name// 
  | //Local_port_clause// | -> | //Port_clause// 
  | //Component_instantiation_statement// | -> | //Instantiation_label// ``:`` //Instantiated_unit// //[Generic_map_aspect]// //[Port_map_aspect]// ``;`` 
  | //Instantiation_label// | -> | //Label// 
  |  |  **|**  | //Label// 
  | //Component_specification// | -> | //Instantiation_list// ``:`` //Component_name// 
  | //Component_name// | -> | //Name// 
  | //Composite_type_definition// | -> | //Array_type_definition// 
  |  |  **|**  | //Record_type_definition// 
  | //Concurrent_assertion_statement// | -> | //[Label]// //[MaybePOSTPONED]// //Assertion// ``;`` 
  | //MaybePOSTPONED// | -> | ``POSTPONED`` 
  | //Concurrent_procedure_call_statement// | -> | //[Label]// //[MaybePOSTPONED]// //Procedure_call// ``;`` 
  | //Concurrent_signal_assignment_statement// | -> | //[Label]// //[MaybePOSTPONED]// //Conditional_signal_assignment// 
  |  |  **|**  | //[Label]// //[MaybePOSTPONED]// //Selected_signal_assignment// 
  | //Concurrent_statement// | -> | //Block_statement// 
  |  |  **|**  | //Process_statement// 
  |  |  **|**  | //Concurrent_procedure_call_statement// 
  |  |  **|**  | //Concurrent_assertion_statement// 
  |  |  **|**  | //Concurrent_signal_assignment_statement// 
  |  |  **|**  | //Component_instantiation_statement// 
  |  |  **|**  | //Generate_statement// 
  | //Condition// | -> | //Boolean_expression// 
  | //Boolean_expression// | -> | //Expression// 
  | //Condition_clause// | -> | ``UNTIL`` //Condition// 
  | //Conditional_signal_assignment// | -> | //Target// ``<=`` //Options// //Conditional_waveforms// ``;`` 
  | //Conditional_waveforms// | -> | //[WaveformElse]// 
  | //MaybeCONFIGURATION// | -> | ``CONFIGURATION`` 
  | //Configuration_declaration// | -> | ``CONFIGURATION`` //Identifier// ``OF`` //Entity_name// ``IS`` //Configuration_declarative_part// //Block_configuration// ``END`` //[MaybeCONFIGURATION]// //[Configuration_simple_name]// ``;`` 
  | //Configuration_simple_name// | -> | //Simple_name// 
  | //Configuration_declarative_item// | -> | //Use_clause// 
  |  |  **|**  | //Attribute_specification// 
  |  |  **|**  | //Group_declaration// 
  | //Configuration_declarative_part// | -> | //[Configuration_declarative_item]// 
  | //Configuration_item// | -> | //Block_configuration// 
  |  |  **|**  | //Component_configuration// 
  | //Configuration_specification// | -> | ``FOR`` //Component_specification// //Binding_indication// ``;`` 
  | //Constant_declaration// | -> | ``CONSTANT`` //Identifier_list// ``:`` //Subtype_indication// //[VarAssign]// ``;`` 
  | //VarAssign// | -> | ``:=`` //Expression// 
  | //Constrained_array_definition// | -> | ``ARRAY`` //Index_constraint// ``OF`` //Element_subtype_indication// 
  | //Constraint// | -> | //Range_constraint// 
  |  |  **|**  | //Index_constraint// 
  | //Context_clause// | -> | //[Context_item]// 
  | //Context_item// | -> | //Library_clause// 
  |  |  **|**  | //Use_clause// 
  | //Decimal_literal// | -> | //VInteger// //[DotInt]// //[Exponent]// 
  | //Declaration// | -> | //Type_declaration// 
  |  |  **|**  | //Subtype_declaration// 
  |  |  **|**  | //Object_declaration// 
  |  |  **|**  | //Interface_declaration// 
  |  |  **|**  | //Alias_declaration// 
  |  |  **|**  | //Attribute_declaration// 
  |  |  **|**  | //Component_declaration// 
  |  |  **|**  | //Group_template_declaration// 
  |  |  **|**  | //Group_declaration// 
  |  |  **|**  | //Entity_declaration// 
  |  |  **|**  | //Configuration_declaration// 
  |  |  **|**  | //Subprogram_declaration// 
  |  |  **|**  | //Package_declaration// 
  | //Delay_mechanism// | -> | ``TRANSPORT`` 
  |  |  **|**  | //[MaybeRejectTime]// ``INERTIAL`` 
  | //MaybeRejectTime// | -> | ``REJECT`` //Time_expression// 
  | //[MaybeRejectTime]// | -> | **eps**
  |  |  **|**  | //MaybeRejectTime// //[MaybeRejectTime]// 
  | //Design_file// | -> | //[Design_unit]// 
  | //[Design_unit]// | -> | //Design_unit// 
  |  |  **|**  | //Design_unit// //[Design_unit]// 
  | //Design_unit// | -> | //Context_clause// //Library_unit// 
  | //Designator// | -> | //Identifier// 
  |  |  **|**  | //Operator_symbol// 
  | //Direction// | -> | ``TO`` 
  |  |  **|**  | ``DOWNTO`` 
  | //Disconnection_specification// | -> | ``DISCONNECT`` //Guarded_signal_specification// ``AFTER`` //Time_expression// ``;`` 
  | //Discrete_range// | -> | //Discrete_subtype_indication// 
  |  |  **|**  | //Range// 
  | //Discrete_subtype_indication// | -> | //Subprogram_declarative_item// 
  | //Element_declaration// | -> | //Identifier_list// ``:`` //Element_subtype_definition// ``;`` 
  | //ChoiceAssign// | -> | //Choices// ``=>`` 
  | //Element_association// | -> | //[ChoiceAssign]// //Expression// 
  | //Element_subtype_definition// | -> | //Subtype_indication// 
  | //Entity_aspect// | -> | ``ENTITY`` //Entity_name// //[ParArchitecture_identifier]// 
  |  |  **|**  | ``CONFIGURATION`` //Configuration_name// 
  |  |  **|**  | ``OPEN`` 
  | //Configuration_name// | -> | //Name// 
  | //ParArchitecture_identifier// | -> | ``(`` //Architecture_identifier// ``)`` 
  | //[ParArchitecture_identifier]// | -> | //ParArchitecture_identifier// 
  |  |  **|**  | //ParArchitecture_identifier// //[ParArchitecture_identifier]// 
  | //UseEntity// | -> | ``USE`` //Entity_aspect// 
  | //Entity_class// | -> | ``ENTITY`` 
  |  |  **|**  | ``ARCHITECTURE`` 
  |  |  **|**  | ``CONFIGURATION`` 
  |  |  **|**  | ``PROCEDURE`` 
  |  |  **|**  | ``FUNCTION`` 
  |  |  **|**  | ``PACKAGE`` 
  |  |  **|**  | ``TYPE`` 
  |  |  **|**  | ``SUBTYPE`` 
  |  |  **|**  | ``CONSTANT`` 
  |  |  **|**  | ``SIGNAL`` 
  |  |  **|**  | ``VARIABLE`` 
  |  |  **|**  | ``COMPONENT`` 
  |  |  **|**  | ``LABEL`` 
  |  |  **|**  | ``LITERAL`` 
  |  |  **|**  | ``UNITS`` 
  |  |  **|**  | ``GROUP`` 
  |  |  **|**  | ``FILE`` 
  | //ECArrows// | -> | ``<>`` 
  | //Entity_class_entry// | -> | //Entity_class// //[ECArrows]// 
  | //Entity_class_entry_list// | -> | //[Entity_class_entry]// 
  | //Entity_declaration// | -> | ``ENTITY`` //Identifier// ``IS`` //Entity_header// //Entity_declarative_part// //[BEGINEntity_statement_part]// ``END`` //[ENTITYText]// //[Entity_simple_name]// ``;`` 
  | //BEGINEntity_statement_part// | -> | ``BEGIN`` //Entity_statement_part// 
  | //ENTITYText// | -> | ``ENTITY`` //Entity_statement_part// 
  | //Entity_simple_name// | -> | //Simple_name// 
  | //Entity_declarative_item// | -> | //Subprogram_declaration// 
  |  |  **|**  | //Subprogram_body// 
  |  |  **|**  | //Type_declaration// 
  |  |  **|**  | //Subtype_declaration// 
  |  |  **|**  | //Constant_declaration// 
  |  |  **|**  | //Signal_declaration// 
  |  |  **|**  | //Shared_variable_declaration// 
  |  |  **|**  | //File_declaration// 
  |  |  **|**  | //Alias_declaration// 
  |  |  **|**  | //Attribute_declaration// 
  |  |  **|**  | //Attribute_specification// 
  |  |  **|**  | //Disconnection_specification// 
  |  |  **|**  | //Use_clause// 
  |  |  **|**  | //Group_template_declaration// 
  |  |  **|**  | //Group_declaration// 
  | //Entity_declarative_part// | -> | //[Entity_declarative_item]// 
  | //Entity_designator// | -> | //Entity_tag// //[Signature]// 
  | //Entity_header// | -> | //[Formal_generic_clause]// //[Formal_port_clause]// 
  | //Formal_generic_clause// | -> | //Generic_clause// 
  | //Formal_port_clause// | -> | //Port_clause// 
  | //Entity_name_list// | -> | //[Entity_designator]// 
  |  |  **|**  | ``OTHERS`` 
  |  |  **|**  | ``ALL`` 
  | //Entity_specification// | -> | //Entity_name_list// ``:`` //Entity_class// 
  | //Entity_statement// | -> | //Concurrent_assertion_statement// 
  |  |  **|**  | //Passive_concurrent_procedure_call_statement// 
  |  |  **|**  | //Passive_process_statement// 
  | //Passive_process_statement// | -> | //Process_statement// 
  | //Passive_concurrent_procedure_call_statement// | -> | //Concurrent_procedure_call_statement// 
  | //Entity_statement_part// | -> | //[Entity_statement]// 
  | //Entity_tag// | -> | //Simple_name// 
  |  |  **|**  | //Character_literal// 
  |  |  **|**  | //Operator_symbol// 
  | //Enumeration_literal// | -> | //Identifier// 
  |  |  **|**  | //Character_literal// 
  | //Enumeration_type_definition// | -> | ``(`` //[Enumeration_literal]// ``)`` 
  | //Exit_statement// | -> | //[Label]// ``EXIT`` //[Loop_label]// //[WhenCondition]// ``;`` 
  | //Exponent// | -> | ``E`` //PlusOp// //VInteger// 
  |  |  **|**  | ``E`` ``-`` //VInteger// 
  | //PlusOp// | -> | ``+`` 
  | //Expression// | -> | //Relation// //ExpOps// //Relation// 
  |  |  **|**  | //Relation// 
  | //ExpOps// | -> | ``AND`` 
  |  |  **|**  | ``OR`` 
  |  |  **|**  | ``XOR`` 
  |  |  **|**  | ``NAND`` 
  |  |  **|**  | ``NOR`` 
  |  |  **|**  | ``XNOR`` 
  | //Extended_digit// | -> | //Digit// 
  |  |  **|**  | //Letter// 
  | //Extended_identifier// | -> | //[Graphic_character]// 
  | //Factor// | -> | //[Primary]// 
  |  |  **|**  | ``ABS`` //Primary// 
  |  |  **|**  | ``NOT`` //Primary// 
  | //File_declaration// | -> | //[FileMatch]// ``;`` 
  | //FileMatch// | -> | ``FILE`` //Identifier_list// ``:`` //Subtype_indication// //File_open_information// 
  | //File_logical_name// | -> | //String_expression// 
  | //String_expression// | -> | //Expression// 
  | //File_open_information// | -> | //[OPENFile]// ``IS`` //File_logical_name// 
  | //OPENFile// | -> | ``OPEN`` //File_open_kind_expression// 
  | //File_open_kind_expression// | -> | //Expression// 
  | //File_type_definition// | -> | ``FILE`` ``OF`` //Type_mark// 
  | //Floating_type_definition// | -> | //Range_constraint// 
  | //Formal_designator// | -> | //Generic_name// 
  |  |  **|**  | //Port_name// 
  |  |  **|**  | //Parameter_name// 
  | //Generic_name// | -> | //Name// 
  | //Port_name// | -> | //Name// 
  | //Parameter_name// | -> | //Name// 
  | //Formal_parameter_list// | -> | //Parameter_interface_list// 
  | //Parameter_interface_list// | -> | //Interface_list// 
  | //Formal_part// | -> | //Formal_designator// 
  |  |  **|**  | //Function_name// ``(`` //Formal_designator// ``)`` 
  |  |  **|**  | //Type_mark// ``(`` //Formal_designator// ``)`` 
  | //Function_name// | -> | //Name// 
  | //Full_type_declaration// | -> | ``TYPE`` //Identifier// ``IS`` //Type_definition// ``;`` 
  | //Function_call// | -> | //Function_name// //[Actual_parameter_partPar]// 
  | //Actual_parameter_partPar// | -> | ``(`` //Actual_parameter_part// ``)`` 
  | //BEGINBlock_declarative_item// | -> | //[Block_declarative_item]// ``BEGIN`` 
  | //Generate_statement// | -> | //Generate_label// ``:`` //Generation_scheme// ``GENERATE`` //[BEGINBlock_declarative_item]// //[Concurrent_statement]// ``END`` ``GENERATE`` //[Generate_label]// ``;`` 
  | //Generate_label// | -> | //Label// 
  | //Generation_scheme// | -> | ``FOR`` //Generate_parameter_specification// 
  |  |  **|**  | ``IF`` //Condition// 
  | //Generate_parameter_specification// | -> | //Parameter_specification// 
  | //Generic_clause// | -> | ``GENERIC`` ``(`` //Generic_list// ``)`` ``;`` 
  | //Generic_list// | -> | //Generic_interface_list// 
  | //Generic_interface_list// | -> | //Interface_list// 
  | //Generic_map_aspect// | -> | ``GENERIC`` ``MAP`` ``(`` //Generic_association_list// ``)`` 
  | //Generic_association_list// | -> | //Association_list// 
  | //Generic_map_aspectSemi// | -> | //Generic_map_aspect// ``;`` 
  | //Graphic_character// | -> | //Basic_graphic_character// 
  |  |  **|**  | //Lower_case_letter// 
  |  |  **|**  | //Other_special_character// 
  | //Other_special_character// | -> | ``I DONT KOW WHAT GOES HERE`` 
  | //Group_constituent// | -> | //Name// 
  |  |  **|**  | //Character_literal// 
  | //Group_constituent_list// | -> | //[Group_constituent]// 
  | //Group_template_declaration// | -> | ``GROUP`` //Identifier// ``IS`` ``(`` //Entity_class_entry_list// ``)`` ``;`` 
  | //Group_declaration// | -> | ``GROUP`` //Identifier// ``:`` //Group_template_name// ``(`` //Group_constituent_list// ``)`` ``;`` 
  | //Group_template_name// | -> | //Name// 
  | //Guarded_signal_specification// | -> | //Guarded_signal_list// ``:`` //Type_mark// 
  | //Guarded_signal_list// | -> | //Signal_list// 
  | //Identifier// | -> | //Basic_identifier// 
  |  |  **|**  | //Extended_identifier// 
  | //Identifier_list// | -> | //[Identifier]// 
  | //If_statement// | -> | //[If_labelColon]// ``IF`` //Condition// ``THEN`` //Sequence_of_statements// //[ELSEStatement]// //[ELSEIFStatement]// ``END`` ``IF`` //[If_label]// ``;`` 
  | //If_labelColon// | -> | //If_label// ``:`` 
  | //ELSEIFStatement// | -> | ``ELSIF`` //Condition// ``THEN`` //Sequence_of_statements// 
  | //ELSEStatement// | -> | ``ELSE`` //Sequence_of_statements// 
  | //If_label// | -> | //Label// 
  | //Incomplete_type_declaration// | -> | ``TYPE`` //Identifier// ``;`` 
  | //Index_constraint// | -> | ``(`` //[Discrete_range]// ``)`` 
  | //Index_specification// | -> | //Discrete_range// 
  |  |  **|**  | //Static_expression// 
  | //Static_expression// | -> | //Expression// 
  | //Index_subtype_definition// | -> | //Type_mark// //Range// ``<>`` 
  | //Indexed_name// | -> | //Prefix// ``(`` //[Expression]// ``)`` 
  | //Instantiated_unit// | -> | //[COMPONENTText]// //Component_name// 
  |  |  **|**  | ``ENTITY`` //Entity_name// //[Architecture_identifierPar]// 
  |  |  **|**  | ``CONFIGURATION`` //Configuration_name// 
  | //COMPONENTText// | -> | ``COMPONENT`` 
  | //Architecture_identifierPar// | -> | ``(`` //Architecture_identifier// ``)`` 
  | //Entity_name// | -> | //Name// 
  | //Architecture_identifier// | -> | //Identifier// 
  | //Instantiation_list// | -> | //[Instantiation_label]// 
  |  |  **|**  | ``OTHERS`` 
  |  |  **|**  | ``ALL`` 
  | //VInteger// | -> | //NumString// 
  | //IntAccuum// | -> | //Digit// //IntAccuum// 
  |  |  **|**  | //Digit// //Underline// //IntAccuum// 
  |  |  **|**  | //Digit// 
  | //Underline// | -> | ``_`` 
  | //Integer_type_definition// | -> | //Range_constraint// 
  | //Interface_constant_declaration// | -> | //[ConstantText]// //Identifier_list// ``:`` //[InText]// //Subtype_indication// //[Static_expressionAssign]// 
  | //Interface_declaration// | -> | //Interface_constant_declaration// 
  |  |  **|**  | //Interface_signal_declaration// 
  |  |  **|**  | //Interface_variable_declaration// 
  |  |  **|**  | //Interface_file_declaration// 
  | //Interface_element// | -> | //Interface_declaration// 
  | //Interface_file_declaration// | -> | ``FILE`` //Identifier_list// ``:`` //Subtype_indication// 
  | //Interface_list// | -> | //[Interface_element]// 
  | //Interface_signal_declaration// | -> | //[SIGNALText]// //Identifier_list// ``:`` //[Mode]// //Subtype_indication// //[BUSText]// //[Static_expressionAssign]// 
  | //Interface_variable_declaration// | -> | //[VARIABLEText]// //Identifier_list// ``:`` //[Mode]// //Subtype_indication// //[Static_expressionAssign]// 
  | //Iteration_scheme// | -> | ``WHILE`` //Condition// 
  |  |  **|**  | ``FOR`` //Loop_parameter_specification// 
  | //Loop_parameter_specification// | -> | //Parameter_specification// 
  | //Label// | -> | //Identifier// 
  | //Letter// | -> | //Upper_case_letter// 
  |  |  **|**  | //Lower_case_letter// 
  | //Upper_case_letter// | -> | ``A`` 
  |  |  **|**  | ``B`` 
  |  |  **|**  | ``C`` 
  |  |  **|**  | ``D`` 
  |  |  **|**  | ``E`` 
  |  |  **|**  | ``F`` 
  |  |  **|**  | ``G`` 
  |  |  **|**  | ``H`` 
  |  |  **|**  | ``I`` 
  |  |  **|**  | ``J`` 
  |  |  **|**  | ``K`` 
  |  |  **|**  | ``L`` 
  |  |  **|**  | ``M`` 
  |  |  **|**  | ``N`` 
  |  |  **|**  | ``O`` 
  |  |  **|**  | ``P`` 
  |  |  **|**  | ``Q`` 
  |  |  **|**  | ``R`` 
  |  |  **|**  | ``S`` 
  |  |  **|**  | ``T`` 
  |  |  **|**  | ``U`` 
  |  |  **|**  | ``V`` 
  |  |  **|**  | ``W`` 
  |  |  **|**  | ``X`` 
  |  |  **|**  | ``Y`` 
  |  |  **|**  | ``Z`` 
  | //Lower_case_letter// | -> | ``a`` 
  |  |  **|**  | ``b`` 
  |  |  **|**  | ``c`` 
  |  |  **|**  | ``d`` 
  |  |  **|**  | ``e`` 
  |  |  **|**  | ``f`` 
  |  |  **|**  | ``g`` 
  |  |  **|**  | ``h`` 
  |  |  **|**  | ``i`` 
  |  |  **|**  | ``j`` 
  |  |  **|**  | ``k`` 
  |  |  **|**  | ``l`` 
  |  |  **|**  | ``m`` 
  |  |  **|**  | ``n`` 
  |  |  **|**  | ``o`` 
  |  |  **|**  | ``p`` 
  |  |  **|**  | ``q`` 
  |  |  **|**  | ``r`` 
  |  |  **|**  | ``s`` 
  |  |  **|**  | ``t`` 
  |  |  **|**  | ``u`` 
  |  |  **|**  | ``v`` 
  |  |  **|**  | ``w`` 
  |  |  **|**  | ``x`` 
  |  |  **|**  | ``y`` 
  |  |  **|**  | ``z`` 
  | //Letter_or_digit// | -> | //Letter// 
  |  |  **|**  | //Digit// 
  | //Library_clause// | -> | ``LIBRARY`` //Logical_name_list// ``;`` 
  | //Library_unit// | -> | //Primary_unit// 
  |  |  **|**  | //Secondary_unit// 
  | //Literal// | -> | //Numeric_literal// 
  |  |  **|**  | //Enumeration_literal// 
  |  |  **|**  | //String_literal// 
  |  |  **|**  | //Bit_string_literal// 
  |  |  **|**  | ``NULL`` 
  | //Logical_name// | -> | //Identifier// 
  | //Logical_name_list// | -> | //[Logical_name]// 
  | //Logical_operator// | -> | ``AND`` 
  |  |  **|**  | ``OR`` 
  |  |  **|**  | ``NAND`` 
  |  |  **|**  | ``NOR`` 
  |  |  **|**  | ``XOR`` 
  |  |  **|**  | ``XNOR`` 
  | //Loop_statement// | -> | //[LoopLabelColon]// //[Iteration_scheme]// ``LOOP`` //Sequence_of_statements// ``END`` ``LOOP`` //[Loop_label]// ``;`` 
  | //Miscellaneous_operator// | -> | ``**`` 
  |  |  **|**  | ``ABS`` 
  |  |  **|**  | ``NOT`` 
  | //Mode// | -> | ``IN`` 
  |  |  **|**  | ``OUT`` 
  |  |  **|**  | ``INOUT`` 
  |  |  **|**  | ``BUFFER`` 
  |  |  **|**  | ``LINKAGE`` 
  | //Multiplying_operator// | -> | ``*`` 
  |  |  **|**  | ``/`` 
  |  |  **|**  | ``MOD`` 
  |  |  **|**  | ``REM`` 
  | //Name// | -> | //Simple_name// 
  |  |  **|**  | //Operator_symbol// 
  |  |  **|**  | //Selected_name// 
  |  |  **|**  | //Indexed_name// 
  |  |  **|**  | //Slice_name// 
  |  |  **|**  | //Attribute_name// 
  | //Next_statement// | -> | //[Label]// ``NEXT`` //[Loop_label]// //[WhenCondition]// ``;`` 
  | //Null_statement// | -> | //[Label]// ``NULL`` ``;`` 
  | //Numeric_literal// | -> | //Abstract_literal// 
  |  |  **|**  | //Physical_literal// 
  | //Object_declaration// | -> | //Constant_declaration// 
  |  |  **|**  | //Signal_declaration// 
  |  |  **|**  | //Variable_declaration// 
  |  |  **|**  | //File_declaration// 
  | //Operator_symbol// | -> | //String_literal// 
  | //Options// | -> | //[GUARDEDtext]// //[Delay_mechanism]// 
  | //Package_body// | -> | ``PACKAGE`` ``body`` //Package_simple_name// ``IS`` //Package_body_declarative_part// ``END`` //[PackageBodytext]// //[PackageBodytext]// ``;`` 
  | //Package_simple_name// | -> | //Simple_name// 
  | //Package_body_declarative_item// | -> | //Subprogram_declaration// 
  |  |  **|**  | //Subprogram_body// 
  |  |  **|**  | //Type_declaration// 
  |  |  **|**  | //Subtype_declaration// 
  |  |  **|**  | //Constant_declaration// 
  |  |  **|**  | //Shared_variable_declaration// 
  |  |  **|**  | //File_declaration// 
  |  |  **|**  | //Alias_declaration// 
  |  |  **|**  | //Use_clause// 
  |  |  **|**  | //Group_template_declaration// 
  |  |  **|**  | //Group_declaration// 
  | //Package_body_declarative_part// | -> | //[Package_body_declarative_item]// 
  | //Package_declaration// | -> | ``PACKAGE`` //Identifier// ``IS`` //Package_declarative_part// ``END`` //[Packagetext]// //[Package_simple_name]// ``;`` 
  | //Packagetext// | -> | ``PACKAGE`` 
  | //Package_declarative_item// | -> | //Subprogram_declaration// 
  |  |  **|**  | //Type_declaration// 
  |  |  **|**  | //Subtype_declaration// 
  |  |  **|**  | //Constant_declaration// 
  |  |  **|**  | //Signal_declaration// 
  |  |  **|**  | //Shared_variable_declaration// 
  |  |  **|**  | //File_declaration// 
  |  |  **|**  | //Alias_declaration// 
  |  |  **|**  | //Component_declaration// 
  |  |  **|**  | //Attribute_declaration// 
  |  |  **|**  | //Attribute_specification// 
  |  |  **|**  | //Disconnection_specification// 
  |  |  **|**  | //Use_clause// 
  |  |  **|**  | //Group_template_declaration// 
  |  |  **|**  | //Group_declaration// 
  | //Package_declarative_part// | -> | //[Package_declarative_item]// 
  | //Parameter_specification// | -> | //Identifier// ``IN`` //Discrete_range// 
  | //Physical_literal// | -> | //[Abstract_literal]// //Unit_name// 
  | //Unit_name// | -> | //Name// 
  | //Physical_type_definition// | -> | //Range_constraint// ``UNITS`` //Base_unit_declaration// //[Secondary_unit_declaration]// ``END`` ``UNITS`` //[Physical_type_simple_name]// 
  | //Physical_type_simple_name// | -> | //Simple_name// 
  | //Port_clause// | -> | ``PORT`` ``(`` //Port_list// ``)`` ``;`` 
  | //Port_list// | -> | //Port_interface_list// 
  | //Port_interface_list// | -> | //Interface_list// 
  | //Port_map_aspect// | -> | ``PORT`` ``MAP`` ``(`` //Port_association_list// ``)`` 
  | //Port_association_list// | -> | //Association_list// 
  | //Procedure_name// | -> | //Name// 
  | //Prefix// | -> | //Name// 
  |  |  **|**  | //Function_call// 
  | //Primary// | -> | //Name// 
  |  |  **|**  | //Literal// 
  |  |  **|**  | //Aggregate// 
  |  |  **|**  | //Function_call// 
  |  |  **|**  | //Qualified_expression// 
  |  |  **|**  | //Type_conversion// 
  |  |  **|**  | //Allocator// 
  |  |  **|**  | ``(`` //Expression// ``)`` 
  | //Primary_unit// | -> | //Entity_declaration// 
  |  |  **|**  | //Configuration_declaration// 
  |  |  **|**  | //Package_declaration// 
  | //Procedure_call// | -> | //Procedure_name// //[Actual_parameter_partPar]// 
  | //Procedure_call_statement// | -> | //[Label]// //Procedure_call// ``;`` 
  | //Process_declarative_item// | -> | //Subprogram_declaration// 
  |  |  **|**  | //Subprogram_body// 
  |  |  **|**  | //Type_declaration// 
  |  |  **|**  | //Subtype_declaration// 
  |  |  **|**  | //Constant_declaration// 
  |  |  **|**  | //Variable_declaration// 
  |  |  **|**  | //File_declaration// 
  |  |  **|**  | //Alias_declaration// 
  |  |  **|**  | //Attribute_declaration// 
  |  |  **|**  | //Attribute_specification// 
  |  |  **|**  | //Use_clause// 
  |  |  **|**  | //Group_template_declaration// 
  |  |  **|**  | //Group_declaration// 
  | //Process_declarative_part// | -> | //[Process_declarative_item]// 
  | //Process_statement// | -> | //[Process_labelColon]// //[MaybePOSTPONED]// ``PROCESS`` //[Sensitivity_listPar]// //[IS]// //Process_declarative_part// ``BEGIN`` //Process_statement_part// ``END`` //[MaybePOSTPONED]// ``PROCESS`` //[Process_label]// ``;`` 
  | //Process_labelColon// | -> | ``:`` 
  | //Sensitivity_listPar// | -> | ``(`` //Sensitivity_list// ``)`` 
  | //Process_label// | -> | //Label// 
  | //Process_statement_part// | -> | //[Sensitivity_list]// 
  | //Range// | -> | //Range_attribute_name// 
  |  |  **|**  | //Simple_expression// //Direction// //Simple_expression// 
  | //Range_attribute_name// | -> | //Attribute_name// 
  | //Range_constraint// | -> | //Range// //Range// 
  | //Record_type_definition// | -> | ``RECORD`` //[Element_declaration]// ``END`` ``RECORD`` //[Record_type_simple_name]// 
  | //Record_type_simple_name// | -> | //Simple_name// 
  | //Relation// | -> | //Shift_expression// //[ReShift]// 
  | //ReShift// | -> | //Relational_operator// //Shift_expression// 
  | //Relational_operator// | -> | ``=`` 
  |  |  **|**  | ``/=`` 
  |  |  **|**  | ``<`` 
  |  |  **|**  | ``<=`` 
  |  |  **|**  | ``>`` 
  |  |  **|**  | ``>=`` 
  | //Report_statement// | -> | //[Label]// ``REPORT`` //Expression// //[SevExp]// ``;`` 
  | //SevExp// | -> | ``SEVERITY`` //Expression// 
  | //Return_statement// | -> | //[Label]// ``RETURN`` //[Expression]// ``;`` 
  | //Scalar_type_definition// | -> | //Enumeration_type_definition// 
  |  |  **|**  | //Integer_type_definition// 
  |  |  **|**  | //Floating_type_definition// 
  |  |  **|**  | //Physical_type_definition// 
  | //Secondary_unit// | -> | //Architecture_body// 
  |  |  **|**  | //Package_body// 
  | //Secondary_unit_declaration// | -> | //Identifier// ``=`` //Physical_literal// ``;`` 
  | //Selected_name// | -> | //Prefix// ``.`` //Suffix// 
  | //Selected_signal_assignment// | -> | ``WITH`` //Expression// ``SELECT`` //Target// ``<=`` //Options// //Selected_waveforms// ``;`` 
  | //Selected_waveforms// | -> | //[WaveChoice]// 
  | //WaveChoice// | -> | //Waveform// ``WHEN`` //Choices// 
  | //Sensitivity_clause// | -> | ``ON`` //Sensitivity_list// 
  | //Sensitivity_list// | -> | //[Signal_name]// 
  | //Signal_name// | -> | //Name// 
  | //Sequence_of_statements// | -> | //[Sequence_of_statements]// 
  | //Sequential_statement// | -> | //Wait_statement// 
  |  |  **|**  | //Assertion_statement// 
  |  |  **|**  | //Report_statement// 
  |  |  **|**  | //Signal_assignment_statement// 
  |  |  **|**  | //Variable_assignment_statement// 
  |  |  **|**  | //Procedure_call_statement// 
  |  |  **|**  | //If_statement// 
  |  |  **|**  | //Case_statement// 
  |  |  **|**  | //Loop_statement// 
  |  |  **|**  | //Next_statement// 
  |  |  **|**  | //Exit_statement// 
  |  |  **|**  | //Return_statement// 
  |  |  **|**  | //Null_statement// 
  | //Shift_expression// | -> | //Simple_expression// //[Shift_operatorSimple_expressionText]// 
  | //Shift_operatorSimple_expressionText// | -> | //Shift_operator// //Simple_expression// 
  |  |  **|**  | //Shift_operator// //Simple_expression// 
  | //Shift_operator// | -> | ``SLL`` 
  |  |  **|**  | ``SRL`` 
  |  |  **|**  | ``SLA`` 
  |  |  **|**  | ``SRA`` 
  |  |  **|**  | ``ROL`` 
  |  |  **|**  | ``ROR`` 
  | //Sign// | -> | ``+`` 
  |  |  **|**  | ``-`` 
  | //Signal_assignment_statement// | -> | //[Label]// //Target// ``<=`` //[Delay_mechanism]// //Waveform// ``;`` 
  | //Signal_declaration// | -> | //Signal// //Identifier_list// ``:`` //Subtype_indication// //[Signal_kind]// //[VarAssign]// ``;`` 
  | //Signal// | -> | ``signal`` 
  | //Signal_kind// | -> | ``REGISTER`` 
  |  |  **|**  | ``BUS`` 
  | //Signal_list// | -> | //[Signal_name]// 
  |  |  **|**  | ``OTHERS`` 
  |  |  **|**  | ``ALL`` 
  | //Signature// | -> | //[TypeRe]// 
  | //ReturnType// | -> | ``return`` //Type_mark// 
  | //TypeRe// | -> | //[Type_mark]// //[ReturnType]// 
  | //Simple_expression// | -> | //[Sign]// //Term// //[AddOpTem]// 
  | //AddOpTem// | -> | //Adding_operator// //Term// 
  | //Simple_name// | -> | //Ident// 
  | //Slice_name// | -> | //Prefix// ``(`` //Discrete_range// ``)`` 
  | //String_literal// | -> | ``"`` //[Graphic_character]// ``"`` 
  | //Subprogram_body// | -> | //Subprogram_specification// ``IS`` //Subprogram_declarative_part// ``BEGIN`` //Subprogram_statement_part// ``END`` //[Subprogram_kind]// //[Designator]// ``;`` 
  | //Subprogram_declaration// | -> | //Subprogram_specification// ``;`` 
  | //Subprogram_declarative_item// | -> | //Subprogram_declaration// 
  |  |  **|**  | //Subprogram_body// 
  |  |  **|**  | //Type_declaration// 
  |  |  **|**  | //Subtype_declaration// 
  |  |  **|**  | //Constant_declaration// 
  |  |  **|**  | //Variable_declaration// 
  |  |  **|**  | //File_declaration// 
  |  |  **|**  | //Alias_declaration// 
  |  |  **|**  | //Attribute_declaration// 
  |  |  **|**  | //Attribute_specification// 
  |  |  **|**  | //Use_clause// 
  |  |  **|**  | //Group_template_declaration// 
  |  |  **|**  | //Group_declaration// 
  | //Subprogram_declarative_part// | -> | //[Subprogram_declarative_item]// 
  | //Subprogram_kind// | -> | ``PROCEDURE`` 
  |  |  **|**  | ``FUNCTION`` 
  | //Subprogram_specification// | -> | ``PROCEDURE`` //Designator// //[Formal_parameter_listPar]// 
  |  |  **|**  | //[PureImpure]// ``FUNCTION`` //Designator// //[Formal_parameter_listPar]// ``RETURN`` //Type_mark// 
  | //Formal_parameter_listPar// | -> | ``(`` //Formal_parameter_list// ``)`` 
  | //PureImpure// | -> | ``PURE`` 
  |  |  **|**  | ``IMPURE`` 
  | //Subprogram_statement_part// | -> | //[Sequential_statement]// 
  | //Subtype_declaration// | -> | ``SUBTYPE`` //Identifier// ``IS`` //Subtype_indication// ``;`` 
  | //Subtype_indication// | -> | //[Resolution_function_name]// //Type_mark// //[Constraint]// 
  | //Resolution_function_name// | -> | //Ident// 
  | //Suffix// | -> | //Simple_name// 
  |  |  **|**  | //Character_literal// 
  |  |  **|**  | //Operator_symbol// 
  |  |  **|**  | ``ALL`` 
  | //Target// | -> | //Name// 
  |  |  **|**  | //Aggregate// 
  | //Term// | -> | //Factor// //[FacMulFac]// 
  | //FacMulFac// | -> | //Multiplying_operator// //Factor// 
  | //Timeout_clause// | -> | ``FOR`` //Time_expression// 
  | //Time_expression// | -> | //Expression// 
  | //Type_conversion// | -> | //Type_mark// ``(`` //Expression// ``)`` 
  | //Type_declaration// | -> | //Full_type_declaration// 
  |  |  **|**  | //Incomplete_type_declaration// 
  | //Type_definition// | -> | //Scalar_type_definition// 
  |  |  **|**  | //Composite_type_definition// 
  |  |  **|**  | //Access_type_definition// 
  |  |  **|**  | //File_type_definition// 
  | //Type_mark// | -> | //Type_name// 
  |  |  **|**  | //Subtype_name// 
  | //Type_name// | -> | //Ident// 
  | //Unconstrained_array_definition// | -> | ``ARRAY`` ``(`` //[Index_subtype_definition]// ``)`` ``OF`` //Element_subtype_indication// 
  | //Element_subtype_indication// | -> | //Subtype_indication// 
  | //Subtype_name// | -> | //Ident// 
  | //Use_clause// | -> | ``USE`` //[Selected_name]// ``;`` 
  | //Variable_assignment_statement// | -> | //[Label]// //Target// ``:=`` //Expression// ``;`` 
  | //Variable_declaration// | -> | //[SharedText]// ``VARIABLE`` //Identifier_list// ``:`` //Subtype_indication// //[VarAssign]// ``;`` 
  | //SharedText// | -> | ``SHARED`` 
  | //[SharedText]// | -> | **eps**
  |  |  **|**  | //SharedText// //[SharedText]// 
  | //Value_expression// | -> | //Expression// 
  | //Wait_statement// | -> | //[Label]// ``WAIT`` //[Sensitivity_clause]// //[Condition_clause]// //[Timeout_clause]// ``;`` 
  | //Waveform// | -> | //[Waveform_element]// 
  |  |  **|**  | ``UNAFFECTED`` 
  | //Waveform_element// | -> | //Value_expression// //[AfterTime]// 
  |  |  **|**  | ``NULL`` //[AfterTime]// 
  | //AfterTime// | -> | ``AFTER`` //Time_expression// 
  | //Architecture_declarative_part// | -> | //[Block_declarative_item]// 
  | //Architecture_statement_part// | -> | //[Concurrent_statement]// 
  | //[Concurrent_statement]// | -> | **eps**
  |  |  **|**  | //Concurrent_statement// //[Concurrent_statement]// 
  |  |  **|**  | **eps**
  |  |  **|**  | //Concurrent_statement// //[Concurrent_statement]// 
  | //[Block_declarative_item]// | -> | **eps**
  |  |  **|**  | //Block_declarative_item// //[Block_declarative_item]// 
  | //[Sign]// | -> | **eps**
  |  |  **|**  | //Sign// //[Sign]// 
  | //[AddOpTem]// | -> | **eps**
  |  |  **|**  | //AddOpTem// //[AddOpTem]// 
  | //[Graphic_character]// | -> | **eps**
  |  |  **|**  | //Graphic_character// //[Graphic_character]// 
  |  |  **|**  | //Graphic_character// 
  |  |  **|**  | //Graphic_character// //[Graphic_character]// 
  | //[Subprogram_kind]// | -> | **eps**
  |  |  **|**  | //Subprogram_kind// //[Subprogram_kind]// 
  | //[Designator]// | -> | **eps**
  |  |  **|**  | //Designator// //[Designator]// 
  | //[Subprogram_declarative_item]// | -> | **eps**
  |  |  **|**  | //Subprogram_declarative_item// //[Subprogram_declarative_item]// 
  | //[Formal_parameter_listPar]// | -> | **eps**
  |  |  **|**  | //Formal_parameter_listPar// //[Formal_parameter_listPar]// 
  | //[PureImpure]// | -> | **eps**
  |  |  **|**  | //PureImpure// //[PureImpure]// 
  | //[Sequential_statement]// | -> | **eps**
  |  |  **|**  | //Sequential_statement// //[Sequential_statement]// 
  | //[Resolution_function_name]// | -> | **eps**
  |  |  **|**  | //Resolution_function_name// //[Resolution_function_name]// 
  | //[Constraint]// | -> | **eps**
  |  |  **|**  | //Constraint// //[Constraint]// 
  | //[FacMulFac]// | -> | **eps**
  |  |  **|**  | //FacMulFac// //[FacMulFac]// 
  | //[Index_subtype_definition]// | -> | **eps**
  |  |  **|**  | //Index_subtype_definition// 
  |  |  **|**  | //Index_subtype_definition// ``,`` //[Index_subtype_definition]// 
  | //[Selected_name]// | -> | //Selected_name// 
  |  |  **|**  | //Selected_name// ``,`` //[Selected_name]// 
  | //[Sensitivity_clause]// | -> | **eps**
  |  |  **|**  | //Sensitivity_clause// //[Sensitivity_clause]// 
  | //[Condition_clause]// | -> | **eps**
  |  |  **|**  | //Condition_clause// //[Condition_clause]// 
  | //[Timeout_clause]// | -> | **eps**
  |  |  **|**  | //Timeout_clause// //[Timeout_clause]// 
  | //[Waveform_element]// | -> | //Waveform_element// 
  |  |  **|**  | //Waveform_element// ``,`` //[Waveform_element]// 
  | //[AfterTime]// | -> | **eps**
  |  |  **|**  | //AfterTime// 
  |  |  **|**  | //AfterTime// ``,`` //[AfterTime]// 
  | //[ChoiceAssign]// | -> | **eps**
  |  |  **|**  | //ChoiceAssign// //[ChoiceAssign]// 
  | //[Signature]// | -> | **eps**
  |  |  **|**  | //Signature// //[Signature]// 
  | //[Subtype_indication]// | -> | **eps**
  |  |  **|**  | //Subtype_indication// 
  |  |  **|**  | //Subtype_indication// ``;`` //[Subtype_indication]// 
  | //MaybeREPORT// | -> | ``REPORT`` //Expression// 
  |  |  **|**  | **eps**
  | //[MaybeREPORT]// | -> | **eps**
  |  |  **|**  | //MaybeREPORT// //[MaybeREPORT]// 
  | //MaybeSEVERITY// | -> | ``SEVERITY`` //Expression// 
  |  |  **|**  | **eps**
  | //[MaybeSEVERITY]// | -> | **eps**
  |  |  **|**  | //MaybeSEVERITY// //[MaybeSEVERITY]// 
  | //[Label]// | -> | **eps**
  |  |  **|**  | //Label// 
  |  |  **|**  | //Label// ``:`` //[Label]// 
  | //[Formal_part]// | -> | **eps**
  |  |  **|**  | //Formal_part// 
  |  |  **|**  | //Formal_part// ``=>`` //[Formal_part]// 
  | //[Association_element]// | -> | **eps**
  |  |  **|**  | //Association_element// ``,`` //[Association_element]// 
  | //[Underline]// | -> | **eps**
  |  |  **|**  | //Underline// //[Underline]// 
  | //[Extended_digit]// | -> | **eps**
  |  |  **|**  | //Extended_digit// 
  |  |  **|**  | //Extended_digit// ``_`` //[Extended_digit]// 
  | //[ExpressPar]// | -> | **eps**
  |  |  **|**  | //ExpressPar// //[ExpressPar]// 
  | //Base_specifier// | -> | ``B`` 
  |  |  **|**  | ``O`` 
  |  |  **|**  | ``X`` 
  | //[Exponent]// | -> | **eps**
  |  |  **|**  | //Exponent// //[Exponent]// 
  | //[Based_integer]// | -> | **eps**
  |  |  **|**  | //Based_integer// ``.`` //[Based_integer]// 
  | //Basic_character// | -> | //Basic_graphic_character// 
  |  |  **|**  | //Format_effector// 
  | //Format_effector// | -> | ``Format_effector`` 
  | //Basic_graphic_character// | -> | //Upper_case_letter// 
  |  |  **|**  | //Digit// 
  |  |  **|**  | //Special_character// 
  |  |  **|**  | //Space_character// 
  | //[Generic_map_aspect]// | -> | **eps**
  |  |  **|**  | //Generic_map_aspect// //[Generic_map_aspect]// 
  | //[Port_map_aspect]// | -> | **eps**
  |  |  **|**  | //Port_map_aspect// //[Port_map_aspect]// 
  | //[Configuration_item]// | -> | **eps**
  |  |  **|**  | //Configuration_item// //[Configuration_item]// 
  | //[Generic_clause_Map]// | -> | **eps**
  |  |  **|**  | //Generic_clause_Map// //[Generic_clause_Map]// 
  |  |  **|**  | **eps**
  |  |  **|**  | //Generic_clause_Map// //[Generic_clause_Map]// 
  | //[Generic_map_aspectSemi]// | -> | **eps**
  |  |  **|**  | //Generic_map_aspectSemi// //[Generic_map_aspectSemi]// 
  | //[Port_map_aspectSemi]// | -> | **eps**
  |  |  **|**  | //Port_map_aspectSemi// //[Port_map_aspectSemi]// 
  | //[Guard_expressionPar]// | -> | **eps**
  |  |  **|**  | //Guard_expressionPar// //[Guard_expressionPar]// 
  | //[IS]// | -> | **eps**
  |  |  **|**  | //IS// //[IS]// 
  | //[Block_label]// | -> | **eps**
  |  |  **|**  | //Block_label// //[Block_label]// 
  | //[Case_label]// | -> | **eps**
  |  |  **|**  | //Case_label// //[Case_label]// 
  | //[Case_labelColon]// | -> | **eps**
  |  |  **|**  | //Case_labelColon// //[Case_labelColon]// 
  | //[Case_statement_alternative]// | -> | **eps**
  |  |  **|**  | //Case_statement_alternative// //[Case_statement_alternative]// 
  | //[Choice]// | -> | //Choice// 
  |  |  **|**  | //Choice// //[Choice]// 
  | //[Binding_indication]// | -> | **eps**
  |  |  **|**  | //Binding_indication// ``;`` //[Binding_indication]// 
  | //[Block_configuration]// | -> | **eps**
  |  |  **|**  | //Block_configuration// //[Block_configuration]// 
  | //[Local_generic_clause]// | -> | **eps**
  |  |  **|**  | //Local_generic_clause// //[Local_generic_clause]// 
  | //Local_generic_clause// | -> | //Generic_clause// 
  | //Special_character// | -> | ``$`` 
  | //Space_character// | -> | `` `` 
  | //[Local_port_clause]// | -> | **eps**
  |  |  **|**  | //Local_port_clause// //[Local_port_clause]// 
  | //[MaybePOSTPONED]// | -> | **eps**
  |  |  **|**  | //MaybePOSTPONED// //[MaybePOSTPONED]// 
  | //[WhenCondition]// | -> | **eps**
  |  |  **|**  | //WhenCondition// //[WhenCondition]// 
  | //[WaveformElse]// | -> | **eps**
  |  |  **|**  | //WaveformElse// //[WaveformElse]// 
  |  |  **|**  | **eps**
  |  |  **|**  | //WaveformElse// //[WaveformElse]// 
  | //[MaybeCONFIGURATION]// | -> | **eps**
  |  |  **|**  | //MaybeCONFIGURATION// //[MaybeCONFIGURATION]// 
  | //[Configuration_simple_name]// | -> | **eps**
  |  |  **|**  | //Configuration_simple_name// //[Configuration_simple_name]// 
  | //[Configuration_declarative_item]// | -> | **eps**
  |  |  **|**  | //Configuration_declarative_item// //[Configuration_declarative_item]// 
  | //[VarAssign]// | -> | **eps**
  |  |  **|**  | //VarAssign// //[VarAssign]// 
  | //[Context_item]// | -> | **eps**
  |  |  **|**  | //Context_item// //[Context_item]// 
  | //[Index_specificationPar]// | -> | **eps**
  |  |  **|**  | //Index_specificationPar// //[Index_specificationPar]// 
  | //[DotInt]// | -> | **eps**
  |  |  **|**  | //DotInt// //[DotInt]// 
  | //[ECArrows]// | -> | **eps**
  |  |  **|**  | //ECArrows// //[ECArrows]// 
  | //[Entity_class_entry]// | -> | //Entity_class_entry// 
  |  |  **|**  | //Entity_class_entry// ``,`` //[Entity_class_entry]// 
  | //[Entity_simple_name]// | -> | **eps**
  |  |  **|**  | //Entity_simple_name// //[Entity_simple_name]// 
  | //[BEGINEntity_statement_part]// | -> | **eps**
  |  |  **|**  | //BEGINEntity_statement_part// //[BEGINEntity_statement_part]// 
  | //[ENTITYText]// | -> | **eps**
  |  |  **|**  | //ENTITYText// //[ENTITYText]// 
  | //[Entity_declarative_item]// | -> | **eps**
  |  |  **|**  | //Entity_declarative_item// //[Entity_declarative_item]// 
  | //[Formal_generic_clause]// | -> | **eps**
  |  |  **|**  | //Formal_generic_clause// //[Formal_generic_clause]// 
  | //[Formal_port_clause]// | -> | **eps**
  |  |  **|**  | //Formal_port_clause// //[Formal_port_clause]// 
  | //[Entity_designator]// | -> | //Entity_designator// 
  |  |  **|**  | //Entity_designator// //[Entity_designator]// 
  | //[Entity_statement]// | -> | **eps**
  |  |  **|**  | //Entity_statement// //[Entity_statement]// 
  | //[Enumeration_literal]// | -> | //Enumeration_literal// 
  |  |  **|**  | //Enumeration_literal// ``,`` //[Enumeration_literal]// 
  | //[Loop_label]// | -> | **eps**
  |  |  **|**  | //Loop_label// 
  |  |  **|**  | //Loop_label// ``,`` //[Loop_label]// 
  | //[PlusOp]// | -> | **eps**
  |  |  **|**  | //PlusOp// //[PlusOp]// 
  | //[Primary]// | -> | //Primary// 
  |  |  **|**  | //Primary// ``**`` //[Primary]// 
  | //[OPENFile]// | -> | **eps**
  |  |  **|**  | //OPENFile// //[OPENFile]// 
  | //[Actual_parameter_partPar]// | -> | **eps**
  |  |  **|**  | //Actual_parameter_partPar// //[Actual_parameter_partPar]// 
  | //[BEGINBlock_declarative_item]// | -> | **eps**
  |  |  **|**  | //BEGINBlock_declarative_item// //[BEGINBlock_declarative_item]// 
  | //[Generate_label]// | -> | **eps**
  |  |  **|**  | //Generate_label// //[Generate_label]// 
  | //[Group_constituent]// | -> | //Group_constituent// 
  |  |  **|**  | //Group_constituent// ``,`` //[Group_constituent]// 
  | //[Identifier]// | -> | //Identifier// 
  |  |  **|**  | //Identifier// ``,`` //[Identifier]// 
  | //[If_label]// | -> | **eps**
  |  |  **|**  | //If_label// 
  |  |  **|**  | //If_label// ``,`` //[If_label]// 
  | //[If_labelColon]// | -> | **eps**
  |  |  **|**  | //If_labelColon// 
  |  |  **|**  | //If_labelColon// ``,`` //[If_labelColon]// 
  | //[ELSEIFStatement]// | -> | **eps**
  |  |  **|**  | //ELSEIFStatement// //[ELSEIFStatement]// 
  | //[ELSEStatement]// | -> | **eps**
  |  |  **|**  | //ELSEStatement// //[ELSEStatement]// 
  | //[Discrete_range]// | -> | //Discrete_range// 
  |  |  **|**  | //Discrete_range// ``,`` //[Discrete_range]// 
  | //[Expression]// | -> | //Expression// 
  |  |  **|**  | //Expression// ``,`` //[Expression]// 
  |  |  **|**  | **eps**
  |  |  **|**  | //Expression// //[Expression]// 
  | //[COMPONENTText]// | -> | **eps**
  |  |  **|**  | //COMPONENTText// //[COMPONENTText]// 
  | //[Architecture_identifierPar]// | -> | **eps**
  |  |  **|**  | //Architecture_identifierPar// //[Architecture_identifierPar]// 
  | //[Instantiation_label]// | -> | //Instantiation_label// 
  |  |  **|**  | //Instantiation_label// ``,`` //[Instantiation_label]// 
  | //[ConstantText]// | -> | **eps**
  |  |  **|**  | //ConstantText// //[ConstantText]// 
  | //[InText]// | -> | **eps**
  |  |  **|**  | //InText// //[InText]// 
  | //[Static_expressionAssign]// | -> | **eps**
  |  |  **|**  | //Static_expressionAssign// //[Static_expressionAssign]// 
  | //[Interface_element]// | -> | //Interface_element// 
  |  |  **|**  | //Interface_element// ``;`` //[Interface_element]// 
  |  |  **|**  | **eps**
  |  |  **|**  | //Interface_element// 
  |  |  **|**  | //Interface_element// ``;`` //[Interface_element]// 
  | //[SIGNALText]// | -> | **eps**
  |  |  **|**  | //SIGNALText// //[SIGNALText]// 
  | //[BUSText]// | -> | **eps**
  |  |  **|**  | //BUSText// //[BUSText]// 
  | //[Mode]// | -> | **eps**
  |  |  **|**  | //Mode// //[Mode]// 
  | //[Logical_name]// | -> | //Logical_name// 
  |  |  **|**  | //Logical_name// ``,`` //[Logical_name]// 
  | //[LoopLabelColon]// | -> | **eps**
  |  |  **|**  | //LoopLabelColon// 
  |  |  **|**  | //LoopLabelColon// ``:`` //[LoopLabelColon]// 
  | //[Iteration_scheme]// | -> | **eps**
  |  |  **|**  | //Iteration_scheme// //[Iteration_scheme]// 
  | //[GUARDEDtext]// | -> | **eps**
  |  |  **|**  | //GUARDEDtext// //[GUARDEDtext]// 
  | //[Delay_mechanism]// | -> | **eps**
  |  |  **|**  | //Delay_mechanism// //[Delay_mechanism]// 
  | //[PackageBodytext]// | -> | **eps**
  |  |  **|**  | //PackageBodytext// //[PackageBodytext]// 
  | //[Package_simple_name]// | -> | **eps**
  |  |  **|**  | //Package_simple_name// //[Package_simple_name]// 
  | //[Package_body_declarative_item]// | -> | **eps**
  |  |  **|**  | //Package_body_declarative_item// //[Package_body_declarative_item]// 
  | //[Packagetext]// | -> | **eps**
  |  |  **|**  | //Packagetext// //[Packagetext]// 
  |  |  **|**  | **eps**
  |  |  **|**  | //Packagetext// //[Packagetext]// 
  | //[Abstract_literal]// | -> | **eps**
  |  |  **|**  | //Abstract_literal// //[Abstract_literal]// 
  | //[Secondary_unit_declaration]// | -> | **eps**
  |  |  **|**  | //Secondary_unit_declaration// //[Secondary_unit_declaration]// 
  | //[Physical_type_simple_name]// | -> | **eps**
  |  |  **|**  | //Physical_type_simple_name// //[Physical_type_simple_name]// 
  | //[Process_declarative_item]// | -> | **eps**
  |  |  **|**  | //Process_declarative_item// //[Process_declarative_item]// 
  | //[Sensitivity_list]// | -> | **eps**
  |  |  **|**  | //Sensitivity_list// //[Sensitivity_list]// 
  |  |  **|**  | **eps**
  |  |  **|**  | //Sensitivity_list// //[Sensitivity_list]// 
  | //[Process_labelColon]// | -> | **eps**
  |  |  **|**  | //Process_labelColon// //[Process_labelColon]// 
  | //[Process_label]// | -> | **eps**
  |  |  **|**  | //Process_label// //[Process_label]// 
  | //[Element_declaration]// | -> | //Element_declaration// 
  |  |  **|**  | //Element_declaration// //[Element_declaration]// 
  | //[ReShift]// | -> | **eps**
  |  |  **|**  | //ReShift// //[ReShift]// 
  | //[WaveChoice]// | -> | //WaveChoice// 
  |  |  **|**  | //WaveChoice// ``,`` //[WaveChoice]// 
  | //[Signal_name]// | -> | //Signal_name// 
  |  |  **|**  | //Signal_name// ``,`` //[Signal_name]// 
  | //[Sequence_of_statements]// | -> | **eps**
  |  |  **|**  | //Sequence_of_statements// //[Sequence_of_statements]// 
  | //[Shift_operatorSimple_expressionText]// | -> | **eps**
  |  |  **|**  | //Shift_operatorSimple_expressionText// //[Shift_operatorSimple_expressionText]// 
  | //[Signal_kind]// | -> | **eps**
  |  |  **|**  | //Signal_kind// //[Signal_kind]// 
  | //[VARIABLEText]// | -> | **eps**
  |  |  **|**  | //VARIABLEText// //[VARIABLEText]// 
  | //[ReturnType]// | -> | **eps**
  |  |  **|**  | //ReturnType// //[ReturnType]// 
  | //[Type_mark]// | -> | **eps**
  |  |  **|**  | //Type_mark// 
  |  |  **|**  | //Type_mark// ``;`` //[Type_mark]// 
  | //[TypeRe]// | -> | **eps**
  |  |  **|**  | //TypeRe// //[TypeRe]// 
  | //[Package_declarative_item]// | -> | **eps**
  |  |  **|**  | //Package_declarative_item// //[Package_declarative_item]// 
  | //[Sensitivity_listPar]// | -> | **eps**
  |  |  **|**  | //Sensitivity_listPar// //[Sensitivity_listPar]// 
  | //[SevExp]// | -> | **eps**
  |  |  **|**  | //SevExp// //[SevExp]// 
  | //[FileMatch]// | -> | **eps**
  |  |  **|**  | //FileMatch// //[FileMatch]// 
  | //[Component_simple_name]// | -> | **eps**
  |  |  **|**  | //Component_simple_name// //[Component_simple_name]// 
  | //[Port_clause_map]// | -> | **eps**
  |  |  **|**  | //Port_clause_map// //[Port_clause_map]// 
  | //[IntAccuum]// | -> | **eps**
  |  |  **|**  | //IntAccuum// //[IntAccuum]// 
  | //[Record_type_simple_name]// | -> | **eps**
  |  |  **|**  | //Record_type_simple_name// //[Record_type_simple_name]// 


